from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from typing import Union, Optional, Dict, List
import sqlite3
from keyboards import *
from database import *
from certificates import *
from config import *
from yookassa import Configuration
import os
import json
import uuid
import sqlite3
from aiogram.filters.state import StateFilter
from certificates import CertificateState, generate_certificate
from simple_payments import payment_manager
from database import save_payment, update_payment_status, get_payment
import asyncio
import logging
import random
from datetime import datetime, timedelta

MAX_BONUS_PERCENTAGE = 0.3  # 30%
BONUS_EARN_PERCENTAGE = 0.05  # 10%
FIRST_ORDER_DISCOUNT = 0.1  # 10% —Å–∫–∏–¥–∫–∞ –Ω–∞ –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.DEBUG)
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

bot = Bot(token=BOT_TOKEN)

# –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥ –∏–∑ –º–µ–Ω—é
MENU_COMMANDS = {
    "üå∏ –ö–∞—Ç–∞–ª–æ–≥", "üöö –î–æ—Å—Ç–∞–≤–∫–∞", "üìû –ú–µ–Ω–µ–¥–∂–µ—Ä", "üìç –ù–∞ –∫–∞—Ä—Ç–µ",
    "üéÅ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç", "‚≠ê –û—Ç–∑—ã–≤—ã", "üõí –ö–æ—Ä–∑–∏–Ω–∞", "üßæ –ú–æ–∏ –∑–∞–∫–∞–∑—ã",
    "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", "üè† –í –º–µ–Ω—é", "üíé –ú–æ–∏ –±–∞–ª–ª—ã"
}

router = Router()


# --- FSM –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ ---
class OrderState(StatesGroup):
    name = State()
    phone = State()
    delivery_type = State()
    address = State()
    delivery_date = State()
    delivery_time = State()
    payment = State()
    waiting_payment = State()
    certificate_code = State()
    use_bonus = State()  # –ù–æ–≤—ã–π state –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ–Ω—É—Å–æ–≤
    bonus_amount = State()


# --- FSM –¥–ª—è —Å–≤—è–∑–∏ —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º ---
class ManagerRequestState(StatesGroup):
    contact_and_question = State()


# --- FSM –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤) ---
class AdminState(StatesGroup):
    name = State()
    description = State()
    full_description = State()
    price = State()
    category = State()
    photo = State()
    budget = State()


class BudgetRequestState(StatesGroup):
    budget = State()
    phone = State()
    preferences = State()


class AdminEditPrice(StatesGroup):
    waiting_for_price = State()


try:
    from yookassa import Payment
except ImportError:
    Payment = None
    print("‚ö†Ô∏è YooKassa –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install yookassa")


# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    return user_id in ADMINS


async def notify_admins(message_text: str, parse_mode: str = "HTML"):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º"""
    for admin_id in ADMINS:
        try:
            await bot.send_message(admin_id, message_text, parse_mode=parse_mode)
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin_id}: {e}")


def get_payment_method_name(method_code):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã"""
    methods = {
        "online": "üí≥ –û–Ω–ª–∞–π–Ω –∫–∞—Ä—Ç–æ–π",
        "cash": "üíµ –ù–∞–ª–∏—á–Ω—ã–º–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏",
        "sbp": "üîÑ –°–ë–ü",
        "cert": "üéÅ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç",
        "manager": "üí¨ –ß–µ—Ä–µ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä–∞"
    }
    return methods.get(method_code, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")


async def debug_cart(user_id: int):
    """–û—Ç–ª–∞–¥–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã ‚Äî –≤—ã–≤–æ–¥–∏—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ –∫–æ–Ω—Å–æ–ª—å"""
    logger.debug(f"=== DEBUG CART FOR USER {user_id} ===")
    try:
        with sqlite3.connect(DB_PATH) as conn:
            cur = conn.cursor()
            cur.execute(
                "SELECT name, quantity, price FROM cart c JOIN products p ON c.product_id = p.id WHERE c.user_id=?",
                (user_id,))
            items = cur.fetchall()
            for item in items:
                logger.debug(f" - {item[0]} √ó{item[1]} = {item[2] * item[1]} ‚ÇΩ")
    except Exception as e:
        logger.error(f"Debug error: {e}")


def simplify_order_data(data: dict) -> dict:
    """–£–ø—Ä–æ—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ metadata YooKassa"""
    return {
        "user_id": data.get('user_id', ''),
        "user_name": data.get('name', '')[:50],
        "phone": data.get('phone', '')[:20],
        "address_short": data.get('address', '')[:100],
        "delivery_date": data.get('delivery_date', ''),
        "delivery_time": data.get('delivery_time', ''),
        "payment_method": data.get('payment_method', ''),
        "cart_items_count": len(data.get('cart_items', [])),
        "type": "order"
    }


async def calculate_order_total_with_bonuses(user_id: int, delivery_cost: int = 0, bonus_to_use: int = 0) -> dict:
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∏—Ç–æ–≥–æ–≤—É—é —Å—É–º–º—É –∑–∞–∫–∞–∑–∞ —Å —É—á–µ—Ç–æ–º –±–æ–Ω—É—Å–æ–≤ –∏ —Å–∫–∏–¥–æ–∫"""
    cart_items = get_cart(user_id)
    original_products_total = sum(item['price'] * item['quantity'] for item in cart_items)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–π –ª–∏ —ç—Ç–æ –∑–∞–∫–∞–∑
    is_first = is_first_order(user_id)
    discount = 0
    if is_first:
        discount = int(original_products_total * FIRST_ORDER_DISCOUNT)
        # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–∫–∏–¥–∫–∞ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç —Å—É–º–º—É —Ç–æ–≤–∞—Ä–æ–≤
        discount = min(discount, original_products_total)

    products_total_after_discount = max(0, original_products_total - discount)

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ–Ω—É—Å–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    bonus_info = get_bonus_info(user_id)
    available_bonus = bonus_info['current_bonus']

    # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–Ω—É—Å–æ–≤ - 30% –æ—Ç —Å—É–º–º—ã —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ—Å–ª–µ —Å–∫–∏–¥–∫–∏
    max_bonus_allowed = int(products_total_after_discount * MAX_BONUS_PERCENTAGE)

    # –ï—Å–ª–∏ bonus_to_use –Ω–µ —É–∫–∞–∑–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–π –º–∞–∫—Å–∏–º—É–º
    if bonus_to_use == 0:
        actual_bonus_used = min(available_bonus, max_bonus_allowed)
    else:
        actual_bonus_used = min(bonus_to_use, available_bonus, max_bonus_allowed)

    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞: —Ç–æ–≤–∞—Ä—ã(—Å–æ —Å–∫–∏–¥–∫–æ–π) - –±–æ–Ω—É—Å—ã + –¥–æ—Å—Ç–∞–≤–∫–∞
    final_total = max(0, products_total_after_discount - actual_bonus_used + delivery_cost)

    return {
        'original_products_total': original_products_total,  # –ò—Å—Ö–æ–¥–Ω–∞—è —Å—É–º–º–∞ —Ç–æ–≤–∞—Ä–æ–≤
        'products_total_after_discount': products_total_after_discount,  # –°—É–º–º–∞ –ø–æ—Å–ª–µ —Å–∫–∏–¥–∫–∏
        'delivery_cost': delivery_cost,
        'available_bonus': available_bonus,
        'max_bonus_allowed': max_bonus_allowed,
        'bonus_used': actual_bonus_used,
        'discount': discount,  # –°—É–º–º–∞ —Å–∫–∏–¥–∫–∏
        'is_first_order': is_first,  # –§–ª–∞–≥ –ø–µ—Ä–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞
        'final_total': final_total  # –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ
    }


async def apply_bonus_to_order(user_id: int, order_id: int, bonus_used: int, order_total: float):
    """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –±–æ–Ω—É—Å—ã –∫ –∑–∞–∫–∞–∑—É –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –±–∞–ª–∞–Ω—Å"""
    if bonus_used <= 0:
        return False

    # –°–ø–∏—Å—ã–≤–∞–µ–º –±–æ–Ω—É—Å—ã
    success = spend_bonus_points(user_id, order_id, bonus_used, order_total)

    if success:
        # –ù–∞—á–∏—Å–ª—è–µ–º –Ω–æ–≤—ã–µ –±–æ–Ω—É—Å—ã (10% –æ—Ç –∏—Ç–æ–≥–æ–≤–æ–π —Å—É–º–º—ã –ø–æ—Å–ª–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Å–∫–∏–¥–∫–∏)
        bonus_earned = int((order_total - bonus_used) * BONUS_EARN_PERCENTAGE)
        if bonus_earned > 0:
            add_bonus_points(user_id, order_id, bonus_earned)

        return True
    return False


async def send_bonus_notification(user_id: int, order_id: int, bonus_used: int, bonus_earned: int, discount: int = 0):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏ –±–æ–Ω—É—Å–æ–≤"""
    try:
        text = (
            f"üéâ <b>–ó–∞–∫–∞–∑ #{order_id} –æ—Ñ–æ—Ä–º–ª–µ–Ω!</b>\n\n"
        )

        if discount > 0:
            text += f"üéâ <b>–°–∫–∏–¥–∫–∞ –Ω–∞ –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑:</b> -{discount} ‚ÇΩ\n"

        if bonus_used > 0:
            text += f"üíé <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –±–æ–Ω—É—Å–æ–≤:</b> {bonus_used} ‚ÇΩ\n"

        if bonus_earned > 0:
            text += f"üíé <b>–ù–∞—á–∏—Å–ª–µ–Ω–æ –±–æ–Ω—É—Å–æ–≤:</b> {bonus_earned} ‚ÇΩ (5% –æ—Ç —Å—É–º–º—ã –∑–∞–∫–∞–∑–∞)\n"

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏—Ç–æ–≥–æ–≤–æ–π —Å—É–º–º—ã
        orders = get_user_orders(user_id)
        current_order = next((order for order in orders if order['id'] == order_id), None)

        if current_order:
            text += f"üí∞ <b>–ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ:</b> {current_order['total']} ‚ÇΩ\n\n"

        text += "üí° –ë–æ–Ω—É—Å–∞–º–∏ –º–æ–∂–Ω–æ –æ–ø–ª–∞—Ç–∏—Ç—å –¥–æ 30% —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–∫–∞–∑–∞!"

        await bot.send_message(user_id, text, parse_mode="HTML")
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –±–æ–Ω—É—Å–∞—Ö: {e}")


# --- START ---
@router.message(Command("start"))
async def start_cmd(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await message.answer(
        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>{SHOP_INFO['name']}</b>! üå∏\n"
        "–ö–∞–∂–¥—ã–π –¥–µ–Ω—å –Ω–æ–≤—ã–µ –±—É–∫–µ—Ç—ã –æ—Ç –Ω–∞—à–∏—Ö —Ñ–ª–æ—Ä–∏—Å—Ç–æ–≤!\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n\n"
        "–î–ª—è —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /help",
        reply_markup=main_menu,
        parse_mode="HTML"
    )


# --- –ö–ê–¢–ê–õ–û–ì ---
@router.message(F.text == "üå∏ –ö–∞—Ç–∞–ª–æ–≥")
async def show_catalog(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤"""
    await message.answer(
        "üå∏ <b>–ù–∞—à –∫–∞—Ç–∞–ª–æ–≥</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–æ–≤–∞—Ä–æ–≤:",
        reply_markup=catalog_menu,
        parse_mode="HTML"
    )


@router.message(F.text == "üíê –ë—É–∫–µ—Ç—ã")
async def show_bouquets(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –±—É–∫–µ—Ç—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"""
    try:
        cleanup_old_daily_products()
        with sqlite3.connect(DB_PATH) as conn:
            conn.row_factory = sqlite3.Row
            cur = conn.cursor()
            cur.execute("""
                SELECT id, name, description, full_description, price, photo, category, is_daily, on_request, in_stock 
                FROM products 
                WHERE category = 'bouquet' AND is_daily = TRUE 
                AND created_date = DATE('now') 
                ORDER BY id DESC
            """)
            bouquets = [dict(row) for row in cur.fetchall()]

        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üí¨ –°–ø—Ä–æ—Å–∏—Ç—å —É –º–µ–Ω–µ–¥–∂–µ—Ä–∞", url="https://t.me/Therry_Voyager")],
            [InlineKeyboardButton(text="üí∞ –ü–æ–¥–±–æ—Ä –ø–æ–¥ –±—é–¥–∂–µ—Ç", callback_data="budget_selection")]
        ])

        if not bouquets:
            await message.answer(
                "üå∫ <b>–ù–∞ —Å–µ–≥–æ–¥–Ω—è –±—É–∫–µ—Ç—ã –µ—â–µ –≥–æ—Ç–æ–≤—è—Ç—Å—è!</b>\n\n"
                "–ù–∞—à–∏ —Ñ–ª–æ—Ä–∏—Å—Ç—ã —Å–æ–∑–¥–∞—é—Ç –Ω–æ–≤—ã–µ –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏. "
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–π–¥–∏—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –¥–ª—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞.\n\n"
                "üí° <i>–ù–µ –Ω–∞—à–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –±—É–∫–µ—Ç? –°–≤—è–∂–∏—Ç–µ—Å—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º, "
                "–∏ –º—ã –ø–æ–¥–±–µ—Ä–µ–º –±—É–∫–µ—Ç –ø–æ–¥ –≤–∞—à –∑–∞–ø—Ä–æ—Å –∏ –±—é–¥–∂–µ—Ç!</i>",  # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
                reply_markup=kb,
                parse_mode="HTML"
            )
            return

        today = datetime.now().strftime("%d.%m.%Y")
        await message.answer(
            f"üå∏ <b>–ë—É–∫–µ—Ç—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è</b>\nüìÖ <i>{today}</i>",
            parse_mode="HTML"
        )

        for bouquet in bouquets:
            text = f"<b>{bouquet['name']}</b>\n{bouquet['description']}\n"
            if bouquet['on_request'] or bouquet['price'] == 0:
                text += "üí∞ <b>–¶–µ–Ω–∞: –ø–æ –∑–∞–ø—Ä–æ—Å—É</b>"
            else:
                text += f"üí∞ <b>–¶–µ–Ω–∞: {bouquet['price']} ‚ÇΩ</b>"
            kb = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìñ –ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data=f"details_{bouquet['id']}")],
                [InlineKeyboardButton(text="üõí –í –∫–æ—Ä–∑–∏–Ω—É", callback_data=f"add_{bouquet['id']}")]
            ])

            if bouquet.get('photo') and os.path.exists(bouquet['photo']):
                photo = FSInputFile(bouquet['photo'])
                await message.answer_photo(photo=photo, caption=text, reply_markup=kb, parse_mode="HTML")
            else:
                await message.answer(text, reply_markup=kb, parse_mode="HTML")

    except Exception as e:
        logger.error(f"Error showing bouquets: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–∞–ª–æ–≥–∞ —Ä–∞—Å—Ç–µ–Ω–∏–π. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º."
        )


@router.message(F.text == "üå± –ì–æ—Ä—à–µ—á–Ω—ã–µ —Ä–∞—Å—Ç–µ–Ω–∏—è")
async def show_plants(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–æ—Ä—à–µ—á–Ω—ã–µ —Ä–∞—Å—Ç–µ–Ω–∏—è"""
    try:
        cleanup_old_daily_products()
        with sqlite3.connect(DB_PATH) as conn:
            conn.row_factory = sqlite3.Row
            cur = conn.cursor()
            cur.execute("""
                SELECT id, name, description, full_description, price, photo, category, is_daily, on_request, in_stock 
                FROM products 
                WHERE category = 'plant' AND is_daily = TRUE 
                AND created_date = DATE('now') 
                ORDER BY id DESC
            """)
            plants = [dict(row) for row in cur.fetchall()]

        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üí¨ –°–ø—Ä–æ—Å–∏—Ç—å —É –º–µ–Ω–µ–¥–∂–µ—Ä–∞", url="https://t.me/Therry_Voyager")],
        ])
        if not plants:
            await message.answer(
                "üåø <b>–ì–æ—Ä—à–µ—á–Ω—ã–µ —Ä–∞—Å—Ç–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç!</b>\n\n"
                "–°–≤—è–∂–∏—Ç–µ—Å—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –Ω–∞–ª–∏—á–∏—è.", reply_markup=kb,
                parse_mode="HTML"
            )
            return

        await message.answer(
            "üå± <b>–ù–∞—à–∏ –≥–æ—Ä—à–µ—á–Ω—ã–µ —Ä–∞—Å—Ç–µ–Ω–∏—è</b>\n\n"
            "–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –∂–∏—Ç–µ–ª–∏ –Ω–∞—à–µ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞:",
            parse_mode="HTML"
        )

        for plant in plants:
            text = f"<b>{plant['name']}</b>\n{plant['description']}\n"
            if plant['on_request'] or plant['price'] == 0:
                text += "üí∞ <b>–¶–µ–Ω–∞: –ø–æ –∑–∞–ø—Ä–æ—Å—É</b>"
            else:
                text += f"üí∞ <b>–¶–µ–Ω–∞: {plant['price']} ‚ÇΩ</b>"
            kb = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìñ –ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data=f"details_{plant['id']}")],
                [InlineKeyboardButton(text="üí¨ –£—Ç–æ—á–Ω–∏—Ç—å —Ü–µ–Ω—É", url="https://t.me/Therry_Voyager")],
                [InlineKeyboardButton(text="üõí –í –∫–æ—Ä–∑–∏–Ω—É", callback_data=f"add_{plant['id']}")]
            ])

            if plant.get('photo') and os.path.exists(plant['photo']):
                photo = FSInputFile(plant['photo'])
                await message.answer_photo(photo=photo, caption=text, reply_markup=kb, parse_mode="HTML")
            else:
                await message.answer(text, reply_markup=kb, parse_mode="HTML")

    except Exception as e:
        logger.error(f"Error showing plants: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–∞–ª–æ–≥–∞ —Ä–∞—Å—Ç–µ–Ω–∏–π. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º."
        )


# --- –ü–û–î–†–û–ë–ù–û–ï –û–ü–ò–°–ê–ù–ò–ï ---
@router.callback_query(F.data.startswith("details_"))
async def show_details(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ"""
    product_id = int(callback.data.split("_")[1])
    with sqlite3.connect(DB_PATH) as conn:
        conn.row_factory = sqlite3.Row
        cur = conn.cursor()
        cur.execute("SELECT * FROM products WHERE id=?", (product_id,))
        product = cur.fetchone()

    if product:
        text = (
            f"<b>{product['name']}</b>\n\n"
            f"üìÑ <i>{product['full_description']}</i>\n\n"
            f"üí∞ <b>–¶–µ–Ω–∞: {product['price']} ‚ÇΩ</b>"
        )

        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üõí –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É", callback_data=f"add_{product['id']}")],
            [InlineKeyboardButton(text="üí¨ –°–ø—Ä–æ—Å–∏—Ç—å —É –º–µ–Ω–µ–¥–∂–µ—Ä–∞", url="https://t.me/Therry_Voyager")]
        ])

        if product['photo'] and os.path.exists(product['photo']):
            photo = FSInputFile(product['photo'])
            await callback.message.answer_photo(photo=photo, caption=text, reply_markup=kb, parse_mode="HTML")
        else:
            await callback.message.answer(text, reply_markup=kb, parse_mode="HTML")

    await callback.answer()


# --- –ù–ê–ó–ê–î ---
@router.message(F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")
async def back_to_main_menu(message: Message):
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu)


@router.callback_query(F.data == "main_menu")
async def back_to_main(callback: CallbackQuery):
    await callback.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu)
    await callback.answer()


# --- –î–û–°–¢–ê–í–ö–ê –ò –û–ü–õ–ê–¢–ê ---
@router.message(F.text == "üöö –î–æ—Å—Ç–∞–≤–∫–∞")
async def delivery_info(message: Message):
    # –ú–µ–Ω—é —Ä–∞–∑–¥–µ–ª–∞ "–î–æ—Å—Ç–∞–≤–∫–∞ –∏ –æ–ø–ª–∞—Ç–∞"
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üöó –£—Å–ª–æ–≤–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏", callback_data="delivery_conditions")],
        [InlineKeyboardButton(text="üí≥ –°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã", callback_data="payment_methods")],
        [InlineKeyboardButton(text="üì¶ –°–∞–º–æ–≤—ã–≤–æ–∑", callback_data="pickup_info")],
        [InlineKeyboardButton(text="üí¨ –°–ø—Ä–æ—Å–∏—Ç—å —É –º–µ–Ω–µ–¥–∂–µ—Ä–∞", url="https://t.me/Therry_Voyager")]
    ])
    # –°–æ–æ–±—â–µ–Ω–∏–µ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –±–æ–ª–µ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –¢–ó
    await message.answer(
        "<b>üöö –î–û–°–¢–ê–í–ö–ê –ò –û–ü–õ–ê–¢–ê</b>\n\n"
        "–ó–¥–µ—Å—å –≤—ã –Ω–∞–π–¥—ë—Ç–µ –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ø–æ—Å–æ–±–∞—Ö –æ–ø–ª–∞—Ç—ã.\n"
        "–£—Å–ª–æ–≤–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏ –∏ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–æ–¥–±–æ—Ä –±—É–∫–µ—Ç–∞ ‚Äî —É—Ç–æ—á–Ω—è–π—Ç–µ —É –º–µ–Ω–µ–¥–∂–µ—Ä–∞ üëá",
        reply_markup=kb,
        parse_mode="HTML"
    )


@router.callback_query(F.data == "delivery_conditions")
async def show_delivery_info(callback: CallbackQuery):
    # –¢–µ–∫—Å—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –¢–ó –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç —è—Å–Ω–æ—Å—Ç–∏
    text = (
        "<b>–£—Å–ª–æ–≤–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏</b>\n\n"
        "<b>‚Äì –ü–æ –≥–æ—Ä–æ–¥—É:</b> 300 ‚ÇΩ\n"
        "<b>‚Äì –ó–∞ –ú–ö–ê–î: –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç</b>\n\n"
        "<b>–°—Ä–æ–∫–∏:</b>\n"
        "‚Äì –í –¥–µ–Ω—å –∑–∞–∫–∞–∑–∞ (–ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –¥–æ 15:00)\n"
        "‚Äì –ù–∞ —Å–ª–µ–¥—É—é—â—É—é –¥–∞—Ç—É (–ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –ø–æ—Å–ª–µ 15:00)\n"
        "‚Äì –ù–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É –ø–æ –ø—Ä–µ–¥–∑–∞–∫–∞–∑—É\n\n"
        "üí¨ <b>–î–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏:</b>\n"
        "–°–≤—è–∂–∏—Ç–µ—Å—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º üëá"
    )

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí¨ –°–ø—Ä–æ—Å–∏—Ç—å —É –º–µ–Ω–µ–¥–∂–µ—Ä–∞", url="https://t.me/Therry_Voyager")]
    ])

    await callback.message.answer(text, reply_markup=kb, parse_mode="HTML")
    await callback.answer()


@router.callback_query(F.data == "payment_methods")
async def show_payment_info(callback: CallbackQuery):
    text = (
        "<b>–°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã</b>\n\n"
        "üí≥ <b>–û–Ω–ª–∞–π–Ω –æ–ø–ª–∞—Ç–∞:</b>\n"
        "‚Ä¢ –ë–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç–æ–π\n"
        "‚Ä¢ –ÆMoney\n"
        "‚Ä¢ –°–ë–ü\n\n"
        "üíµ <b>–ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏:</b>\n"
        "‚Ä¢ –ù–∞–ª–∏—á–Ω—ã–º–∏\n"
        "‚Ä¢ –ö–∞—Ä—Ç–æ–π –∫—É—Ä—å–µ—Ä—É\n\n"
        "üéÅ <b>–ü–æ–¥–∞—Ä–æ—á–Ω—ã–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã</b>\n\n"
        "üí¨ <b>–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏:</b>\n"
        "–°–ø—Ä–æ—Å–∏—Ç—å —É –º–µ–Ω–µ–¥–∂–µ—Ä–∞ üëá"
    )

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí¨ –°–ø—Ä–æ—Å–∏—Ç—å —É –º–µ–Ω–µ–¥–∂–µ—Ä–∞", url="https://t.me/Therry_Voyager")]
    ])

    await callback.message.answer(text, reply_markup=kb, parse_mode="HTML")
    await callback.answer()


@router.callback_query(F.data == "pickup_info")
async def show_pickup_info(callback: CallbackQuery):
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∞–º–æ–≤—ã–≤–æ–∑–µ
    text = (
        "<b>–°–∞–º–æ–≤—ã–≤–æ–∑</b>\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–±—Ä–∞—Ç—å –∑–∞–∫–∞–∑ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –ø–æ –∞–¥—Ä–µ—Å—É:\n"
        f"üìç <b>{SHOP_INFO['address']}</b>\n\n"
        f"üïí <b>–ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã:</b> {SHOP_INFO['work_hours']}\n"
        f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω –¥–ª—è —Å–≤—è–∑–∏:</b> {SHOP_INFO['phone']}"
    )
    await callback.message.answer(text, parse_mode="HTML")
    await callback.answer()


# --- –°–í–Ø–ó–¨ –° –ú–ï–ù–ï–î–ñ–ï–†–û–ú ---
@router.message(F.text == "üìû –ú–µ–Ω–µ–¥–∂–µ—Ä")
async def manager(message: Message, state: FSMContext):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="contact_and_question")],
        [InlineKeyboardButton(text="‚ö° –°—Ä–æ—á–Ω—ã–π –∑–∞–∫–∞–∑", callback_data="urgent_order")]
    ])

    await message.answer(
        "üëã <b>–°–≤—è–∂–∏—Ç–µ—Å—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º</b>\n\n"
        "‚Ä¢ –û—Ç–≤–µ—Ç–∏–º –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã\n"
        "‚Ä¢ –ü–æ–º–æ–∂–µ–º —Å –≤—ã–±–æ—Ä–æ–º –±—É–∫–µ—Ç–∞\n"
        "‚Ä¢ –£—Ç–æ—á–Ω–∏–º –Ω–∞–ª–∏—á–∏–µ –∏ —Å—Ä–æ–∫–∏\n"
        "‚Ä¢ –ü—Ä–∏–º–µ–º —Å—Ä–æ—á–Ω—ã–π –∑–∞–∫–∞–∑\n\n"
        "<i>–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —Å–≤—è–∑–∏:</i>",
        reply_markup=kb,
        parse_mode="HTML"
    )


# –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö (–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –≤–æ–ø—Ä–æ—Å)
@router.callback_query(F.data == "contact_and_question")
async def collect_contact_and_question(callback: CallbackQuery, state: FSMContext):
    await state.update_data(request_type="question")
    await callback.message.answer(
        "üìû <b>–û—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –≤–æ–ø—Ä–æ—Å</b>\n\n"
        "<b>–í–∞–∂–Ω–æ:</b>\n"
        "–ù–µ –ø–∏—à–∏—Ç–µ –≤—Å—ë –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ—á–∫—É\n"
        "–ü–∏—à–∏—Ç–µ –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ ‚Äî —Ç–∞–∫ –Ω–∞–º –±—É–¥–µ—Ç –ø—Ä–æ—â–µ –≤—Å—ë –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å.\n"
        "–û—Ç–≤–µ—á–∞–π—Ç–µ —á–µ—Ç–∫–æ –Ω–∞ –∫–∞–∂–¥—ã–π –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å –∏ –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ‚Äî –∏–Ω–∞—á–µ –Ω–µ —Å–º–æ–∂–µ–º —Å –≤–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è.\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ <code>+7 XXX XXX XX XX</code> –∏ –¥–∞–ª–µ–µ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å.\n"
        "–ü—Ä–∏–º–µ—Ä:\n"
        "<code>+7 900 123 45 67</code>\n"
        "–ü–æ—á–µ–º—É –∑–∞–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –¥–æ—Å—Ç–∞–≤–∫–∞ –º–æ–µ–≥–æ –∑–∞–∫–∞–∑–∞?",
        parse_mode="HTML"
    )
    await state.set_state(ManagerRequestState.contact_and_question)
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–∫–æ–Ω—Ç–∞–∫—Ç—ã –∏ –≤–æ–ø—Ä–æ—Å)
@router.message(ManagerRequestState.contact_and_question)
async def process_contact_and_question(message: Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç —Å–∏—Å—Ç–µ–º–Ω–æ–π –∫–æ–º–∞–Ω–¥–æ–π
    if message.text in MENU_COMMANDS:
        await state.clear()  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤–≤–æ–¥

        # –í—ã–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–º–∞–Ω–¥—ã
        if message.text == "üå∏ –ö–∞—Ç–∞–ª–æ–≥":
            await show_catalog(message)
        elif message.text == "üöö –î–æ—Å—Ç–∞–≤–∫–∞":
            await delivery_info(message)
        elif message.text == "üìû –ú–µ–Ω–µ–¥–∂–µ—Ä":
            await manager(message, state)
        elif message.text == "üìç –ù–∞ –∫–∞—Ä—Ç–µ":
            await map_handler(message)
        elif message.text == "üéÅ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç":
            await cert_menu(message)
        elif message.text == "‚≠ê –û—Ç–∑—ã–≤—ã":
            await reviews_menu(message)
        elif message.text == "üõí –ö–æ—Ä–∑–∏–Ω–∞":
            await show_cart(message)
        elif message.text == "üßæ –ú–æ–∏ –∑–∞–∫–∞–∑—ã":
            await my_orders(message)
        elif message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é":
            await back_to_main_menu(message)
        elif message.text == "üè† –í –º–µ–Ω—é":
            await back_to_main(message)
        return  # –í–∞–∂–Ω–æ: –≤—ã—Ö–æ–¥–∏–º, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–æ–ø—Ä–æ—Å–∞

    # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –∫–æ–º–∞–Ω–¥–∞ ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –Ω–æ–º–µ—Ä–∞ –∏ –≤–æ–ø—Ä–æ—Å–∞
    data = await state.get_data()
    request_type = data.get("request_type", "question")

    parts = message.text.strip().split("\n", 1)
    if len(parts) < 2:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∏ –≤–æ–ø—Ä–æ—Å –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —Å—Ç—Ä–æ–∫–∞—Ö.")
        return

    phone = parts[0].strip()
    question = parts[1].strip()

    if not phone.replace('+', '').replace(' ', '').replace('-', '').replace('(', '').replace(')', '').isdigit():
        await message.answer("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥.")
        return

    if request_type == "urgent":
        admin_msg = (
            "üö®üö®üö® <b>–°–†–û–ß–ù–´–ô –ó–ê–ö–ê–ó! –í–´–°–û–ö–ò–ô –ü–†–ò–û–†–ò–¢–ï–¢!</b> üö®üö®üö®\n\n"
            f"üë§ <b>–ò–º—è:</b> {message.from_user.full_name}\n"
            f"üÜî <b>ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> {message.from_user.id}\n"
            f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {phone}\n"
            f"üí¨ <b>–ó–∞–ø—Ä–æ—Å:</b> {question}\n\n"
            "‚ö†Ô∏è <b>–¢–†–ï–ë–£–ï–¢–°–Ø –ù–ï–ú–ï–î–õ–ï–ù–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê!</b>"
        )
    else:
        admin_msg = (
            "üìû <b>–ó–∞–ø—Ä–æ—Å –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞</b>\n\n"
            f"üë§ <b>–ò–º—è:</b> {message.from_user.full_name}\n"
            f"üÜî <b>ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> {message.from_user.id}\n"
            f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {phone}\n"
            f"üí¨ <b>–í–æ–ø—Ä–æ—Å:</b> {question}"
        )

    try:
        await notify_admins(admin_msg)
        await message.answer(
            "‚úÖ –í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ –∏ –ø–µ—Ä–µ–¥–∞–Ω–æ –º–µ–Ω–µ–¥–∂–µ—Ä—É.\n"
            "–°–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞.",
            parse_mode="HTML"
        )
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –Ω–∞–ø—Ä—è–º—É—é: @mgk71"
        )

    await state.clear()


# –ë—ã—Å—Ç—Ä–∞—è –ø–æ–¥–∞—á–∞ —Å—Ä–æ—á–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
@router.callback_query(F.data == "urgent_order")
async def urgent_order_handler(callback: CallbackQuery, state: FSMContext):
    await state.update_data(request_type="urgent")
    await callback.message.answer(
        "‚ö° <b>–°—Ä–æ—á–Ω—ã–π –∑–∞–∫–∞–∑</b>\n\n"
        "–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É —Å–∏—Ç—É–∞—Ü–∏—é –∏ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏, –∏ –º—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å.\n\n"
        "<b>–í–∞–∂–Ω–æ:</b>\n"
        "–ù–µ –ø–∏—à–∏—Ç–µ –≤—Å—ë –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ—á–∫—É\n"
        "–ü–∏—à–∏—Ç–µ –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ ‚Äî —Ç–∞–∫ –Ω–∞–º –±—É–¥–µ—Ç –ø—Ä–æ—â–µ –≤—Å—ë –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å.\n"
        "–û—Ç–≤–µ—á–∞–π—Ç–µ —á–µ—Ç–∫–æ –Ω–∞ –∫–∞–∂–¥—ã–π –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å –∏ –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ‚Äî –∏–Ω–∞—á–µ –Ω–µ —Å–º–æ–∂–µ–º —Å –≤–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è.\n\n"
        "<b>–í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:</b>\n"
        "<code>+7 XXX XXX XX XX</code>\n"
        "–ù—É–∂–µ–Ω –±—É–∫–µ—Ç –Ω–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –≤–µ—á–µ—Ä\n"
        "–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: —É–ª. –¶–≤–µ—Ç–æ—á–Ω–∞—è, –¥. 1\n"
        "–ñ–µ–ª–∞—Ç–µ–ª—å–Ω–æ –∫ 18:00",
        parse_mode="HTML"
    )
    await state.set_state(ManagerRequestState.contact_and_question)
    await callback.answer()


# --- –ù–ê –ö–ê–†–¢–ï ---
@router.message(F.text == "üìç –ù–∞ –∫–∞—Ä—Ç–µ")
async def map_handler(message: Message):
    await message.answer(
        f"üìç <b>–ê–¥—Ä–µ—Å:</b> {SHOP_INFO['address']}\n"
        f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {SHOP_INFO['phone']}\n"
        f"üïí <b>–ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã:</b> {SHOP_INFO['work_hours']}\n\n"
        "üîó [–û—Ç–∫—Ä—ã—Ç—å –≤ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç–∞—Ö](https://yandex.ru/maps/-/CHtdIO3I)",
        parse_mode="HTML"
    )


@router.message(F.text == "üéÅ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç")
async def cert_menu(message: Message):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="1000 ‚ÇΩ", callback_data="cert_1000"),
         InlineKeyboardButton(text="3000 ‚ÇΩ", callback_data="cert_3000"),
         InlineKeyboardButton(text="5000 ‚ÇΩ", callback_data="cert_5000")],
        [InlineKeyboardButton(text="üè† –í –º–µ–Ω—é", callback_data="main_menu")]
    ])
    await message.answer(
        "üéÅ <b>–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–∏–Ω–∞–ª –ø–æ–¥–∞—Ä–æ—á–Ω–æ–≥–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞:</b>\n\n"
        "‚Ä¢ üí≥ –û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π –∏–ª–∏ –°–ë–ü\n"
        "‚Ä¢ üìÑ –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –≤—ã–¥–∞—á–∞ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã\n"
        "‚Ä¢ üéØ –î–µ–π—Å—Ç–≤—É–µ—Ç 1 –≥–æ–¥\n"
        "‚Ä¢ üå∏ –ù–∞ –ª—é–±–æ–π —Ç–æ–≤–∞—Ä –≤ –º–∞–≥–∞–∑–∏–Ω–µ",
        reply_markup=kb,
        parse_mode="HTML"
    )


@router.callback_query(F.data.startswith("cert_"))
async def handle_certificate_purchase(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞"""
    amount_str = callback.data.split("_")[1]
    try:
        amount = int(amount_str)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º—ã –¥–ª—è –ÆKassa (–º–∏–Ω–∏–º—É–º 1 —Ä—É–±–ª—å)
        if amount < 1:
            await callback.answer("‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ - 1 —Ä—É–±–ª—å")
            return

        # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –¥–ª—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
        cert_code = f"CERT-{uuid.uuid4().hex[:8].upper()}"

        # –£–ø—Ä–æ—â–∞–µ–º metadata –¥–ª—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
        simplified_metadata = {
            "user_id": callback.from_user.id,
            "cert_code": cert_code,
            "phone": "9999999999",
            "type": "certificate"
        }

        payment = await payment_manager.create_payment(
            amount=amount,
            description=f"–ü–æ–¥–∞—Ä–æ—á–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–∞ {amount}‚ÇΩ",
            metadata=simplified_metadata
        )

        if payment and payment.get("confirmation_url"):
            await state.update_data(
                payment_id=payment["id"],
                cert_amount=amount,
                cert_code=cert_code,
                payment_url=payment["confirmation_url"]
            )
            await state.set_state(CertificateState.waiting_payment)

            kb = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç", url=payment["confirmation_url"])],
                [InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"check_cert_payment_{payment['id']}")]
            ])

            await callback.message.answer(
                f"üéÅ <b>–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–∞ {amount} ‚ÇΩ</b>\n\n"
                f"üí≥ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {amount} ‚ÇΩ\n"
                f"üîó –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã\n\n"
                f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ ¬´‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É¬ª",
                reply_markup=kb,
                parse_mode="HTML"
            )
        else:
            await callback.message.answer(
                f"üéÅ <b>–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–∞ {amount} ‚ÇΩ</b>\n\n"
                "‚ö†Ô∏è –ü–ª–∞—Ç–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.\n"
                "üìû –î–ª—è –ø–æ–∫—É–ø–∫–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º.",
                parse_mode="HTML"
            )

    except ValueError:
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–∏–Ω–∞–ª —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞")

    await callback.answer()


async def create_certificate_payment(user_id: int, amount: int, callback: CallbackQuery, state: FSMContext):
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞"""
    cert_code = f"CERT-{uuid.uuid4().hex[:8].upper()}"

    try:
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ÆKassa
        Configuration.account_id = YOOKASSA_SHOP_ID
        Configuration.secret_key = YOOKASSA_SECRET_KEY

        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –ø–ª–∞—Ç–µ–∂
        payment_id = str(uuid.uuid4())
        payment = Payment.create({
            "amount": {"value": str(amount), "currency": "RUB"},
            "confirmation": {
                "type": "redirect",
                "return_url": "https://t.me/flowersstories_bot"  # URL –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
            },
            "capture": True,
            "description": f"–ü–æ–¥–∞—Ä–æ—á–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–∞ {amount}‚ÇΩ",
            "metadata": {
                "user_id": user_id,
                "cert_code": cert_code,
                "type": "certificate"
            }
        }, idempotency_key=payment_id)

        await state.update_data(
            payment_id=payment.id,
            cert_amount=amount,
            cert_code=cert_code,
            payment_url=payment.confirmation.confirmation_url
        )
        await state.set_state(CertificateState.waiting_payment)

        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç", url=payment.confirmation.confirmation_url)],
            [InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"check_cert_payment_{payment.id}")]
        ])

        await callback.message.answer(
            f"üéÅ <b>–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–∞ {amount} ‚ÇΩ</b>\n\n"
            f"üí≥ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {amount} ‚ÇΩ\n"
            f"üîó –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã\n\n"
            f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ ¬´‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É¬ª",
            reply_markup=kb,
            parse_mode="HTML"
        )

    except Exception as e:
        print(f"Payment creation error: {e}")
        await callback.message.answer(
            f"üéÅ <b>–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–∞ {amount} ‚ÇΩ</b>\n\n"
            "‚ö†Ô∏è –ü–ª–∞—Ç–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.\n"
            "üìû –î–ª—è –ø–æ–∫—É–ø–∫–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º: @Therry_Voyager\n\n"
            f"–ö–æ–¥ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞: <code>{cert_code}</code>\n"
            "–°–æ–æ–±—â–∏—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –º–µ–Ω–µ–¥–∂–µ—Ä—É –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏.",
            parse_mode="HTML"
        )


@router.callback_query(F.data.startswith("cert_"))
async def handle_certificate_purchase(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ (–µ–¥–∏–Ω—ã–π –ø–æ—Ç–æ–∫ —á–µ—Ä–µ–∑ payment_manager)"""
    amount_str = callback.data.split("_")[1]
    try:
        amount = int(amount_str)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º—ã –¥–ª—è –ÆKassa (–º–∏–Ω–∏–º—É–º 1 —Ä—É–±–ª—å)
        if amount < 1:
            await callback.answer("‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ - 1 —Ä—É–±–ª—å")
            return

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
        cert_code = f"CERT-{uuid.uuid4().hex[:8].upper()}"

        # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        metadata = {
            "user_id": callback.from_user.id,
            "cert_code": cert_code,
            "phone": "9999999999",  # –ú–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω –ø–æ–∑–∂–µ
            "type": "certificate"
        }

        # –°–æ–∑–¥–∞—ë–º –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ –µ–¥–∏–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä
        payment = await payment_manager.create_payment(
            amount=amount,
            description=f"–ü–æ–¥–∞—Ä–æ—á–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–∞ {amount}‚ÇΩ",
            metadata=metadata
        )

        if payment and payment.get("confirmation_url"):
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ FSM
            await state.update_data(
                payment_id=payment["id"],
                cert_amount=amount,
                cert_code=cert_code,
                payment_url=payment["confirmation_url"]
            )
            await state.set_state(CertificateState.waiting_payment)

            kb = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç", url=payment["confirmation_url"])],
                [InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"check_cert_payment_{payment['id']}")]
            ])

            await callback.message.answer(
                f"üéÅ <b>–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–∞ {amount} ‚ÇΩ</b>\n\n"
                f"üí≥ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {amount} ‚ÇΩ\n"
                f"üîó –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã\n\n"
                f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ ¬´‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É¬ª",
                reply_markup=kb,
                parse_mode="HTML"
            )
        else:
            # –û—à–∏–±–∫–∞ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º fallback
            await callback.message.answer(
                f"üéÅ <b>–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–∞ {amount} ‚ÇΩ</b>\n\n"
                "‚ö†Ô∏è –ü–ª–∞—Ç—ë–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.\n"
                "üìû –î–ª—è –ø–æ–∫—É–ø–∫–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º: @Therry_Voyager\n\n"
                f"–ö–æ–¥ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞: <code>{cert_code}</code>",
                parse_mode="HTML"
            )

    except ValueError:
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–∏–Ω–∞–ª —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞")

    await callback.answer()


@router.callback_query(F.data.startswith("check_cert_payment_"))
async def check_cert_payment(callback: CallbackQuery, state: FSMContext):
    payment_id = callback.data.split("_")[-1]

    try:
        payment = Payment.find_one(payment_id)
        if payment.status == "succeeded":
            data = await state.get_data()
            amount = data.get("cert_amount")
            cert_code = data.get("cert_code")

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF
            pdf_path = f"certificates/cert_{callback.from_user.id}_{amount}.pdf"  # –ò–∑–º–µ–Ω–µ–Ω–Ω—ã–π –ø—É—Ç—å
            generate_certificate(str(amount), cert_code, pdf_path)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º PDF
            if os.path.exists(pdf_path):
                pdf = FSInputFile(pdf_path)
                await callback.message.answer_document(
                    document=pdf,
                    caption=f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –∫—É–ø–∏–ª–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–∞ {amount} ‚ÇΩ\n–ö–æ–¥: `{cert_code}`",
                    parse_mode="HTML"
                )
            else:
                await callback.message.answer(
                    f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –∫—É–ø–∏–ª–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–∞ {amount} ‚ÇΩ\n–ö–æ–¥: `{cert_code}`\n\n"
                    "‚ö†Ô∏è PDF —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ –∫–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω.",
                    parse_mode="HTML"
                )

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            add_certificate_purchase(
                user_id=callback.from_user.id,
                amount=amount,
                cert_code=cert_code,
                payment_id=payment_id
            )

            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            if os.path.exists(pdf_path):
                os.remove(pdf_path)

            await state.clear()
        else:
            await callback.message.answer("‚ùå –ü–ª–∞—Ç—ë–∂ –Ω–µ –ø—Ä–æ—à—ë–ª")
    except Exception as e:
        logger.error(f"Error processing certificate payment: {e}")
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    await callback.answer()


# --- –û–¢–ó–´–í–´ ---
class ReviewState(StatesGroup):
    order_id = State()
    text = State()
    rating = State()


@router.message(F.text == "‚≠ê –û—Ç–∑—ã–≤—ã")
async def reviews_menu(message: Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã
    delivered_orders = get_delivered_orders(message.from_user.id)
    has_delivered_orders = len(delivered_orders) > 0

    kb = InlineKeyboardMarkup(inline_keyboard=[])

    if has_delivered_orders:
        kb.inline_keyboard.append([InlineKeyboardButton(text="üåü –û—Ü–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="rate_order")])

    kb.inline_keyboard.extend([
        [InlineKeyboardButton(text="‚úç –û–±—â–∏–π –æ—Ç–∑—ã–≤", callback_data="leave_general_review")],
        [InlineKeyboardButton(text="üìñ –ü—Ä–æ—á–∏—Ç–∞—Ç—å –æ—Ç–∑—ã–≤—ã", callback_data="read_reviews")]
    ])

    if has_delivered_orders:
        await message.answer(
            "‚úÖ –£ –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã! –í—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –∑–∞–∫–∞–∑–µ.",
            reply_markup=kb
        )
    else:
        await message.answer(
            "üìù –í—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –æ–±—â–∏–π –æ—Ç–∑—ã–≤ –æ –Ω–∞—à–µ–º –º–∞–≥–∞–∑–∏–Ω–µ –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∑—ã–≤—ã –¥—Ä—É–≥–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤.",
            reply_markup=kb
        )


@router.callback_query(F.data == "read_reviews")
async def read_reviews(callback: CallbackQuery):
    reviews = get_reviews()
    if not reviews:
        await callback.message.answer("üìù –ü–æ–∫–∞ –Ω–µ—Ç –æ—Ç–∑—ã–≤–æ–≤. –ë—É–¥—å—Ç–µ –ø–µ—Ä–≤—ã–º!")
        await callback.answer()
        return

    text = "‚≠ê <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–∑—ã–≤—ã:</b>\n\n"
    for i, review in enumerate(reviews, 1):
        stars = "‚≠ê" * min(5, max(1, review.get('rating', 5)))
        created_at = review['created_at'].split(".")[0] if isinstance(review['created_at'], str) else \
            str(review['created_at']).split(".")[0]
        created_at = created_at.replace("T", " ")

        username = review.get('user_name', '–ê–Ω–æ–Ω–∏–º')
        order_info = f" (–ó–∞–∫–∞–∑ #{review.get('order_id', '')})" if review.get('order_id') else ""

        text += f"{stars}\n"
        text += f"<i>\"{review['text']}\"</i>\n"
        text += f"<b>‚Äî {username}{order_info}</b>\n"
        text += f"<code>üìÖ {created_at}</code>\n\n"

    await callback.message.answer(text, parse_mode="HTML")
    await callback.answer()


@router.callback_query(F.data == "leave_general_review")
async def start_general_review(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer(
        "üìù <b>–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ–±—â–∏–π –æ—Ç–∑—ã–≤ –æ –Ω–∞—à–µ–º –º–∞–≥–∞–∑–∏–Ω–µ</b>\n\n"
        "–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –≤–∞—à–∏–º–∏ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è–º–∏ –æ –∫–∞—á–µ—Å—Ç–≤–µ —Ü–≤–µ—Ç–æ–≤, –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏ –∏–ª–∏ —Ä–∞–±–æ—Ç–µ —Å–∞–π—Ç–∞:",
        parse_mode="HTML"
    )
    await state.set_state(ReviewState.text)
    await state.update_data(order_id=None)  # –û–±—â–∏–π –æ—Ç–∑—ã–≤ –±–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ –∑–∞–∫–∞–∑—É
    await callback.answer()


@router.callback_query(F.data == "rate_order")
async def select_order_for_review(callback: CallbackQuery, state: FSMContext):
    delivered_orders = get_delivered_orders(callback.from_user.id)

    if not delivered_orders:
        await callback.message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –æ—Ü–µ–Ω–∫–∏.")
        await callback.answer()
        return

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∑–∞–∫–∞–∑–∞–º–∏
    kb = InlineKeyboardMarkup(inline_keyboard=[])

    for order in delivered_orders[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–∫–∞–∑–æ–≤
        order_date = order['delivery_date'] or order['created_at'].split(' ')[0]
        kb.inline_keyboard.append([
            InlineKeyboardButton(
                text=f"–ó–∞–∫–∞–∑ #{order['id']} –æ—Ç {order_date} - {order['total']}‚ÇΩ",
                callback_data=f"review_order_{order['id']}"
            )
        ])

    kb.inline_keyboard.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_review")])

    await callback.message.answer(
        "üì¶ <b>–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑ –¥–ª—è –æ—Ü–µ–Ω–∫–∏:</b>",
        reply_markup=kb,
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data.startswith("review_order_"))
async def start_order_review(callback: CallbackQuery, state: FSMContext):
    order_id = int(callback.data.split("_")[2])

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–∫–∞–∑ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω –∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    delivered_orders = get_delivered_orders(callback.from_user.id)
    order_exists = any(order['id'] == order_id for order in delivered_orders)

    if not order_exists:
        await callback.message.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –µ—â–µ –Ω–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω.")
        await state.clear()
        await callback.answer()
        return

    await state.update_data(order_id=order_id)
    await callback.message.answer(
        "üìù <b>–ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–∑—ã–≤ –æ –≤–∞—à–µ–º –∑–∞–∫–∞–∑–µ</b>\n\n"
        "–ß—Ç–æ –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å –≤ –∑–∞–∫–∞–∑–µ? –ß—Ç–æ –º—ã –º–æ–∂–µ–º —É–ª—É—á—à–∏—Ç—å?",
        parse_mode="HTML"
    )
    await state.set_state(ReviewState.text)
    await callback.answer()


@router.callback_query(F.data == "cancel_review")
async def cancel_review(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.answer("‚ùå –û—Ç–º–µ–Ω–∞ –æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞.")
    await callback.answer()


@router.message(ReviewState.text)
async def get_review_text(message: Message, state: FSMContext):
    if len(message.text) < 10:
        await message.answer("‚ùå –û—Ç–∑—ã–≤ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ù–∞–ø–∏—à–∏—Ç–µ —Ö–æ—Ç—è –±—ã 10 —Å–∏–º–≤–æ–ª–æ–≤.")
        return

    await state.update_data(text=message.text)

    rating_kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚≠ê", callback_data="rating_1"),
         InlineKeyboardButton(text="‚≠ê‚≠ê", callback_data="rating_2"),
         InlineKeyboardButton(text="‚≠ê‚≠ê‚≠ê", callback_data="rating_3"),
         InlineKeyboardButton(text="‚≠ê‚≠ê‚≠ê‚≠ê", callback_data="rating_4"),
         InlineKeyboardButton(text="‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê", callback_data="rating_5")]
    ])

    await message.answer("üåü <b>–û—Ü–µ–Ω–∏—Ç–µ –æ—Ç 1 –¥–æ 5 –∑–≤–µ–∑–¥:</b>",
                         reply_markup=rating_kb,
                         parse_mode="HTML")
    await state.set_state(ReviewState.rating)


@router.callback_query(F.data.startswith("rating_"), ReviewState.rating)
async def save_review_with_rating(callback: CallbackQuery, state: FSMContext):
    rating = int(callback.data.split("_")[1])
    data = await state.get_data()
    order_id = data.get('order_id')

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–∑—ã–≤
    add_review(
        user_id=callback.from_user.id,
        user_name=callback.from_user.full_name,
        text=data['text'],
        rating=rating,
        order_id=order_id
    )

    stars = "‚≠ê" * rating
    if order_id:
        message_text = f"‚úÖ <b>–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤ –æ –∑–∞–∫–∞–∑–µ #{order_id}!</b> {stars}\n\n"
    else:
        message_text = f"‚úÖ <b>–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤!</b> {stars}\n\n"

    message_text += "–í–∞—à–µ –º–Ω–µ–Ω–∏–µ –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ –¥–ª—è –Ω–∞—Å –∏ –ø–æ–º–æ–∂–µ—Ç —Å—Ç–∞—Ç—å –ª—É—á—à–µ!"

    await callback.message.answer(message_text, parse_mode="HTML")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    try:
        order_info = f" (–ó–∞–∫–∞–∑ #{order_id})" if order_id else " (–û–±—â–∏–π –æ—Ç–∑—ã–≤)"
        admin_msg = (
            "üìù <b>–ù–æ–≤—ã–π –æ—Ç–∑—ã–≤</b>\n"
            f"üë§ {callback.from_user.full_name}\n"
            f"‚≠ê –û—Ü–µ–Ω–∫–∞: {rating}/5{order_info}\n"
            f"üí¨ –û—Ç–∑—ã–≤: {data['text']}"
        )
        await notify_admins(admin_msg)
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É: {e}")

    await state.clear()
    await callback.answer()


async def ask_for_review_after_delivery(user_id: int, order_id: int):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç–∑—ã–≤–∞ –ø–æ—Å–ª–µ –¥–æ—Å—Ç–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞"""
    try:
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚≠ê –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", callback_data=f"review_order_{order_id}")],
            [InlineKeyboardButton(text="üìû –ù–∞–ø–∏—Å–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É", callback_data="ask_question")]
        ])

        await bot.send_message(
            user_id,
            f"üéâ <b>–í–∞—à –∑–∞–∫–∞–∑ #{order_id} –¥–æ—Å—Ç–∞–≤–ª–µ–Ω!</b>\n\n"
            "–ü–æ–Ω—Ä–∞–≤–∏–ª—Å—è –ª–∏ –≤–∞–º –∑–∞–∫–∞–∑? –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –≤–∞—à–∏–º–∏ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è–º–∏!",
            reply_markup=kb,
            parse_mode="HTML"
        )
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–∑—ã–≤: {e}")


# --- –ö–û–†–ó–ò–ù–ê ---
@router.callback_query(F.data.startswith("add_"))
async def add_to_cart_handler(callback: CallbackQuery):
    product_id = int(callback.data.split("_")[1])

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–≤–∞—Ä–∞
    if not check_product_availability(product_id):
        await callback.answer("‚ùå –¢–æ–≤–∞—Ä–∞ –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏")
        return

    add_to_cart(callback.from_user.id, product_id)
    await callback.answer("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É")

    count = sum(item['quantity'] for item in get_cart(callback.from_user.id))
    await callback.message.answer(f"üõí –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!\n–í—Å–µ–≥–æ —Ç–µ–ø–µ—Ä—å: {count} —à—Ç.")


@router.callback_query(F.data.startswith("check_avail_"))
async def check_availability_product(callback: CallbackQuery):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí¨ –°–ø—Ä–æ—Å–∏—Ç—å —É –º–µ–Ω–µ–¥–∂–µ—Ä–∞", url="https://t.me/Therry_Voyager")]])
    text = f"üìû –°–≤—è–∂–∏—Ç–µ—Å—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –æ –Ω–∞–ª–∏—á–∏–∏ —Ç–æ–≤–∞—Ä–∞"
    await callback.message.answer(text, reply_markup=kb, parse_mode="HTML")


@router.message(F.text == "üõí –ö–æ—Ä–∑–∏–Ω–∞")
async def show_cart(message: Message):
    cart_items = get_cart(message.from_user.id)

    if not cart_items:
        await message.answer("–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞ üõí", reply_markup=cart_keyboard(cart_items))
        return

    total = sum(item['price'] * item['quantity'] for item in cart_items)
    text = "üõí <b>–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞</b>\n\n"

    for item in cart_items:
        status = "‚úÖ" if item['in_stock'] else "‚ùå"
        text += f"{status} {item['name']} - {item['price']} ‚ÇΩ √ó {item['quantity']} = {item['quantity'] * item['price']} ‚ÇΩ\n"

    text += f"\n<b>–ò—Ç–æ–≥–æ: {total} ‚ÇΩ</b>"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤
    all_in_stock = all(item['in_stock'] for item in cart_items)

    if all_in_stock:
        await message.answer(text, reply_markup=cart_keyboard(cart_items), parse_mode="HTML")
    else:
        await message.answer(
            text + "\n\n‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–æ–≤–∞—Ä—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –Ω–∞–ª–∏—á–∏–∏. "
                   "–£–¥–∞–ª–∏—Ç–µ –∏—Ö –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è —Å—Ä–æ–∫–æ–≤ –ø–æ—Å—Ç–∞–≤–∫–∏.",
            reply_markup=cart_keyboard(cart_items),
            parse_mode="HTML"
        )


@router.callback_query(F.data.startswith("remove_"))
async def remove_from_cart(callback: CallbackQuery):
    """–£–º–µ–Ω—å—à–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ"""
    product_id = int(callback.data.split("_")[1])
    user_id = callback.from_user.id

    with sqlite3.connect(DB_PATH) as conn:
        cur = conn.cursor()
        cur.execute("SELECT quantity FROM cart WHERE user_id=? AND product_id=?", (user_id, product_id))
        row = cur.fetchone()

        if row and row[0] > 1:
            # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            cur.execute("UPDATE cart SET quantity = quantity - 1 WHERE user_id=? AND product_id=?",
                        (user_id, product_id))
        else:
            # –£–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
            cur.execute("DELETE FROM cart WHERE user_id=? AND product_id=?", (user_id, product_id))

        conn.commit()

    await callback.answer("‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–º–µ–Ω—å—à–µ–Ω–æ")
    await show_cart(callback.message)


async def update_cart_button(message: Message):
    cart = get_cart(message.from_user.id)
    count = sum(item['quantity'] for item in cart)
    text = f"üõí –ö–æ—Ä–∑–∏–Ω–∞ ({count})" if count else "üõí –ö–æ—Ä–∑–∏–Ω–∞"
    # –û–±–Ω–æ–≤–∏—Ç–µ –º–µ–Ω—é —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º —Ç–µ–∫—Å—Ç–æ–º (–Ω—É–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ)


async def update_main_menu(message: Message):
    cart = get_cart(message.from_user.id)
    count = sum(item['quantity'] for item in cart)
    text = f"üõí –ö–æ—Ä–∑–∏–Ω–∞ ({count})" if count else "üõí –ö–æ—Ä–∑–∏–Ω–∞"
    # –ù–æ —ç—Ç–æ —Å–ª–æ–∂–Ω–æ –±–µ–∑ —Ö—Ä–∞–Ω–µ–Ω–∏—è message_id


@router.callback_query(F.data == "clear_cart")
async def clear_cart_handler(callback: CallbackQuery):
    clear_cart(callback.from_user.id)
    await callback.answer("–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞")
    await callback.message.edit_text("–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")


@router.callback_query(F.data == "cancel_order")
async def cancel_order(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.answer("‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω.")
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–æ–≤–æ–π –∫–Ω–æ–ø–∫–∏
@router.message(F.text == "üí∞ –ü–æ–¥–±–æ—Ä –ø–æ–¥ –±—é–¥–∂–µ—Ç")
async def budget_menu_handler(message: Message, state: FSMContext):
    await start_budget_selection_from_message(message, state)


@router.message(F.text.contains("–±—é–¥–∂–µ—Ç"))
async def budget_keyword_handler(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞ "–±—é–¥–∂–µ—Ç" """
    await start_budget_selection_from_message(message, state)


async def start_budget_selection_from_message(message: Message, state: FSMContext):
    """–ó–∞–ø—É—Å–∫ –ø–æ–¥–±–æ—Ä–∞ –ø–æ –±—é–¥–∂–µ—Ç—É –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    await message.answer(
        "üí∞ <b>–ü–æ–¥–±–æ—Ä –±—É–∫–µ—Ç–∞ –ø–æ–¥ –≤–∞—à –±—é–¥–∂–µ—Ç</b>\n\n"
        "–ù–µ –Ω–∞—à–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –±—É–∫–µ—Ç? –ú—ã –ø–æ–º–æ–∂–µ–º!\n\n"
        "üí° –ù–∞—à–∏ —Ñ–ª–æ—Ä–∏—Å—Ç—ã –ø–æ–¥–±–µ—Ä—É—Ç –∏–¥–µ–∞–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç:\n"
        "‚Ä¢ –í —Ä–∞–º–∫–∞—Ö –≤–∞—à–µ–≥–æ –±—é–¥–∂–µ—Ç–∞\n"
        "‚Ä¢ –° —É—á–µ—Ç–æ–º –≤–∞—à–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π\n"
        "‚Ä¢ –ë—ã—Å—Ç—Ä–æ –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ\n\n"
        "üìù –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤–∞—à–µ–≥–æ –±—é–¥–∂–µ—Ç–∞ (–≤ —Ä—É–±–ª—è—Ö):",
        parse_mode="HTML"
    )
    await state.set_state(BudgetRequestState.budget)


@router.callback_query(F.data == "budget_selection")
async def start_budget_selection(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–¥–±–æ—Ä–∞ –ø–æ –±—é–¥–∂–µ—Ç—É"""
    await callback.message.answer(
        "üí∞ <b>–ü–æ–¥–±–æ—Ä –±—É–∫–µ—Ç–∞ –ø–æ–¥ –≤–∞—à –±—é–¥–∂–µ—Ç</b>\n\n"
        "–ù–∞—à–∏ —Ñ–ª–æ—Ä–∏—Å—Ç—ã –ø–æ–¥–±–µ—Ä—É—Ç –∏–¥–µ–∞–ª—å–Ω—ã–π –±—É–∫–µ—Ç –∏–º–µ–Ω–Ω–æ –¥–ª—è –≤–∞—Å!\n\n"
        "üí° –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –±—é–¥–∂–µ—Ç, –∏ –º—ã –ø—Ä–µ–¥–ª–æ–∂–∏–º:\n"
        "‚Ä¢ –ù–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –±—É–∫–µ—Ç–æ–≤\n"
        "‚Ä¢ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n"
        "‚Ä¢ –ë—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç\n\n"
        "üìù –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤–∞—à–µ–≥–æ –±—é–¥–∂–µ—Ç–∞ (–≤ —Ä—É–±–ª—è—Ö):",
        parse_mode="HTML"
    )
    await state.set_state(BudgetRequestState.budget)
    await callback.answer()


@router.message(BudgetRequestState.budget)
async def get_budget_amount(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–∞–µ–º –±—é–¥–∂–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        budget = int(message.text.strip())
        if budget < 500:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±—é–¥–∂–µ—Ç
            await message.answer("‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±—é–¥–∂–µ—Ç - 500 —Ä—É–±–ª–µ–π. –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –µ—â–µ —Ä–∞–∑:")
            return

        await state.update_data(budget=budget)
        await message.answer(
            "üìû <b>–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏:</b>\n\n"
            "–ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.\n"
            "–§–æ—Ä–º–∞—Ç: +7 XXX XXX XX XX",
            parse_mode="HTML"
        )
        await state.set_state(BudgetRequestState.phone)

    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. –ù–∞–ø—Ä–∏–º–µ—Ä: 2000")


@router.message(BudgetRequestState.phone)
async def get_budget_phone(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    phone = message.text.strip()

    # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞
    if not phone.replace('+', '').replace(' ', '').replace('-', '').replace('(', '').replace(')', '').isdigit():
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7 XXX XXX XX XX:")
        return

    await state.update_data(phone=phone)
    await message.answer(
        "üé® <b>–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è—Ö</b>\n\n"
        "–ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ –≤–∏–¥–µ—Ç—å –≤ –±—É–∫–µ—Ç–µ?\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
        "‚Ä¢ –õ—é–±–∏–º—ã–µ —Ü–≤–µ—Ç—ã (—Ä–æ–∑—ã, —Ç—é–ª—å–ø–∞–Ω—ã, —Ö—Ä–∏–∑–∞–Ω—Ç–µ–º—ã)\n"
        "‚Ä¢ –¶–≤–µ—Ç–æ–≤–∞—è –≥–∞–º–º–∞ (–∫—Ä–∞—Å–Ω—ã–π, –±–µ–ª—ã–π, –ø–∞—Å—Ç–µ–ª—å–Ω—ã–µ —Ç–æ–Ω–∞)\n"
        "‚Ä¢ –ü–æ–≤–æ–¥ (–¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è, 8 –º–∞—Ä—Ç–∞, –ø—Ä–æ—Å—Ç–æ —Ç–∞–∫)\n"
        "‚Ä¢ –û—Å–æ–±—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è\n\n"
        "üí¨ –û–ø–∏—à–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ, —á—Ç–æ –≤–∞–º –Ω—Ä–∞–≤–∏—Ç—Å—è:",
        parse_mode="HTML"
    )
    await state.set_state(BudgetRequestState.preferences)


@router.message(BudgetRequestState.preferences)
async def get_budget_preferences(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä—É"""
    preferences = message.text
    data = await state.get_data()
    budget = data['budget']
    phone = data['phone']  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –∏–∑ state

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    admin_message = (
        "üí∞ <b>–ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê: –ü–û–î–ë–û–† –ü–û–î –ë–Æ–î–ñ–ï–¢</b>\n\n"
        f"üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> {message.from_user.full_name}\n"
        f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {phone}\n"  # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω
        f"üÜî <b>ID:</b> {message.from_user.id}\n"
        f"üíµ <b>–ë—é–¥–∂–µ—Ç:</b> {budget} ‚ÇΩ\n"
        f"üé® <b>–ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è:</b>\n{preferences}\n\n"
        f"‚ö° <b>–°–†–û–ß–ù–û –û–ë–†–ê–ë–û–¢–ê–¢–¨!</b>"
    )

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –∫–ª–∏–µ–Ω—Ç—É",
                              url=f"https://t.me/{message.from_user.username}" if message.from_user.username else
                              f"tg://user?id={message.from_user.id}")]
    ])

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º
    try:
        await notify_admins(admin_message)
        await message.answer(
            "‚úÖ <b>–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!</b>\n\n"
            f"üíµ –ë—é–¥–∂–µ—Ç: {budget} ‚ÇΩ\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
            f"üé® –í–∞—à–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è: {preferences}\n\n"
            "üìû –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç "
            "—Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –±—É–∫–µ—Ç–æ–≤ –≤ —Ä–∞–º–∫–∞—Ö –≤–∞—à–µ–≥–æ –±—é–¥–∂–µ—Ç–∞!",
            parse_mode="HTML"
        )
    except Exception as e:
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É –Ω–∞–ø—Ä—è–º—É—é: @mgk71"
        )
        logger.error(f"Budget request error: {e}")

    await state.clear()


# --- –û–§–û–†–ú–õ–ï–ù–ò–ï –ó–ê–ö–ê–ó–ê ---
@router.callback_query(F.data == "checkout")
async def start_checkout(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞"""
    if not get_cart(callback.from_user.id):
        await callback.answer("–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!")
        return

    cart_items = get_cart(callback.from_user.id)
    if not all(item['in_stock'] for item in cart_items):
        await callback.answer("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–æ–≤–∞—Ä—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –Ω–∞–ª–∏—á–∏–∏.")
        return

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—É–º–º—É —Å —É—á–µ—Ç–æ–º —Å–∫–∏–¥–æ–∫ –∏ –±–æ–Ω—É—Å–æ–≤
    try:
        calculation = await calculate_order_total_with_bonuses(callback.from_user.id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ calculate_order_total_with_bonuses: {e}")
        await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á—ë—Ç–µ —Å—É–º–º—ã –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –í–°–ï –¥–∞–Ω–Ω—ã–µ —Ä–∞—Å—á–µ—Ç–∞ –≤ state
    await state.update_data(
        original_products_total=calculation['original_products_total'],  # –ò—Å—Ö–æ–¥–Ω–∞—è —Å—É–º–º–∞ —Ç–æ–≤–∞—Ä–æ–≤
        products_total_after_discount=calculation['products_total_after_discount'],  # –°—É–º–º–∞ –ø–æ—Å–ª–µ —Å–∫–∏–¥–∫–∏
        discount=calculation['discount'],
        is_first_order=calculation['is_first_order'],
        available_bonus=calculation['available_bonus'],
        max_bonus_allowed=calculation['max_bonus_allowed'],
        bonus_used=0,  # –ü–æ–∫–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –±–æ–Ω—É—Å—ã
        delivery_cost=calculation.get('delivery_cost', 0)  # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏
    )

    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–Ω—É—Å—ã, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if calculation['available_bonus'] > 0 and calculation['max_bonus_allowed'] > 0:
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=f"üíé –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–Ω—É—Å—ã (–¥–æ {calculation['max_bonus_allowed']}‚ÇΩ)",
                                  callback_data="use_bonus")],
            [InlineKeyboardButton(text="üí≥ –ë–µ–∑ –±–æ–Ω—É—Å–æ–≤", callback_data="skip_bonus")]
        ])

        await callback.message.answer(
            f"üíé <b>–£ –≤–∞—Å –µ—Å—Ç—å {calculation['available_bonus']}‚ÇΩ –±–æ–Ω—É—Å–æ–≤</b>\n"
            f"–ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å: –¥–æ {calculation['max_bonus_allowed']}‚ÇΩ (30% –æ—Ç –∑–∞–∫–∞–∑–∞)\n\n"
            "–•–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–Ω—É—Å—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã?",
            reply_markup=kb,
            parse_mode="HTML"
        )
        await callback.answer()
        return

    # –ï—Å–ª–∏ –±–æ–Ω—É—Å–æ–≤ –Ω–µ—Ç, —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –∏–º–µ–Ω–∏
    await callback.message.answer("üë§ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
    await state.set_state(OrderState.name)
    await callback.answer()


@router.message(OrderState.name)
async def get_name(message: Message, state: FSMContext):
    if message.text in MENU_COMMANDS:
        await state.clear()  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤–≤–æ–¥

        # –í—ã–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–º–∞–Ω–¥—ã
        if message.text == "üå∏ –ö–∞—Ç–∞–ª–æ–≥":
            await show_catalog(message)
        elif message.text == "üöö –î–æ—Å—Ç–∞–≤–∫–∞":
            await delivery_info(message)
        elif message.text == "üìû –ú–µ–Ω–µ–¥–∂–µ—Ä":
            await manager(message, state)
        elif message.text == "üìç –ù–∞ –∫–∞—Ä—Ç–µ":
            await map_handler(message)
        elif message.text == "üéÅ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç":
            await cert_menu(message)
        elif message.text == "‚≠ê –û—Ç–∑—ã–≤—ã":
            await reviews_menu(message)
        elif message.text == "üõí –ö–æ—Ä–∑–∏–Ω–∞":
            await show_cart(message)
        elif message.text == "üßæ –ú–æ–∏ –∑–∞–∫–∞–∑—ã":
            await my_orders(message)
        elif message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é":
            await back_to_main_menu(message)
        elif message.text == "üè† –í –º–µ–Ω—é":
            await back_to_main(message)
        return  # –í–∞–∂–Ω–æ: –≤—ã—Ö–æ–¥–∏–º, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–æ–ø—Ä–æ—Å–∞

    await state.update_data(name=message.text)
    await message.answer("üìû –í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω (–≤ —Ñ–æ—Ä–º–∞—Ç–µ +7 XXX XXX XX XX):")
    await state.set_state(OrderState.phone)


@router.message(OrderState.phone)
async def get_phone(message: Message, state: FSMContext):
    phone = message.text.strip()

    # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞
    if not phone.replace('+', '').replace(' ', '').replace('-', '').replace('(', '').replace(')', '').isdigit():
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7 XXX XXX XX XX:")
        return

    await state.update_data(phone=phone)

    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —Ç–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏
    delivery_kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üöö –î–æ—Å—Ç–∞–≤–∫–∞", callback_data="delivery_type_delivery")],
        [InlineKeyboardButton(text="üì¶ –°–∞–º–æ–≤—ã–≤–æ–∑", callback_data="delivery_type_pickup")]
    ])

    await message.answer(
        "üì¶ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:</b>",
        reply_markup=delivery_kb,
        parse_mode="HTML"
    )
    await state.set_state(OrderState.delivery_type)


@router.callback_query(F.data.startswith("delivery_type_"))
async def get_delivery_type(callback: CallbackQuery, state: FSMContext):
    delivery_type = callback.data.split("_")[2]  # delivery –∏–ª–∏ pickup
    await state.update_data(delivery_type=delivery_type)

    # –†–ê–°–°–ß–ò–¢–´–í–ê–ï–ú –°–¢–û–ò–ú–û–°–¢–¨ –î–û–°–¢–ê–í–ö–ò –ü–†–Ø–ú–û –ó–î–ï–°–¨
    delivery_cost = 0 if delivery_type == "pickup" else 300
    await state.update_data(delivery_cost=delivery_cost)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å

    if delivery_type == "pickup":
        # –î–ª—è —Å–∞–º–æ–≤—ã–≤–æ–∑–∞ —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã
        await state.update_data(address=SHOP_INFO['address'])

        available_dates = get_available_delivery_dates()
        dates_kb = InlineKeyboardMarkup(inline_keyboard=[])

        for date in available_dates:
            dates_kb.inline_keyboard.append([
                InlineKeyboardButton(text=date, callback_data=f"delivery_date_{date}")
            ])

        await callback.message.answer(
            "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:",
            reply_markup=dates_kb
        )
        await state.set_state(OrderState.delivery_date)

    else:
        # –î–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∞–¥—Ä–µ—Å
        await callback.message.answer("üè† –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:")
        await state.set_state(OrderState.address)

    await callback.answer()


@router.message(OrderState.address)
async def get_address(message: Message, state: FSMContext):
    await state.update_data(address=message.text)

    await state.update_data(delivery_cost=0)  # –í—Ä–µ–º–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ

    available_dates = get_available_delivery_dates()
    dates_kb = InlineKeyboardMarkup(inline_keyboard=[])

    for date in available_dates:
        dates_kb.inline_keyboard.append([
            InlineKeyboardButton(text=date, callback_data=f"delivery_date_{date}")
        ])

    await message.answer("üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏:", reply_markup=dates_kb)
    await state.set_state(OrderState.delivery_date)


@router.callback_query(F.data.startswith("delivery_date_"))
async def get_delivery_date(callback: CallbackQuery, state: FSMContext):
    delivery_date = callback.data.split("_")[2]
    await state.update_data(delivery_date=delivery_date)

    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –≤—Ä–µ–º—è
    time_slots = get_delivery_time_slots()
    time_kb = InlineKeyboardMarkup(inline_keyboard=[])

    for time_slot in time_slots:
        time_kb.inline_keyboard.append([
            InlineKeyboardButton(text=time_slot, callback_data=f"delivery_time_{time_slot}")
        ])

    data = await state.get_data()
    delivery_type = data.get('delivery_type', 'delivery')

    if delivery_type == "pickup":
        await callback.message.answer("‚è∞ –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è:", reply_markup=time_kb)
    else:
        await callback.message.answer("‚è∞ –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏:", reply_markup=time_kb)

    await state.set_state(OrderState.delivery_time)
    await callback.answer()


@router.callback_query(F.data.startswith("delivery_time_"))
async def get_delivery_time(callback: CallbackQuery, state: FSMContext):
    delivery_time = callback.data.split("_")[2]
    await state.update_data(delivery_time=delivery_time)

    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º "–ß–µ—Ä–µ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä–∞"
    payment_kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí≥ –û–Ω–ª–∞–π–Ω –∫–∞—Ä—Ç–æ–π", callback_data="pay_online")],
        [InlineKeyboardButton(text="üíµ –ù–∞–ª–∏—á–Ω—ã–º–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏", callback_data="pay_cash")],
        [InlineKeyboardButton(text="üîÑ –°–ë–ü", callback_data="pay_sbp")],
        [InlineKeyboardButton(text="üéÅ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç", callback_data="pay_cert")],
        [InlineKeyboardButton(text="üí¨ –ß–µ—Ä–µ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä–∞", callback_data="pay_manager")]
    ])

    await callback.message.answer("üí≥ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", reply_markup=payment_kb)
    await state.set_state(OrderState.payment)
    await callback.answer()


# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–ü–û–°–û–ë–û–í –û–ü–õ–ê–¢–´ ---
@router.callback_query(F.data.in_(["pay_online", "pay_sbp", "pay_cash", "pay_cert", "pay_manager"]))
async def handle_payment_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã
        payment_method = callback.data.split("_")[1] if "_" in callback.data else callback.data.replace("pay_", "")
        await state.update_data(payment_method=payment_method)

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ state
        data = await state.get_data()
        user_id = callback.from_user.id

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—É–º–º—É
        calculation = await calculate_order_total_with_bonuses(
            user_id,
            data.get('delivery_cost', 0),
            data.get('bonus_used', 0)
        )

        total_amount = calculation['final_total']

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—É–º–º—É
        await state.update_data(
            payment_amount=total_amount,
            original_products_total=calculation['original_products_total'],
            discount=calculation['discount']
        )

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã
        if payment_method in ['online', 'sbp']:
            await process_online_payment_selection(callback, state)
        elif payment_method == 'cash':
            await process_cash_payment(callback, state)
        elif payment_method == 'cert':
            await process_certificate_payment(callback, state)
        elif payment_method == 'manager':
            await process_manager_payment(callback, state)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã: {e}")
        await callback.message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–ø–ª–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º."
        )
    finally:
        await callback.answer()


@router.callback_query(F.data == "pay_manager")
async def process_online_payment(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–Ω–ª–∞–π–Ω-–æ–ø–ª–∞—Ç—ã —Å —É—á–µ—Ç–æ–º –±–æ–Ω—É—Å–æ–≤"""
    data = await state.get_data()
    user_id = message.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∫–æ—Ä–∑–∏–Ω—É –∏ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å —É—á–µ—Ç–æ–º –±–æ–Ω—É—Å–æ–≤
    calculation = await calculate_order_total_with_bonuses(user_id, data.get('delivery_cost', 0))
    bonus_used = data.get('bonus_used', 0)
    total = calculation['final_total']

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—É–º–º—É –≤ state
    await state.update_data(payment_amount=total, bonus_used=bonus_used)


@router.callback_query(F.data.in_(["pay_online", "pay_sbp"]))
async def process_online_payment_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –æ–Ω–ª–∞–π–Ω-–æ–ø–ª–∞—Ç—ã (–∫–∞—Ä—Ç–∞ –∏–ª–∏ –°–ë–ü)"""
    try:
        data = await state.get_data()
        payment_method = data.get('payment_method', 'online')
        user_id = callback.from_user.id

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—É–º–º—É
        calculation = await calculate_order_total_with_bonuses(
            user_id,
            data.get('delivery_cost', 0),
            data.get('bonus_used', 0)
        )

        total_amount = calculation['final_total']

        user_phone = data.get('phone', '')
        if not user_phone:
            user_phone = "9999999999"

        # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –ÆKassa
        cart_items = get_cart(user_id)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞
        metadata = {
            "user_id": user_id,
            "name": data.get('name', ''),
            "phone": user_phone,
            "address": data.get('address', ''),
            "delivery_date": data.get('delivery_date', ''),
            "delivery_time": data.get('delivery_time', ''),
            "payment_method": payment_method,
            "delivery_type": data.get('delivery_type', 'delivery'),
            "delivery_cost": data.get('delivery_cost', 0),
            "bonus_used": data.get('bonus_used', 0),
            "cart_items": cart_items,
            "type": "order"
        }

        # –£–ø—Ä–æ—â–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è YooKassa
        simplified_metadata = simplify_order_data(metadata)

        # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
        payment_description = f"–ó–∞–∫–∞–∑ —Ü–≤–µ—Ç–æ–≤ –Ω–∞ {total_amount}‚ÇΩ"

        payment = await payment_manager.create_payment(
            amount=total_amount,
            description=payment_description,
            metadata=simplified_metadata
        )

        if payment and payment.get("confirmation_url"):
            await state.update_data(
                payment_id=payment["id"],
                payment_url=payment["confirmation_url"]
            )
            await state.set_state(OrderState.waiting_payment)

            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ–ø–ª–∞—Ç—ã
            kb = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üí≥ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", url=payment["confirmation_url"])],
                [InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"check_payment_{payment['id']}")]
            ])

            payment_method_name = "–±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç–æ–π" if payment_method == "online" else "—á–µ—Ä–µ–∑ –°–ë–ü"

            await callback.message.answer(
                f"üí≥ <b>–û–ø–ª–∞—Ç–∞ {payment_method_name}</b>\n\n"
                f"üí∞ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {total_amount} ‚ÇΩ\n"
                f"üîó –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã\n\n"
                f"–ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ ¬´‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É¬ª",
                reply_markup=kb,
                parse_mode="HTML"
            )
        else:
            await callback.message.answer(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º."
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_online_payment_selection: {e}")
        await callback.message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã."
        )


@router.callback_query(F.data.startswith("check_payment_"))
async def check_payment_status(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞"""
    try:
        payment_id = callback.data.split("_")[2]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ payment_manager
        status = await payment_manager.check_payment_status(payment_id)

        if status == 'succeeded':
            # –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–µ–Ω - —Å–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
            data = await state.get_data()
            user_id = callback.from_user.id

            # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
            order_id = create_order(
                user_id=user_id,
                name=data.get('name', ''),
                phone=data.get('phone', ''),
                address=data.get('address', ''),
                delivery_date=data.get('delivery_date', ''),
                delivery_time=data.get('delivery_time', ''),
                payment=data.get('payment_method', 'online'),
                delivery_cost=data.get('delivery_cost', 0),
                delivery_type=data.get('delivery_type', 'delivery'),
                bonus_used=data.get('bonus_used', 0)
            )

            if order_id != -1:
                await callback.message.answer(
                    f"‚úÖ <b>–û–ø–ª–∞—Ç–∞ –ø—Ä–∏–Ω—è—Ç–∞!</b>\n\n"
                    f"–ó–∞–∫–∞–∑ #{order_id} —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω.\n"
                    f"–ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.",
                    parse_mode="HTML"
                )

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
                await notify_admins_about_new_order(order_id, user_id, data)

                await state.clear()
            else:
                await callback.message.answer(
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º."
                )

        elif status == 'pending':
            await callback.answer("‚è≥ –ü–ª–∞—Ç–µ–∂ –µ—â–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É.")
        else:
            await callback.answer("‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–µ –ø—Ä–æ—à–µ–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã.")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞.")


async def notify_admins_about_new_order(order_id: int, user_id: int, order_data: dict):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ"""
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑ –∏–∑ –±–∞–∑—ã, —á—Ç–æ–±—ã –≤–∑—è—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
    with sqlite3.connect(DB_PATH) as conn:
        conn.row_factory = sqlite3.Row
        cur = conn.cursor()
        cur.execute("SELECT items FROM orders WHERE id = ?", (order_id,))
        result = cur.fetchone()

    if not result:
        logger.error(f"–ó–∞–∫–∞–∑ #{order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
        return

    try:
        cart_items = json.loads(result['items'])  # –≠—Ç–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ items –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id}: {e}")
        cart_items = []

    message = (f"üõí <b>–ù–û–í–´–ô –ó–ê–ö–ê–ó #{order_id}</b>\n"
               f"üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> {order_data.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
               f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {order_data.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
               f"üìç <b>–ê–¥—Ä–µ—Å:</b> {order_data.get('address', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
               f"üìÖ <b>–î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏:</b> {order_data.get('delivery_date', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
               f"‚è∞ <b>–í—Ä–µ–º—è:</b> {order_data.get('delivery_time', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
               f"üí≥ <b>–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:</b> {get_payment_method_name(order_data.get('payment_method', ''))}\n"
               f"üí∞ <b>–°—É–º–º–∞:</b> {order_data.get('payment_amount', 0)} ‚ÇΩ\n"
               f"üõí <b>–¢–æ–≤–∞—Ä—ã:</b>\n")

    if cart_items:
        for item in cart_items:
            name = item.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä')
            price = item.get('price', 0)
            quantity = item.get('quantity', 1)
            total_item = price * quantity
            message += f"‚Ä¢ {name} √ó{quantity} ‚Äî {total_item} ‚ÇΩ\n"
    else:
        message += "‚ùå –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –∑–∞–∫–∞–∑–µ.\n"

    if order_data.get('bonus_used', 0) > 0:
        message += f"üíé <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –±–æ–Ω—É—Å–æ–≤:</b> {order_data.get('bonus_used', 0)} ‚ÇΩ\n"

    await notify_admins(message)


@router.callback_query(F.data.in_(["pay_online", "pay_sbp", "pay_cash"]))
async def process_payment_with_bonus_option(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–Ω—É—Å—ã –ø–µ—Ä–µ–¥ –æ–ø–ª–∞—Ç–æ–π"""
    payment_method = callback.data.split("_")[1]
    await state.update_data(payment_method=payment_method)

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –±–æ–Ω—É—Å—ã
    user_id = callback.from_user.id
    calculation = await calculate_order_total_with_bonuses(user_id)

    if calculation['available_bonus'] > 0 and calculation['max_bonus_allowed'] > 0:
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text=f"üíé –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–Ω—É—Å—ã (–¥–æ {calculation['max_bonus_allowed']}‚ÇΩ)",
                callback_data="use_bonus_yes"
            )],
            [InlineKeyboardButton(text="üí≥ –ë–µ–∑ –±–æ–Ω—É—Å–æ–≤", callback_data="use_bonus_no")]
        ])

        await callback.message.answer(
            f"üíé <b>–£ –≤–∞—Å –µ—Å—Ç—å {calculation['available_bonus']}‚ÇΩ –±–æ–Ω—É—Å–æ–≤</b>\n"
            f"–ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å: –¥–æ {calculation['max_bonus_allowed']}‚ÇΩ (30% –æ—Ç –∑–∞–∫–∞–∑–∞)\n\n"
            "–•–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–Ω—É—Å—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã?",
            reply_markup=kb,
            parse_mode="HTML"
        )
        await state.set_state(OrderState.use_bonus)
    else:
        # –ï—Å–ª–∏ –±–æ–Ω—É—Å–æ–≤ –Ω–µ—Ç, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ–±—ã—á–Ω–æ–π –æ–ø–ª–∞—Ç–µ
        await process_payment_method(callback, state)

    await callback.answer()


@router.callback_query(F.data == "use_bonus_yes", OrderState.use_bonus)
async def use_bonus_yes_handler(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–Ω—É—Å—ã"""
    user_id = callback.from_user.id
    calculation = await calculate_order_total_with_bonuses(user_id)

    await callback.message.answer(
        f"üíé <b>–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –±–æ–Ω—É—Å–æ–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è</b>\n\n"
        f"–î–æ—Å—Ç—É–ø–Ω–æ: {calculation['available_bonus']}‚ÇΩ\n"
        f"–ú–∞–∫—Å–∏–º—É–º –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å: {calculation['max_bonus_allowed']}‚ÇΩ\n\n"
        f"–ü—Ä–∏–º–µ—Ä: 500 (–¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è 500‚ÇΩ –±–æ–Ω—É—Å–æ–≤)",
        parse_mode="HTML"
    )
    await state.set_state(OrderState.bonus_amount)
    await callback.answer()


@router.callback_query(F.data == "use_bonus_no")
async def use_bonus_no_handler(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Ö–æ—á–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–Ω—É—Å—ã"""
    await state.update_data(bonus_used=0)
    await callback.message.answer("üí≥ –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–ø–ª–∞—Ç—É –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ–Ω—É—Å–æ–≤")
    await process_payment_method(callback, state)
    await callback.answer()


@router.message(OrderState.bonus_amount)
async def process_bonus_amount(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—É–º–º—ã –±–æ–Ω—É—Å–æ–≤ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ä–∞—Å—á–µ—Ç–æ–º"""
    try:
        bonus_to_use = int(message.text)
        user_id = message.from_user.id

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä–∑–∏–Ω—ã
        cart_items = get_cart(user_id)
        products_total = sum(item['price'] * item['quantity'] for item in cart_items)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
        max_bonus_allowed = int(products_total * 0.3)
        bonus_info = get_bonus_info(user_id)

        if bonus_to_use <= 0:
            await message.answer("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π. –í–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return

        if bonus_to_use > bonus_info['current_bonus']:
            await message.answer(
                f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–æ–Ω—É—Å–æ–≤. –î–æ—Å—Ç—É–ø–Ω–æ: {bonus_info['current_bonus']}‚ÇΩ\n"
                f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –µ—â–µ —Ä–∞–∑:"
            )
            return

        if bonus_to_use > max_bonus_allowed:
            await message.answer(
                f"‚ùå –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–µ –±–æ–ª–µ–µ {max_bonus_allowed}‚ÇΩ (30% –æ—Ç –∑–∞–∫–∞–∑–∞)\n"
                f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –µ—â–µ —Ä–∞–∑:"
            )
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É–º–º—É –±–æ–Ω—É—Å–æ–≤ –∏ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—É–º–º—É
        data = await state.get_data()
        delivery_type = data.get('delivery_type', 'delivery')
        delivery_cost = data.get('delivery_cost', 0)  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏
        final_total = products_total - bonus_to_use + delivery_cost

        await state.update_data(
            bonus_used=bonus_to_use,
            products_total=products_total,
            delivery_cost=delivery_cost,
            final_total=final_total
        )

        await message.answer(
            f"‚úÖ –ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ {bonus_to_use}‚ÇΩ –±–æ–Ω—É—Å–æ–≤\n"
            f"üí∞ –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {final_total}‚ÇΩ\n\n"
            f"üë§ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:"
        )
        await state.set_state(OrderState.name)

    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. –ù–∞–ø—Ä–∏–º–µ—Ä: 500")


@router.callback_query(F.data == "pay_cash")
async def process_cash_payment(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–ª–∞—Ç—ã –Ω–∞–ª–∏—á–Ω—ã–º–∏"""
    await state.update_data(payment_method='cash')

    data = await state.get_data()
    cart_items = get_cart(callback.from_user.id)
    products_total = sum(item['price'] * item['quantity'] for item in cart_items)

    # –î–ª—è —Å–∞–º–æ–≤—ã–≤–æ–∑–∞ –¥–æ—Å—Ç–∞–≤–∫–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–∞
    delivery_type = data.get('delivery_type', 'delivery')
    delivery_cost = data.get('delivery_cost', 0)

    total = products_total + delivery_cost

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ state
    await state.update_data(delivery_cost=delivery_cost, payment_amount=total)

    await show_order_summary(callback, state, total)
    await callback.answer()


@router.callback_query(F.data == "pay_cert")
async def process_certificate_payment(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–ª–∞—Ç—ã —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–º"""
    await callback.message.answer(
        "üéÅ <b>–û–ø–ª–∞—Ç–∞ –ø–æ–¥–∞—Ä–æ—á–Ω—ã–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–º</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –≤–∞—à–µ–≥–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞:",
        parse_mode="HTML"
    )
    await state.set_state(OrderState.certificate_code)
    await callback.answer()


@router.message(OrderState.certificate_code)
async def process_certificate_code(message: Message, state: FSMContext):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –ø–µ—Ä–µ–±–æ—Ä–∞"""
    user_id = message.from_user.id
    cert_code = message.text.strip().upper()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    attempts_info = get_certificate_attempts(user_id)
    if attempts_info and attempts_info.get('blocked_until'):
        blocked_until = datetime.strptime(attempts_info['blocked_until'], "%Y-%m-%d %H:%M:%S")
        if datetime.now() < blocked_until:
            time_left = blocked_until - datetime.now()
            minutes_left = int(time_left.total_seconds() // 60)
            await message.answer(
                f"‚ùå –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –Ω–µ–≤–µ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫. "
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ {minutes_left} –º–∏–Ω—É—Ç."
            )
            return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
    certificate = check_certificate_validity(cert_code)

    if certificate:
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –≤–≤–æ–¥–µ
        reset_certificate_attempts(user_id)

        data = await state.get_data()
        cart_items = get_cart(user_id)
        total = sum(item['price'] * item['quantity'] for item in cart_items) + data.get('delivery_cost', 0)

        if certificate['amount'] >= total:
            # –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –ø–æ–∫—Ä—ã–≤–∞–µ—Ç –≤—Å—é —Å—É–º–º—É
            await state.update_data(
                payment_method='certificate',
                certificate_code=cert_code,
                certificate_amount=certificate['amount']
            )

            await message.answer(
                f"‚úÖ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –ø—Ä–∏–Ω—è—Ç! –ù–æ–º–∏–Ω–∞–ª: {certificate['amount']} ‚ÇΩ\n"
                f"–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {total} ‚ÇΩ\n"
                f"–û—Å—Ç–∞—Ç–æ–∫ –Ω–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–µ: {certificate['amount'] - total} ‚ÇΩ"
            )

            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é –∑–∞–∫–∞–∑–∞
            await show_order_summary_from_message(message, state, total)

        else:
            await message.answer(
                f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–µ.\n"
                f"–ù–æ–º–∏–Ω–∞–ª: {certificate['amount']} ‚ÇΩ\n"
                f"–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {total} ‚ÇΩ\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –¥–ª—è —Ä–∞–∑–Ω–∏—Ü—ã: {total - certificate['amount']} ‚ÇΩ"
            )
    else:
        # –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ - —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫
        add_certificate_attempt(user_id)
        attempts_info = get_certificate_attempts(user_id)

        if attempts_info['attempts'] >= 3:
            await message.answer(
                "‚ùå –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –Ω–µ–≤–µ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫. "
                "–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ 30 –º–∏–Ω—É—Ç."
            )
        else:
            remaining_attempts = 3 - attempts_info['attempts']
            await message.answer(
                f"‚ùå –ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç. "
                f"–û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: {remaining_attempts}\n"
                f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–¥ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º."
            )


@router.message(OrderState.certificate_code)
async def process_certificate_code(message: Message, state: FSMContext):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞"""
    cert_code = message.text.strip().upper()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
    certificate = check_certificate_validity(cert_code)

    if certificate:
        data = await state.get_data()
        cart_items = get_cart(message.from_user.id)
        total = sum(item['price'] * item['quantity'] for item in cart_items) + data.get('delivery_cost', 0)

        if certificate['amount'] >= total:
            # –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –ø–æ–∫—Ä—ã–≤–∞–µ—Ç –≤—Å—é —Å—É–º–º—É
            await state.update_data(
                payment_method='certificate',
                certificate_code=cert_code,
                certificate_amount=certificate['amount']
            )

            await message.answer(
                f"‚úÖ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –ø—Ä–∏–Ω—è—Ç! –ù–æ–º–∏–Ω–∞–ª: {certificate['amount']} ‚ÇΩ\n"
                f"–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {total} ‚ÇΩ\n"
                f"–û—Å—Ç–∞—Ç–æ–∫ –Ω–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–µ: {certificate['amount'] - total} ‚ÇΩ"
            )

            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é –∑–∞–∫–∞–∑–∞
            await show_order_summary_from_message(message, state, total)

        else:
            await message.answer(
                f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–µ.\n"
                f"–ù–æ–º–∏–Ω–∞–ª: {certificate['amount']} ‚ÇΩ\n"
                f"–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {total} ‚ÇΩ\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –¥–ª—è —Ä–∞–∑–Ω–∏—Ü—ã: {total - certificate['amount']} ‚ÇΩ"
            )
    else:
        await message.answer(
            "‚ùå –ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–¥ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º."
        )


async def show_order_summary(callback: CallbackQuery, state: FSMContext, total: float):
    data = await state.get_data()
    bonus_used = data.get('bonus_used', 0)
    original_products_total = data.get('original_products_total', total + bonus_used)  # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω—É—é —Å—É–º–º—É
    discount = data.get('discount', 0)
    is_first_order = data.get('is_first_order', False)

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∫–∏–¥–∫–µ
    discount_text = f"üéâ <b>–°–∫–∏–¥–∫–∞ 10% –Ω–∞ –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑:</b> -{discount} ‚ÇΩ\n" if discount > 0 else ""

    delivery_type = data.get('delivery_type', 'delivery')
    delivery_type_text = "–°–∞–º–æ–≤—ã–≤–æ–∑" if delivery_type == "pickup" else "–î–æ—Å—Ç–∞–≤–∫–∞"

    address = data.get('address', '')
    address_text = f"üè† <b>–ê–¥—Ä–µ—Å:</b> {address}\n" if delivery_type == "delivery" and address else ""

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ–Ω—É—Å–∞—Ö
    bonus_text = f"üíé <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –±–æ–Ω—É—Å–æ–≤:</b> {bonus_used} ‚ÇΩ\n" if bonus_used > 0 else ""

    order_summary = (
        "üìã <b>–°–≤–æ–¥–∫–∞ –∑–∞–∫–∞–∑–∞</b>\n\n"
        f"üë§ <b>–ò–º—è:</b> {data.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {data.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"üìç <b>–°–ø–æ—Å–æ–±:</b> {delivery_type_text}\n"
        f"{address_text}"
        f"üìÖ <b>–î–∞—Ç–∞:</b> {data.get('delivery_date', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
        f"‚è∞ <b>–í—Ä–µ–º—è:</b> {data.get('delivery_time', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"üí≥ <b>–û–ø–ª–∞—Ç–∞:</b> {get_payment_method_name(data.get('payment_method', ''))}\n"
        f"üí∞ <b>–°—É–º–º–∞ —Ç–æ–≤–∞—Ä–æ–≤:</b> {original_products_total} ‚ÇΩ\n"
        f"{discount_text}"
        f"{bonus_text}"
        f"üí∞ <b>–ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ:</b> {total} ‚ÇΩ\n\n"
        "‚úÖ –í—Å–µ –≤–µ—Ä–Ω–æ? –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑:"
    )

    confirm_kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="confirm_order")],
        [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="cancel_order")]
    ])

    await callback.message.answer(order_summary, reply_markup=confirm_kb, parse_mode="HTML")


@router.callback_query(F.data == "pay_manager")
async def process_manager_payment(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
    try:
        await state.update_data(payment_method='manager')
        data = await state.get_data()

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
        cart_items = get_cart(callback.from_user.id)
        if not cart_items:
            await callback.answer("‚ùå –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞")
            return

        # –ü–†–ê–í–ò–õ–¨–ù–´–ô –†–ê–°–ß–ï–¢ –° –£–ß–ï–¢–û–ú –ë–û–ù–£–°–û–í
        products_total = sum(item['price'] * item['quantity'] for item in cart_items)
        delivery_type = data.get('delivery_type', 'delivery')
        delivery_cost = 0 if delivery_type == "pickup" else 300
        bonus_used = data.get('bonus_used', 0)  # ‚Üê –ü–û–õ–£–ß–ê–ï–ú –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ù–´–ï –ë–û–ù–£–°–´

        # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç –∏—Ç–æ–≥–æ–≤–æ–π —Å—É–º–º—ã
        total = max(0, products_total - bonus_used + delivery_cost)

        # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
        order_id = create_order(
            user_id=callback.from_user.id,
            name=data.get('name', ''),
            phone=data.get('phone', ''),
            address=data.get('address', ''),
            delivery_date=data.get('delivery_date', ''),
            delivery_time=data.get('delivery_time', ''),
            payment='manager',
            delivery_cost=delivery_cost,
            delivery_type=delivery_type,
            bonus_used=bonus_used  # ‚Üê –ü–ï–†–ï–î–ê–ï–ú –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ù–´–ï –ë–û–ù–£–°–´
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É
        delivery_type_text = "–°–∞–º–æ–≤—ã–≤–æ–∑" if delivery_type == "pickup" else "–î–æ—Å—Ç–∞–≤–∫–∞"
        admin_msg = (
            "üë§ <b>–ù–û–í–´–ô –ó–ê–ö–ê–ó –ß–ï–†–ï–ó –ú–ï–ù–ï–î–ñ–ï–†–ê</b>\n\n"
            f"üì¶ –ó–∞–∫–∞–∑ #: {order_id}\n"
            f"üë§ –ò–º—è: {data.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {data.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            f"üìç –°–ø–æ—Å–æ–±: {delivery_type_text}\n"
        )

        if delivery_type == "delivery":
            admin_msg += f"üè† –ê–¥—Ä–µ—Å: {data.get('address', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"

        # –î–û–ë–ê–í–õ–Ø–ï–ú –ò–ù–§–û–†–ú–ê–¶–ò–Æ –û –ë–û–ù–£–°–ê–• –í –£–í–ï–î–û–ú–õ–ï–ù–ò–ï
        if bonus_used > 0:
            admin_msg += f"üíé –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –±–æ–Ω—É—Å–æ–≤: {bonus_used} ‚ÇΩ\n"

        admin_msg += (
            f"üìÖ –î–∞—Ç–∞: {data.get('delivery_date', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
            f"‚è∞ –í—Ä–µ–º—è: {data.get('delivery_time', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"üí∞ –°—É–º–º–∞: {total} ‚ÇΩ\n\n"  # ‚Üê –¢–ï–ü–ï–†–¨ –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –°–£–ú–ú–ê
            f"üõí –¢–æ–≤–∞—Ä—ã:\n"
        )

        for item in cart_items:
            admin_msg += f"‚Ä¢ {item['name']} √ó{item['quantity']} - {item['price'] * item['quantity']} ‚ÇΩ\n"

        await notify_admins(admin_msg)

        await callback.message.answer(
            f"‚úÖ <b>–ó–∞–∫–∞–∑ #{order_id} –æ—Ñ–æ—Ä–º–ª–µ–Ω!</b>\n\n"
            f"üìû –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.\n"
            f"üí∞ –°—É–º–º–∞: {total} ‚ÇΩ\n"
            f"üìÖ {'–ü–æ–ª—É—á–µ–Ω–∏–µ' if delivery_type == 'pickup' else '–î–æ—Å—Ç–∞–≤–∫–∞'}: "
            f"{data.get('delivery_date', '')} –≤ {data.get('delivery_time', '')}",
            parse_mode="HTML"
        )

        await state.clear()

    except Exception as e:
        logger.error(f"Error in process_manager_payment: {e}")
        await callback.message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º."
        )

    await callback.answer()


@router.callback_query(F.data == "check_payment_status")
async def check_user_payment_status(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
    data = await state.get_data()
    payment_id = data.get('payment_id')

    if not payment_id:
        await callback.answer("‚ùå –î–∞–Ω–Ω—ã–µ –æ –ø–ª–∞—Ç–µ–∂–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
    status = await payment_manager.check_payment_status(payment_id)

    if status == 'succeeded':
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ
        update_payment_status(payment_id, status)

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –∏–∑ –±–∞–∑—ã
        payment_info = get_payment(payment_id)
        if payment_info and payment_info.get('metadata'):
            try:
                metadata = json.loads(payment_info['metadata'])
                order_data = metadata.get('order_data', {})
            except:
                order_data = data
        else:
            order_data = data

        # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
        order_id = create_order(
            callback.from_user.id,
            order_data.get('name', data.get('name', '')),
            order_data.get('phone', data.get('phone', '')),
            order_data.get('address', data.get('address', '')),
            order_data.get('delivery_date', data.get('delivery_date', '')),
            order_data.get('delivery_time', data.get('delivery_time', '')),
            order_data.get('payment_method', data.get('payment_method', 'online')),
            order_data.get('delivery_cost', data.get('delivery_cost', 0))
        )

        await callback.message.answer(
            f"‚úÖ <b>–û–ø–ª–∞—Ç–∞ –ø—Ä–∏–Ω—è—Ç–∞!</b>\n\n"
            f"–ó–∞–∫–∞–∑ #{order_id} —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω.\n"
            f"–ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç.",
            parse_mode="HTML"
        )

        await state.clear()

    elif status == 'pending':
        await callback.answer("‚è≥ –ü–ª–∞—Ç–µ–∂ –µ—â–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É.")

    elif status == 'canceled':
        await callback.answer("‚ùå –ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

    else:
        await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


# –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ pending –ø–ª–∞—Ç–µ–∂–µ–π
async def check_pending_payments():
    """–§–æ–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ pending –ø–ª–∞—Ç–µ–∂–µ–π –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç"""
    while True:
        try:
            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ pending –ø–ª–∞—Ç–µ–∂–µ–π
            # –ù–∞–ø—Ä–∏–º–µ—Ä: –ø–æ–∏—Å–∫ –ø–ª–∞—Ç–µ–∂–µ–π —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'pending' —Å—Ç–∞—Ä—à–µ 10 –º–∏–Ω—É—Ç
            logger.info("Checking pending payments...")
            await asyncio.sleep(300)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç

        except Exception as e:
            logger.error(f"Pending payments check failed: {e}")
            await asyncio.sleep(60)  # –ñ–¥–µ–º –º–∏–Ω—É—Ç—É –ø—Ä–∏ –æ—à–∏–±–∫–µ


async def show_order_summary_from_message(callback: CallbackQuery, state: FSMContext, total: float):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–≤–æ–¥–∫—É –∑–∞–∫–∞–∑–∞ –∏ –∫–Ω–æ–ø–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    data = await state.get_data()

    delivery_type = data.get('delivery_type', 'delivery')
    delivery_type_text = "–°–∞–º–æ–≤—ã–≤–æ–∑" if delivery_type == "pickup" else "–î–æ—Å—Ç–∞–≤–∫–∞"

    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞
    address = data.get('address', '')
    address_text = f"üè† <b>–ê–¥—Ä–µ—Å:</b> {address}\n" if delivery_type == "delivery" and address else ""

    order_summary = (
        "üìã <b>–°–≤–æ–¥–∫–∞ –∑–∞–∫–∞–∑–∞</b>\n\n"
        f"üë§ <b>–ò–º—è:</b> {data.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {data.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"üìç <b>–°–ø–æ—Å–æ–±:</b> {delivery_type_text}\n"
        f"{address_text}"
        f"üìÖ <b>–î–∞—Ç–∞:</b> {data.get('delivery_date', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
        f"‚è∞ <b>–í—Ä–µ–º—è:</b> {data.get('delivery_time', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"üí≥ <b>–û–ø–ª–∞—Ç–∞:</b> {get_payment_method_name(data.get('payment_method', ''))}\n\n"
        f"üí∞ <b>–ò—Ç–æ–≥–æ: {total} ‚ÇΩ</b>\n\n"
        "‚úÖ –í—Å–µ –≤–µ—Ä–Ω–æ? –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑:"
    )

    confirm_kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="confirm_order")],
        [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="cancel_order")]
    ])

    await callback.message.answer(order_summary, reply_markup=confirm_kb, parse_mode="HTML")


@router.callback_query(F.data == "confirm_order")
async def confirm_order(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    user_id = callback.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –±–æ–Ω—É—Å–æ–≤
    bonus_used = data.get('bonus_used', 0)
    if bonus_used > 0:
        cart_items = get_cart(user_id)
        check = can_use_bonus(user_id, bonus_used, cart_items)

        if not check['can_use'] or check['actual_usable'] < bonus_used:
            await callback.message.answer(
                f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–æ–Ω—É—Å–æ–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è\n"
                f"–î–æ—Å—Ç—É–ø–Ω–æ: {check['available_bonus']} ‚ÇΩ\n"
                f"–ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å: {check['max_allowed']} ‚ÇΩ"
            )
            await callback.answer()
            return

    # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
    order_id = create_order(
        user_id,
        data['name'],
        data['phone'],
        data['address'],
        data['delivery_date'],
        data['delivery_time'],
        data['payment_method'],
        data.get('delivery_cost', 0),
        data.get('delivery_type', 'delivery'),
        bonus_used
    )

    if order_id == -1:
        await callback.message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–æ–Ω—É—Å–æ–≤."
        )
        await callback.answer()
        return

    # –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê - –£–ë–ï–î–ò–ú–°–Ø –ß–¢–û –ö–û–†–ó–ò–ù–ê –û–ß–ò–©–ï–ù–ê
    cart_after_order = get_cart(user_id)
    if cart_after_order:
        # –ï—Å–ª–∏ –∫–æ—Ä–∑–∏–Ω–∞ –Ω–µ –æ—á–∏—Å—Ç–∏–ª–∞—Å—å, –æ—á–∏—â–∞–µ–º –≤—Ä—É—á–Ω—É—é
        clear_cart(user_id)
        print(f"‚ö†Ô∏è –ö–æ—Ä–∑–∏–Ω–∞ –Ω–µ –æ—á–∏—Å—Ç–∏–ª–∞—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, –æ—á–∏—â–∞–µ–º –≤—Ä—É—á–Ω—É—é")

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞—á–∏—Å–ª–µ–Ω–Ω—ã—Ö –±–æ–Ω—É—Å–∞—Ö
    bonus_info = get_bonus_info(user_id)

    await callback.message.answer(
        f"üéâ –ó–∞–∫–∞–∑ #{order_id} –æ—Ñ–æ—Ä–º–ª–µ–Ω!\n"
        f"üíé –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –±–æ–Ω—É—Å–æ–≤: {bonus_used} ‚ÇΩ\n"
        f"üíé –ù–∞—á–∏—Å–ª–µ–Ω–æ –±–æ–Ω—É—Å–æ–≤: {bonus_info['current_bonus']} ‚ÇΩ\n"
        f"üí∞ –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞: {data.get('final_total', 0)} ‚ÇΩ"
    )

    await state.clear()
    await callback.answer()


# --- YOOKASSA ---
@router.callback_query(F.data == "pay_yookassa")
async def create_yookassa_payment(callback: CallbackQuery, state: FSMContext):
    if Payment is None:
        await callback.message.answer("‚ùå –ü–ª–∞—Ç–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        await callback.answer()
        return

    data = await state.get_data()
    user_id = callback.from_user.id
    cart = get_cart(user_id)
    total = sum(item['price'] * item['quantity'] for item in cart)
    payment_id = str(uuid.uuid4())

    try:
        payment = Payment.create({
            "amount": {"value": str(total), "currency": "RUB"},
            "confirmation": {
                "type": "redirect",
                "return_url": "https://t.me/Therry_Voyager"
            },
            "capture": True,
            "description": f"–ó–∞–∫–∞–∑ #{payment_id}",
            "metadata": {"user_id": user_id, "order_id": payment_id}
        }, idempotency_key=payment_id)

        confirmation_url = payment.confirmation.confirmation_url
        await state.update_data(payment_id=payment_id, payment_system="YooKassa")

        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=confirmation_url)],
            [InlineKeyboardButton(text="‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data="check_payment")]
        ])
        await callback.message.answer("üîó –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã:", reply_markup=kb)
    except Exception as e:
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –æ–ø–ª–∞—Ç—ã: {e}")
    await callback.answer()


@router.callback_query(F.data == "check_payment")
async def check_payment(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    method = data.get("payment_system", "–Ω–µ —É–∫–∞–∑–∞–Ω–æ")
    order_id = data.get("payment_id", "–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω")
    user_data = data

    # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
    order_id_db = create_order(
        callback.from_user.id,
        user_data.get('name', ''),
        user_data.get('phone', ''),
        user_data.get('address', ''),
        user_data.get('delivery_date', ''),
        user_data.get('delivery_time', ''),
        method,
        user_data.get('delivery_cost', 0)
    )

    await callback.message.answer(
        f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–∏–Ω—è—Ç–∞!\n"
        f"–°–∏—Å—Ç–µ–º–∞: {method}\n"
        f"ID –∑–∞–∫–∞–∑–∞: #{order_id_db}\n"
        "–ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."
    )
    await state.clear()
    await callback.answer()


# --- –ú–û–ò –ó–ê–ö–ê–ó–´ ---
@router.message(F.text == "üßæ –ú–æ–∏ –∑–∞–∫–∞–∑—ã")
async def my_orders(message: Message):
    orders = get_user_orders(message.from_user.id)
    if not orders:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.")
        return

    for o in orders:
        items_data = json.loads(o['items'])
        items = ", ".join([f"{item['name']} (√ó{item['quantity']})" for item in items_data])
        created_at = o['created_at'].split(".")[0].replace("T", " ")

        text = (
            f"üì¶ <b>–ó–∞–∫–∞–∑ #{o['id']}</b>\n"
            f"üìÖ {created_at}\n"
            f"üí∞ {o['total']} ‚ÇΩ\n"
            f"üõí {items}\n"
            f"üìä –°—Ç–∞—Ç—É—Å: {o['status']}"
        )

        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å", callback_data=f"repeat_{o['id']}")],
            [InlineKeyboardButton(text="üì¶ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ", callback_data=f"track_{o['id']}")]
        ])
        await message.answer(text, reply_markup=kb, parse_mode="HTML")


@router.callback_query(F.data.startswith("repeat_"))
async def repeat_order(callback: CallbackQuery):
    order_id = int(callback.data.split("_")[1])
    with sqlite3.connect(DB_PATH) as conn:
        conn.row_factory = sqlite3.Row
        cur = conn.cursor()
        cur.execute("SELECT items FROM orders WHERE id=? AND user_id=?", (order_id, callback.from_user.id))
        row = cur.fetchone()

    if not row:
        await callback.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    items = json.loads(row['items'])
    clear_cart(callback.from_user.id)

    for item in items:
        for _ in range(item['quantity']):
            add_to_cart(callback.from_user.id, item['id'])

    await callback.answer("‚úÖ –¢–æ–≤–∞—Ä—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –∫–æ—Ä–∑–∏–Ω—É!")
    await show_cart(callback.message)


@router.callback_query(F.data.startswith("track_"))
async def track_order(callback: CallbackQuery):
    order_id = callback.data.split("_")[1]

    with sqlite3.connect(DB_PATH) as conn:
        conn.row_factory = sqlite3.Row
        cur = conn.cursor()
        cur.execute("SELECT status, delivery_date, delivery_time FROM orders WHERE id=? AND user_id=?",
                    (order_id, callback.from_user.id))
        order = cur.fetchone()

    if not order:
        await callback.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    status_text = {
        "new": "üïí –ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç",
        "processing": "üì¶ –§–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è",
        "on_way": "üöö –í –ø—É—Ç–∏",
        "delivered": "‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω",
        "cancelled": "‚ùå –û—Ç–º–µ–Ω—ë–Ω"
    }.get(order['status'], "üìä –°—Ç–∞—Ç—É—Å –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω")

    await callback.message.answer(
        f"üì¶ <b>–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ #{order_id}</b>\n\n"
        f"üìå –°—Ç–∞—Ç—É—Å: {status_text}\n"
        f"üìÖ –î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: {order['delivery_date']}\n"
        f"‚è∞ –í—Ä–µ–º—è: {order['delivery_time']}\n\n"
        "üìû –î–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º",
        parse_mode="HTML"
    )
    await callback.answer()


# --- –°–ò–°–¢–ï–ú–ê –õ–û–Ø–õ–¨–ù–û–°–¢–ò ---
@router.callback_query(F.data == "my_bonus")
@router.message(F.text == "üíé –ú–æ–∏ –±–æ–Ω—É—Å—ã")
async def show_bonus_info(event: Union[CallbackQuery, Message]):
    user_id = event.from_user.id

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à—ë–ª –∑–∞–ø—Ä–æ—Å
    is_callback = isinstance(event, CallbackQuery)
    message = event.message if is_callback else event

    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ–Ω—É—Å–∞—Ö"""
    bonus_info = get_bonus_info(user_id)

    text = (
        f"üíé <b>–í–∞—à–∞ –±–æ–Ω—É—Å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞</b>\n\n"
        f"üí∞ –í—Å–µ–≥–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ: {bonus_info['total_spent']} ‚ÇΩ\n"
        f"üéÅ –î–æ—Å—Ç—É–ø–Ω–æ –±–æ–Ω—É—Å–æ–≤: {bonus_info['current_bonus']} ‚ÇΩ\n"
        f"üèÜ –í—Å–µ–≥–æ –Ω–∞—á–∏—Å–ª–µ–Ω–æ: {bonus_info['total_bonus_earned']} ‚ÇΩ\n\n"
        "üíé <b>–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–æ–Ω—É—Å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞?</b>\n\n"

        "üéÅ <b>–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –±–æ–Ω—É—Å–æ–≤:</b>\n"
        "‚Ä¢ –ó–∞ –∫–∞–∂–¥—ã–π –∑–∞–∫–∞–∑ –Ω–∞—á–∏—Å–ª—è–µ–º <b>5% –æ—Ç —Å—É–º–º—ã</b> –≤ –±–æ–Ω—É—Å–∞—Ö\n"
        "‚Ä¢ –ù–∞–ø—Ä–∏–º–µ—Ä: –∑–∞–∫–∞–∑ –Ω–∞ 2000 ‚ÇΩ = 100 –±–æ–Ω—É—Å–æ–≤ (2000 √ó 5%)\n"
        "‚Ä¢ –ë–æ–Ω—É—Å—ã –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞\n\n"

        "üí∞ <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ–Ω—É—Å–æ–≤:</b>\n"
        "‚Ä¢ 1 –±–æ–Ω—É—Å = 1 —Ä—É–±–ª—å —Å–∫–∏–¥–∫–∏\n"
        "‚Ä¢ –ú–æ–∂–Ω–æ –æ–ø–ª–∞—Ç–∏—Ç—å <b>–¥–æ 30% —Å—Ç–æ–∏–º–æ—Å—Ç–∏</b> —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–∫–∞–∑–∞\n"
        "‚Ä¢ –ù–∞–ø—Ä–∏–º–µ—Ä: –∑–∞–∫–∞–∑ –Ω–∞ 3000 ‚ÇΩ ‚Üí –º–∞–∫—Å. 900 –±–æ–Ω—É—Å–æ–≤ (30%)\n\n"

        "üéâ <b>–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ:</b>\n"
        "‚Ä¢ <b>10% —Å–∫–∏–¥–∫–∞ –Ω–∞ –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑!</b> (–¥–µ–π—Å—Ç–≤—É–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)\n\n"

        "üìã <b>–ü—Ä–∏–º–µ—Ä —Ä–∞—Å—á–µ—Ç–∞:</b>\n"
        "‚Ä¢ –°—É–º–º–∞ –∑–∞–∫–∞–∑–∞: 5000 ‚ÇΩ\n"
        "‚Ä¢ –ú–∞–∫—Å. –±–æ–Ω—É—Å–æ–≤ –∫ —Å–ø–∏—Å–∞–Ω–∏—é: 1500 ‚ÇΩ (30%)\n"
        "‚Ä¢ –ï—Å–ª–∏ —É –≤–∞—Å 2000 –±–æ–Ω—É—Å–æ–≤ ‚Üí –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ 1500 ‚ÇΩ\n"
        "‚Ä¢ –ò—Ç–æ–≥ –∫ –æ–ø–ª–∞—Ç–µ: 3500 ‚ÇΩ (5000 - 1500)\n"
        "‚Ä¢ + –Ω–∞—á–∏—Å–ª–∏—Ç—Å—è 175 –±–æ–Ω—É—Å–æ–≤ (5% –æ—Ç 3500 ‚ÇΩ)\n\n"

        "‚≠ê <b>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</b>\n"
        "‚Ä¢ –ë–æ–Ω—É—Å—ã –Ω–µ —Å–≥–æ—Ä–∞—é—Ç\n"
        "‚Ä¢ –ù–∞–∫–æ–ø–ª–µ–Ω–∏—è –≤–∏–¥–Ω—ã —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∑–∞–∫–∞–∑–∞\n"
        "‚Ä¢ –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —á–∞—Å—Ç–∏—á–Ω–æ\n"
        "‚Ä¢ –î–µ–π—Å—Ç–≤—É—é—Ç –Ω–∞ –≤—Å–µ —Ç–æ–≤–∞—Ä—ã\n\n"

        "üí° <i>–ë–æ–Ω—É—Å—ã –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ –∑–∞–∫–∞–∑–∞!</i>"
    )

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìä –ò—Å—Ç–æ—Ä–∏—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π", callback_data="bonus_history")]
    ])

    if is_callback:
        await message.answer(text, parse_mode="HTML", reply_markup=kb)
        await event.answer()
    else:
        await message.answer(text, parse_mode="HTML", reply_markup=kb)


@router.callback_query(F.data == "bonus_history")
async def show_bonus_history(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–æ–Ω—É—Å–∞–º–∏"""
    history = get_loyalty_history(callback.from_user.id, 10)
    if not history:
        await callback.message.answer("üìä –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–æ–Ω—É—Å–∞–º–∏ –ø—É—Å—Ç–∞")
        await callback.answer()
        return

    text = "üìä <b>–ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–æ–Ω—É—Å–∞–º–∏:</b>\n\n"
    for operation in history:
        change = operation['points_change']
        sign = "‚ûï" if change > 0 else "‚ûñ"
        date = operation['created_at'].split(".")[0] if isinstance(operation['created_at'], str) else \
            str(operation['created_at']).split(".")[0]
        date = date.replace("T", " ")

        text += (
            f"{sign} <b>{abs(change)} ‚ÇΩ</b>\n"
            f"üìù {operation['reason']}\n"
            f"üìÖ {date}\n"
            f"üíé –û—Å—Ç–∞—Ç–æ–∫: {operation['remaining_points']} ‚ÇΩ\n\n"
        )

    await callback.message.answer(text, parse_mode="HTML")
    await callback.answer()


@router.callback_query(F.data.in_(["pay_online", "pay_sbp", "pay_cash"]))
async def process_payment_with_bonus(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–Ω—É—Å—ã –ø–µ—Ä–µ–¥ –æ–ø–ª–∞—Ç–æ–π"""
    bonus_info = get_bonus_info(callback.from_user.id)

    if bonus_info['current_bonus'] > 0:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä–∑–∏–Ω—ã –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –º–∞–∫—Å–∏–º—É–º–∞
        cart_items = get_cart(callback.from_user.id)
        products_total = sum(item['price'] * item['quantity'] for item in cart_items)
        max_bonus_allowed = int(products_total * 0.3)
        available_bonus = min(bonus_info['current_bonus'], max_bonus_allowed)

        if available_bonus > 0:
            kb = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üíé –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–Ω—É—Å—ã", callback_data="use_bonus_points")],
                [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –±–µ–∑ –±–æ–Ω—É—Å–æ–≤", callback_data="skip_bonus_points")]
            ])

            await callback.message.answer(
                f"üíé –£ –≤–∞—Å –µ—Å—Ç—å {bonus_info['current_bonus']} –±–æ–Ω—É—Å–æ–≤\n"
                f"–ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å: {available_bonus} ‚ÇΩ (30% –æ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–æ–≤)\n"
                f"–°—É–º–º–∞ —Ç–æ–≤–∞—Ä–æ–≤: {products_total} ‚ÇΩ √ó 30% = {max_bonus_allowed} ‚ÇΩ\n\n"
                "–•–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–Ω—É—Å—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã?",
                reply_markup=kb
            )
            await state.set_state(OrderState.use_bonus)
            return

    # –ï—Å–ª–∏ –±–æ–Ω—É—Å–æ–≤ –Ω–µ—Ç –∏–ª–∏ –Ω–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ–±—ã—á–Ω–æ–π –æ–ø–ª–∞—Ç–µ
    await process_online_payment(callback, state)


@router.callback_query(F.data == "skip_bonus_points", OrderState.use_bonus)
async def skip_bonus_usage(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ–Ω—É—Å–æ–≤"""
    await state.update_data(bonus_used=0)
    await callback.message.answer("üí≥ –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–ø–ª–∞—Ç—É –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ–Ω—É—Å–æ–≤")

    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –æ–ø–ª–∞—Ç—ã
    data = await state.get_data()
    payment_method = data.get('payment_method', 'online')
    if payment_method in ['online', 'sbp']:
        await process_online_payment(callback, state)
    else:
        await process_cash_payment(callback, state)
    await callback.answer()


@router.callback_query(F.data == "use_bonus_points", OrderState.use_bonus)
async def ask_bonus_amount(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–Ω—É—Å–æ–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
    bonus_info = get_bonus_info(callback.from_user.id)
    cart_items = get_cart(callback.from_user.id)
    products_total = sum(item['price'] * item['quantity'] for item in cart_items)
    max_bonus_allowed = int(products_total * 0.3)

    available_bonus = min(bonus_info['current_bonus'], max_bonus_allowed)

    await callback.message.answer(
        f"üíé –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–Ω—É—Å–æ–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è\n"
        f"–î–æ—Å—Ç—É–ø–Ω–æ: {available_bonus} ‚ÇΩ (–º–∞–∫—Å–∏–º—É–º 30% –æ—Ç –∑–∞–∫–∞–∑–∞)\n"
        f"–í–∞—à –±–∞–ª–∞–Ω—Å: {bonus_info['current_bonus']} ‚ÇΩ"
    )


# –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ—Å–ª–µ –¥—Ä—É–≥–∏—Ö payment –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
@router.callback_query(F.data.in_(["pay_online", "pay_sbp", "pay_cash"]))
async def ask_about_bonus_usage(callback: CallbackQuery, state: FSMContext):
    """–°–ø—Ä–∞—à–∏–≤–∞–µ–º, —Ö–æ—á–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–Ω—É—Å—ã"""
    payment_method = callback.data.split("_")[1]
    await state.update_data(payment_method=payment_method)

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –±–æ–Ω—É—Å–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    bonus_info = get_bonus_info(callback.from_user.id)
    data = await state.get_data()
    products_total = data.get('products_total', 0)

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –±–æ–Ω—É—Å—ã (30% –æ—Ç —Å—É–º–º—ã)
    max_bonus_allowed = int(products_total * 0.3)
    available_bonus = min(bonus_info['current_bonus'], max_bonus_allowed)

    if available_bonus > 0:
        kb = bonus_usage_keyboard(available_bonus, max_bonus_allowed)

        await callback.message.answer(
            f"üíé –£ –≤–∞—Å –µ—Å—Ç—å {bonus_info['current_bonus']}‚ÇΩ –±–æ–Ω—É—Å–æ–≤\n"
            f"–ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å: {available_bonus}‚ÇΩ (30% –æ—Ç –∑–∞–∫–∞–∑–∞)\n\n"
            "–•–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–Ω—É—Å—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã?",
            reply_markup=kb
        )
        await state.set_state(OrderState.use_bonus)
        await callback.answer()
        return

    # –ï—Å–ª–∏ –±–æ–Ω—É—Å–æ–≤ –Ω–µ—Ç, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ–±—ã—á–Ω–æ–π –æ–ø–ª–∞—Ç–µ
    await process_payment_method(callback, state)
    await callback.answer()


@router.callback_query(F.data == "use_bonus_yes", OrderState.use_bonus)
async def use_bonus_yes(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–Ω—É—Å—ã"""
    bonus_info = get_bonus_info(callback.from_user.id)
    data = await state.get_data()
    products_total = data.get('products_total', 0)
    max_bonus_allowed = int(products_total * 0.3)
    available_bonus = min(bonus_info['current_bonus'], max_bonus_allowed)

    await callback.message.answer(
        f"üíé –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–Ω—É—Å–æ–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è\n"
        f"–î–æ—Å—Ç—É–ø–Ω–æ: {available_bonus}‚ÇΩ (–º–∞–∫—Å–∏–º—É–º 30% –æ—Ç –∑–∞–∫–∞–∑–∞)\n"
        f"–í–∞—à –±–∞–ª–∞–Ω—Å: {bonus_info['current_bonus']}‚ÇΩ"
    )
    await state.set_state(OrderState.bonus_amount)
    await callback.answer()


@router.callback_query(F.data == "use_bonus_no", OrderState.use_bonus)
async def use_bonus_no(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Ö–æ—á–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–Ω—É—Å—ã"""
    await state.update_data(bonus_used=0)
    await callback.message.answer("üí≥ –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–ø–ª–∞—Ç—É –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ–Ω—É—Å–æ–≤")
    await process_payment_method(callback, state)
    await callback.answer()


async def process_payment_method(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã"""
    data = await state.get_data()
    payment_method = data.get('payment_method')

    if payment_method in ['online', 'sbp']:
        await process_online_payment(callback, state)
    elif payment_method == 'cash':
        await process_cash_payment(callback, state)


@router.message(OrderState.bonus_amount)
async def process_bonus_amount(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –±–æ–Ω—É—Å–æ–≤"""
    try:
        bonus_to_use = int(message.text)
        bonus_info = get_bonus_info(message.from_user.id)
        data = await state.get_data()
        products_total = data.get('products_total', 0)
        max_bonus_allowed = int(products_total * 0.3)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
        if bonus_to_use <= 0:
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ:")
            return

        if bonus_to_use > bonus_info['current_bonus']:
            await message.answer(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–æ–Ω—É—Å–æ–≤. –î–æ—Å—Ç—É–ø–Ω–æ: {bonus_info['current_bonus']}‚ÇΩ")
            return

        if bonus_to_use > max_bonus_allowed:
            await message.answer(f"‚ùå –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–µ –±–æ–ª–µ–µ {max_bonus_allowed}‚ÇΩ (30% –æ—Ç –∑–∞–∫–∞–∑–∞)")
            return

        await state.update_data(bonus_used=bonus_to_use)

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—É–º–º—É
        final_total = products_total - bonus_to_use
        await state.update_data(final_total=final_total)

        await message.answer(f"‚úÖ –ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ {bonus_to_use}‚ÇΩ –±–æ–Ω—É—Å–æ–≤\n"
                             f"üí∞ –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {final_total}‚ÇΩ")

        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –æ–ø–ª–∞—Ç—ã
        await process_payment_method(message, state)

    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. –ù–∞–ø—Ä–∏–º–µ—Ä: 500")


@router.callback_query(F.data.startswith("use_actual_"))
async def use_actual_bonus(callback: CallbackQuery, state: FSMContext):
    """–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–Ω—É—Å–æ–≤"""
    actual_bonus = int(callback.data.split("_")[2])
    await state.update_data(bonus_used=actual_bonus)

    data = await state.get_data()
    cart_items = get_cart(callback.from_user.id)
    delivery_cost = data.get('delivery_cost', 0)

    order_calc = calculate_order_total(cart_items, delivery_cost, actual_bonus)

    await callback.message.answer(
        f"‚úÖ –ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ {actual_bonus} –±–æ–Ω—É—Å–æ–≤\n\n"
        f"üìä –†–∞—Å—á–µ—Ç –∑–∞–∫–∞–∑–∞:\n"
        f"‚Ä¢ –°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–æ–≤: {order_calc['products_total']} ‚ÇΩ\n"
        f"‚Ä¢ –î–æ—Å—Ç–∞–≤–∫–∞: {delivery_cost} ‚ÇΩ\n"
        f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –±–æ–Ω—É—Å–æ–≤: {order_calc['bonus_used']} ‚ÇΩ\n"
        f"‚Ä¢ –ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ: {order_calc['final_total']} ‚ÇΩ"
    )

    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –æ–ø–ª–∞—Ç—ã
    payment_method = data.get('payment_method', 'online')
    if payment_method in ['online', 'sbp']:
        await process_online_payment(callback, state)
    else:
        await process_cash_payment(callback, state)

    await callback.answer()


@router.callback_query(F.data == "reenter_bonus")
async def reenter_bonus(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –±–æ–Ω—É—Å–æ–≤"""
    bonus_info = get_bonus_info(callback.from_user.id)
    cart_items = get_cart(callback.from_user.id)
    products_total = sum(item['price'] * item['quantity'] for item in cart_items)
    max_bonus_allowed = int(products_total * 0.3)

    await callback.message.answer(
        f"üíé –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–Ω—É—Å–æ–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è\n"
        f"–î–æ—Å—Ç—É–ø–Ω–æ: {bonus_info['current_bonus']} ‚ÇΩ\n"
        f"–ú–∞–∫—Å–∏–º—É–º: {max_bonus_allowed} ‚ÇΩ (30% –æ—Ç {products_total} ‚ÇΩ)"
    )
    await callback.answer()


@router.callback_query(F.data == "reenter_bonus")
async def reenter_bonus(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –±–æ–Ω—É—Å–æ–≤"""
    bonus_info = get_bonus_info(callback.from_user.id)
    cart_items = get_cart(callback.from_user.id)
    products_total = sum(item['price'] * item['quantity'] for item in cart_items)
    max_bonus_allowed = int(products_total * 0.3)

    await callback.message.answer(
        f"üíé –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–Ω—É—Å–æ–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è\n"
        f"–î–æ—Å—Ç—É–ø–Ω–æ: {bonus_info['current_bonus']} ‚ÇΩ\n"
        f"–ú–∞–∫—Å–∏–º—É–º: {max_bonus_allowed} ‚ÇΩ (30% –æ—Ç {products_total} ‚ÇΩ)"
    )
    await callback.answer()


@router.callback_query(F.data == "loyalty_history")
async def show_loyalty_history(callback: CallbackQuery):
    history = get_loyalty_history(callback.from_user.id, 10)
    if not history:
        await callback.message.answer("üìä –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π –ø—É—Å—Ç–∞")
        return

    text = "üìä <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –±–∞–ª–ª–∞–º–∏:</b>\n\n"
    for operation in history:
        change = operation['points_change']
        sign = "‚ûï" if change > 0 else "‚ûñ"
        date = operation['created_at'].split(".")[0] if isinstance(operation['created_at'], str) else \
            str(operation['created_at']).split(".")[0]

        text += (
            f"{sign} <b>{abs(change)} –±–∞–ª–ª–æ–≤</b>\n"
            f"üìù {operation['reason']}\n"
            f"üìÖ {date.replace('T', ' ')}\n"
            f"üíé –û—Å—Ç–∞—Ç–æ–∫: {operation['remaining_points']} –±–∞–ª–ª–æ–≤\n\n"
        )

    await callback.message.answer(text, parse_mode="HTML")
    await callback.answer()


# --- –û–§–û–†–ú–õ–ï–ù–ò–ï –ó–ê–ö–ê–ó–ê –° –ë–ê–õ–õ–ê–ú–ò ---
@router.callback_query(F.data == "use_bonus")
async def use_bonus_handler(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ–Ω—É—Å–æ–≤"""
    user_id = callback.from_user.id
    cart_items = get_cart(user_id)
    products_total = sum(item['price'] * item['quantity'] for item in cart_items)

    bonus_info = get_bonus_info(user_id)
    max_bonus_allowed = int(products_total * 0.3)
    available_bonus = min(bonus_info['current_bonus'], max_bonus_allowed)

    await callback.message.answer(
        f"üíé <b>–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –±–æ–Ω—É—Å–æ–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è</b>\n\n"
        f"–î–æ—Å—Ç—É–ø–Ω–æ: {available_bonus}‚ÇΩ\n"
        f"–ú–∞–∫—Å–∏–º—É–º –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å: {max_bonus_allowed}‚ÇΩ\n\n"
        f"–ü—Ä–∏–º–µ—Ä: 500 (–¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è 500‚ÇΩ –±–æ–Ω—É—Å–æ–≤)",
        parse_mode="HTML"
    )
    await state.set_state(OrderState.bonus_amount)
    await callback.answer()


@router.callback_query(F.data == "skip_bonus")
async def skip_bonus_handler(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ–Ω—É—Å–æ–≤"""
    await callback.message.answer("üë§ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
    await state.set_state(OrderState.name)
    await callback.answer()


@router.callback_query(F.data.startswith("pay_"))
async def process_payment(callback: CallbackQuery, state: FSMContext):
    payment_method = callback.data.split("_")[1]
    await state.update_data(payment_method=payment_method)

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    data = await state.get_data()
    cart_items = get_cart(callback.from_user.id)
    products_total = sum(item['price'] * item['quantity'] for item in cart_items)
    delivery_cost = data.get('delivery_cost', 0)
    total = products_total + delivery_cost

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–æ–Ω—É—Å—ã
    bonus_info = get_bonus_info(callback.from_user.id)
    available_bonus = bonus_info['current_bonus']
    max_bonus_allowed = int(products_total * 0.3)  # –ú–∞–∫—Å–∏–º—É–º 30% –æ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–æ–≤

    if available_bonus > 0 and max_bonus_allowed > 0:
        usable_bonus = min(available_bonus, max_bonus_allowed)
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=f"‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å {usable_bonus} ‚ÇΩ", callback_data=f"use_bonus_{usable_bonus}")],
            [InlineKeyboardButton(text="‚ùå –ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å", callback_data="skip_bonus")]
        ])
        await callback.message.answer(
            f"–£ –≤–∞—Å –µ—Å—Ç—å {available_bonus} ‚ÇΩ –±–æ–Ω—É—Å–æ–≤.\n"
            f"–ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–æ {max_bonus_allowed} ‚ÇΩ (30% –æ—Ç –∑–∞–∫–∞–∑–∞).\n"
            f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å {usable_bonus} ‚ÇΩ?",
            reply_markup=kb
        )
    else:
        # –ï—Å–ª–∏ –±–æ–Ω—É—Å–æ–≤ –Ω–µ—Ç ‚Äî —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É
        await show_order_summary(callback, state, total)
        await callback.answer()


@router.callback_query(F.data.in_(["pay_online", "pay_sbp", "pay_cash"]))
async def process_payment_with_points(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∞–ª–ª—ã –ø–µ—Ä–µ–¥ –æ–ø–ª–∞—Ç–æ–π"""
    loyalty_info = get_loyalty_info(callback.from_user.id)

    if loyalty_info['current_points'] > 0:
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üíé –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∞–ª–ª—ã", callback_data="use_loyalty_points")],
            [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –±–µ–∑ –±–∞–ª–ª–æ–≤", callback_data="skip_loyalty_points")]
        ])

        await callback.message.answer(
            f"üíé –£ –≤–∞—Å –µ—Å—Ç—å {loyalty_info['current_points']} –±–∞–ª–ª–æ–≤\n"
            f"–≠—Ç–æ ‚âà {loyalty_info['current_points']} ‚ÇΩ —Å–∫–∏–¥–∫–∏\n\n"
            "–•–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∞–ª–ª—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã?",
            reply_markup=kb
        )
        await state.set_state(OrderState.use_bonus)
    else:
        await process_online_payment(callback, state)


@router.callback_query(F.data == "use_loyalty_points", OrderState.use_bonus)
async def ask_points_amount(callback: CallbackQuery, state: FSMContext):
    loyalty_info = get_loyalty_info(callback.from_user.id)
    await callback.message.answer(
        f"üíé –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è\n"
        f"–î–æ—Å—Ç—É–ø–Ω–æ: {loyalty_info['current_points']} –±–∞–ª–ª–æ–≤"
    )


@router.message(OrderState.use_bonus)
async def process_points_amount(message: Message, state: FSMContext):
    try:
        points_to_use = int(message.text)
        loyalty_info = get_loyalty_info(message.from_user.id)

        if points_to_use <= 0 or points_to_use > loyalty_info['current_points']:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            return

        await state.update_data(points_used=points_to_use)
        await message.answer(f"‚úÖ –ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ {points_to_use} –±–∞–ª–ª–æ–≤")

        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –æ–ø–ª–∞—Ç—ã
        data = await state.get_data()
        if data.get('payment_method') in ['online', 'sbp']:
            await process_online_payment(message, state)
        else:
            await process_cash_payment(message, state)

    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. –ù–∞–ø—Ä–∏–º–µ—Ä: 100")


# --- –ê–î–ú–ò–ù –ö–û–ú–ê–ù–î–´ ---

@router.message(Command("help"))
async def help_command(message: Message):
    """–ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"""
    if is_admin(message.from_user.id):
        help_text = (
            "üëë <b>–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</b>\n\n"
            "‚Ä¢ /admin - –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
            "‚Ä¢ /add - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä\n"
            "‚Ä¢ /mark_delivered - –û—Ç–º–µ—Ç–∏—Ç—å –∑–∞–∫–∞–∑ –∫–∞–∫ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π\n"
            "‚Ä¢ /reviews_debug - –ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç–∑—ã–≤–æ–≤\n"
            "‚Ä¢ /myid - –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–π ID\n"
            "‚Ä¢ /clear_my_cart - –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É\n"
            "‚Ä¢ /reset_bonus - –°–±—Ä–æ—Å–∏—Ç—å –±–æ–Ω—É—Å—ã\n"
            "‚Ä¢ /pending_prices - –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É, –∫–æ—Ç–æ—Ä—ã–π –ø–æ –∑–∞–ø—Ä–æ—Å—É\n"

            "üìä <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏:</b>\n"
            "‚Ä¢ üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏\n"
            "‚Ä¢ ‚≠ê –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞–º–∏\n"
            "‚Ä¢ üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞–≥–∞–∑–∏–Ω–∞\n"
            "‚Ä¢ üíé –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ–Ω—É—Å–∞–º–∏\n\n"

            "üí° <i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è</i>"
        )
    else:
        help_text = (
            "üå∏ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n\n"
            "‚Ä¢ /start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
            "‚Ä¢ /myid - –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–π ID\n"
            "‚Ä¢ /clear_my_cart - –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É\n"
            "‚Ä¢ /help - –ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º\n\n"

            "üì± <b>–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é:</b>\n"
            "‚Ä¢ üå∏ –ö–∞—Ç–∞–ª–æ–≥ - –ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–æ–≤–∞—Ä–æ–≤\n"
            "‚Ä¢ üöö –î–æ—Å—Ç–∞–≤–∫–∞ - –£—Å–ª–æ–≤–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏\n"
            "‚Ä¢ üìû –ú–µ–Ω–µ–¥–∂–µ—Ä - –°–≤—è–∑—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º\n"
            "‚Ä¢ üìç –ù–∞ –∫–∞—Ä—Ç–µ - –ê–¥—Ä–µ—Å –º–∞–≥–∞–∑–∏–Ω–∞\n"
            "‚Ä¢ üéÅ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç - –ü–æ–¥–∞—Ä–æ—á–Ω—ã–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã\n"
            "‚Ä¢ ‚≠ê –û—Ç–∑—ã–≤—ã - –û—Ç–∑—ã–≤—ã –∫–ª–∏–µ–Ω—Ç–æ–≤\n"
            "‚Ä¢ üõí –ö–æ—Ä–∑–∏–Ω–∞ - –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞\n"
            "‚Ä¢ üßæ –ú–æ–∏ –∑–∞–∫–∞–∑—ã - –ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤\n"
            "‚Ä¢ üíé –ú–æ–∏ –±–æ–Ω—É—Å—ã - –ë–æ–Ω—É—Å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞"
        )

    await message.answer(help_text, parse_mode="HTML")


@router.message(Command("admin"))
async def admin_panel(message: Message):
    """–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    await message.answer(
        "üëë <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
        reply_markup=admin_keyboard(),
        parse_mode="HTML"
    )


@router.callback_query(F.data == "admin_back")
async def admin_back(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∫–∏"""
    await callback.message.edit_text(
        "üëë <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
        reply_markup=admin_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data == "manage_orders")
async def manage_orders(callback: CallbackQuery):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    await callback.message.edit_text(
        "üì¶ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=orders_management_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data == "orders_list")
async def show_orders_list(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã
    with sqlite3.connect(DB_PATH) as conn:
        conn.row_factory = sqlite3.Row
        cur = conn.cursor()
        cur.execute("""
            SELECT o.*, u.first_name, u.last_name 
            FROM orders o 
            LEFT JOIN users u ON o.user_id = u.id 
            ORDER BY o.created_at DESC
        """)
        orders = [dict(row) for row in cur.fetchall()]

    if not orders:
        await callback.message.answer("üì¶ –ó–∞–∫–∞–∑–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç")
        return

    await callback.message.edit_text(
        f"üìã <b>–°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤</b>\n\n"
        f"–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {len(orders)}",
        reply_markup=orders_list_keyboard(orders),
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data.startswith("order_detail_"))
async def show_order_detail(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    order_id = int(callback.data.split("_")[2])

    with sqlite3.connect(DB_PATH) as conn:
        conn.row_factory = sqlite3.Row
        cur = conn.cursor()
        cur.execute("""
            SELECT o.*, u.first_name, u.last_name, u.username 
            FROM orders o 
            LEFT JOIN users u ON o.user_id = u.id 
            WHERE o.id = ?
        """, (order_id,))
        order = cur.fetchone()

        if not order:
            await callback.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        order = dict(order)
        items = json.loads(order['items'])

        order_text = (
            f"üì¶ <b>–ó–∞–∫–∞–∑ #{order['id']}</b>\n\n"
            f"üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> {order['first_name']} {order['last_name']}\n"
            f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {order['phone']}\n"
            f"üìç <b>–ê–¥—Ä–µ—Å:</b> {order['address'] or '–°–∞–º–æ–≤—ã–≤–æ–∑'}\n"
            f"üìÖ <b>–î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏:</b> {order['delivery_date']}\n"
            f"‚è∞ <b>–í—Ä–µ–º—è:</b> {order['delivery_time']}\n"
            f"üí≥ <b>–û–ø–ª–∞—Ç–∞:</b> {get_payment_method_name(order['payment_method'])}\n"
            f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {order['status']}\n"
            f"üí∞ <b>–°—É–º–º–∞:</b> {order['total']} ‚ÇΩ\n\n"
            f"üõí <b>–¢–æ–≤–∞—Ä—ã:</b>\n"
        )

        for item in items:
            order_text += f"‚Ä¢ {item['name']} √ó {item['quantity']} - {item['price'] * item['quantity']} ‚ÇΩ\n"

        if order['bonus_used'] > 0:
            order_text += f"\nüíé <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –±–æ–Ω—É—Å–æ–≤:</b> {order['bonus_used']} ‚ÇΩ"

        await callback.message.edit_text(
            order_text,
            reply_markup=order_detail_keyboard(order['id']),
            parse_mode="HTML"
        )

    await callback.answer()


@router.callback_query(F.data.startswith("deliver_"))
async def mark_order_delivered(callback: CallbackQuery):
    """–û—Ç–º–µ—Ç–∏—Ç—å –∑–∞–∫–∞–∑ –∫–∞–∫ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    order_id = int(callback.data.split("_")[1])

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
    update_order_status(order_id, 'delivered')

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    with sqlite3.connect(DB_PATH) as conn:
        conn.row_factory = sqlite3.Row
        cur = conn.cursor()
        cur.execute("SELECT user_id FROM orders WHERE id = ?", (order_id,))
        order = cur.fetchone()

    if order:
        user_id = order['user_id']
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        try:
            await bot.send_message(
                user_id,
                f"üéâ <b>–í–∞—à –∑–∞–∫–∞–∑ #{order_id} –¥–æ—Å—Ç–∞–≤–ª–µ–Ω!</b>\n\n"
                f"–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! –ù–∞–¥–µ–µ–º—Å—è, –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª–∏—Å—å –Ω–∞—à–∏ —Ü–≤–µ—Ç—ã üíê\n\n"
                f"–ù–µ –∑–∞–±—É–¥—å—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –æ –∑–∞–∫–∞–∑–µ!",
                parse_mode="HTML"
            )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

    await callback.answer(f"‚úÖ –ó–∞–∫–∞–∑ #{order_id} –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π")
    await callback.message.edit_text(
        f"‚úÖ <b>–ó–∞–∫–∞–∑ #{order_id} –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π</b>\n\n"
        f"–ö–ª–∏–µ–Ω—Ç –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–æ—Å—Ç–∞–≤–∫–µ.",
        parse_mode="HTML"
    )


@router.callback_query(F.data == "manage_reviews")
async def manage_reviews(callback: CallbackQuery):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞–º–∏"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –æ—Ç–∑—ã–≤–∞–º
    with sqlite3.connect(DB_PATH) as conn:
        cur = conn.cursor()
        cur.execute("SELECT COUNT(*) FROM reviews")
        total_reviews = cur.fetchone()[0]

        cur.execute("SELECT AVG(rating) FROM reviews WHERE rating > 0")
        avg_rating = cur.fetchone()[0] or 0

    await callback.message.edit_text(
        f"‚≠ê <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞–º–∏</b>\n\n"
        f"üìä –í—Å–µ–≥–æ –æ—Ç–∑—ã–≤–æ–≤: {total_reviews}\n"
        f"üåü –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {avg_rating:.1f}/5\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reviews_management_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data == "all_reviews")
async def show_all_reviews(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –æ—Ç–∑—ã–≤—ã"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    reviews = get_reviews(limit=50)  # –ü–æ–ª—É—á–∞–µ–º –±–æ–ª—å—à–µ –æ—Ç–∑—ã–≤–æ–≤

    if not reviews:
        await callback.message.answer("üìù –û—Ç–∑—ã–≤–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç")
        return

    review_text = "‚≠ê <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–∑—ã–≤—ã:</b>\n\n"

    for i, review in enumerate(reviews[:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
        stars = "‚≠ê" * min(5, max(1, review.get('rating', 5)))
        created_at = review['created_at'].split(".")[0] if isinstance(review['created_at'], str) else \
            str(review['created_at']).split(".")[0]

        review_text += (
            f"{stars}\n"
            f"<i>\"{review['text'][:100]}...\"</i>\n"
            f"<b>‚Äî {review.get('user_name', '–ê–Ω–æ–Ω–∏–º')}</b>\n"
            f"<code>üìÖ {created_at}</code>\n\n"
        )

    await callback.message.answer(review_text, parse_mode="HTML")
    await callback.answer()


@router.callback_query(F.data == "admin_stats")
async def show_admin_stats(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–∞–≥–∞–∑–∏–Ω–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    with sqlite3.connect(DB_PATH) as conn:
        cur = conn.cursor()

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–∫–∞–∑–æ–≤
        cur.execute("SELECT COUNT(*) FROM orders")
        total_orders = cur.fetchone()[0]

        cur.execute("SELECT COUNT(*) FROM orders WHERE status = 'delivered'")
        delivered_orders = cur.fetchone()[0]

        cur.execute("SELECT COUNT(*) FROM orders WHERE status = 'new'")
        new_orders = cur.fetchone()[0]

        cur.execute("SELECT SUM(total) FROM orders WHERE status = 'delivered'")
        total_revenue = cur.fetchone()[0] or 0

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        cur.execute("SELECT COUNT(DISTINCT user_id) FROM orders")
        active_clients = cur.fetchone()[0]

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–∑—ã–≤–æ–≤
        cur.execute("SELECT COUNT(*) FROM reviews")
        total_reviews = cur.fetchone()[0]

        cur.execute("SELECT AVG(rating) FROM reviews WHERE rating > 0")
        avg_rating = cur.fetchone()[0] or 0

    stats_text = (
        "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞–≥–∞–∑–∏–Ω–∞</b>\n\n"
        f"üì¶ <b>–ó–∞–∫–∞–∑—ã:</b>\n"
        f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {total_orders}\n"
        f"‚Ä¢ –ù–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã: {new_orders}\n"
        f"‚Ä¢ –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {delivered_orders}\n"
        f"‚Ä¢ –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: {total_revenue} ‚ÇΩ\n\n"

        f"üë• <b>–ö–ª–∏–µ–Ω—Ç—ã:</b>\n"
        f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤: {active_clients}\n\n"

        f"‚≠ê <b>–û—Ç–∑—ã–≤—ã:</b>\n"
        f"‚Ä¢ –í—Å–µ–≥–æ –æ—Ç–∑—ã–≤–æ–≤: {total_reviews}\n"
        f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {avg_rating:.1f}/5\n\n"

        f"<i>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {datetime.now().strftime('%d.%m.%Y %H:%M')}</i>"
    )

    await callback.message.answer(stats_text, parse_mode="HTML")
    await callback.answer()


@router.callback_query(F.data == "manage_bonuses")
async def manage_bonuses(callback: CallbackQuery):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ–Ω—É—Å–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    with sqlite3.connect(DB_PATH) as conn:
        cur = conn.cursor()

        cur.execute("SELECT COUNT(*) FROM loyalty_program WHERE current_bonus > 0")
        users_with_bonuses = cur.fetchone()[0]

        cur.execute("SELECT SUM(current_bonus) FROM loyalty_program")
        total_bonuses = cur.fetchone()[0] or 0

        cur.execute("SELECT SUM(total_bonus_earned) FROM loyalty_program")
        total_earned = cur.fetchone()[0] or 0

    bonus_text = (
        "üíé <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ–Ω—É—Å–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π</b>\n\n"
        f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –±–æ–Ω—É—Å–∞–º–∏: {users_with_bonuses}\n"
        f"üí∞ –í—Å–µ–≥–æ –±–æ–Ω—É—Å–æ–≤ –Ω–∞ —Å—á–µ—Ç–∞—Ö: {total_bonuses} ‚ÇΩ\n"
        f"üèÜ –í—Å–µ–≥–æ –Ω–∞—á–∏—Å–ª–µ–Ω–æ –±–æ–Ω—É—Å–æ–≤: {total_earned} ‚ÇΩ\n\n"

        "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:</b>\n"
        "‚Ä¢ /reset_bonus - –°–±—Ä–æ—Å–∏—Ç—å –±–æ–Ω—É—Å—ã\n"
    )

    await callback.message.answer(bonus_text, parse_mode="HTML")
    await callback.answer()


@router.message(Command("reviews_debug"))
async def reviews_debug(message: Message):
    """–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–∑—ã–≤–æ–≤"""
    if not is_admin(message.from_user.id):  # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return

    with sqlite3.connect(DB_PATH) as conn:
        cur = conn.cursor()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –æ—Ç–∑—ã–≤–æ–≤
        cur.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='reviews'")
        table_exists = cur.fetchone()

        if table_exists:
            cur.execute("SELECT COUNT(*) FROM reviews")
            count = cur.fetchone()[0]

            cur.execute("SELECT COUNT(*) FROM reviews WHERE order_id IS NOT NULL")
            order_reviews = cur.fetchone()[0]

            cur.execute("SELECT COUNT(*) FROM reviews WHERE order_id IS NULL")
            general_reviews = cur.fetchone()[0]

            text = (
                f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ –æ—Ç–∑—ã–≤–æ–≤ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç\n"
                f"üìä –í—Å–µ–≥–æ –æ—Ç–∑—ã–≤–æ–≤: {count}\n"
                f"üì¶ –û—Ç–∑—ã–≤–æ–≤ –Ω–∞ –∑–∞–∫–∞–∑—ã: {order_reviews}\n"
                f"üè™ –û–±—â–∏—Ö –æ—Ç–∑—ã–≤–æ–≤: {general_reviews}"
            )

            await message.answer(text)

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–∑—ã–≤—ã
            cur.execute("SELECT * FROM reviews ORDER BY created_at DESC LIMIT 5")
            reviews = cur.fetchall()
            if reviews:
                text = "üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –æ—Ç–∑—ã–≤–æ–≤:\n\n"
                for review in reviews:
                    order_info = f" (–ó–∞–∫–∞–∑ #{review[5]})" if review[5] else " (–û–±—â–∏–π)"
                    text += f"ID: {review[0]}, User: {review[2]}, Rating: {review[4]}{order_info}\n"
                    text += f"Text: {review[3][:50]}...\n\n"
                await message.answer(text)
        else:
            await message.answer("‚ùå –¢–∞–±–ª–∏—Ü–∞ –æ—Ç–∑—ã–≤–æ–≤ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")


@router.message(Command("mark_delivered"))
async def mark_delivered(message: Message):
    """–ü–æ–º–µ—Ç–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑ –∫–∞–∫ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)"""
    if not is_admin(message.from_user.id):  # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return

    user_id = message.from_user.id
    orders = get_user_orders(user_id)

    if not orders:
        await message.answer("‚ùå –ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤")
        return

    last_order = orders[0]
    update_order_status(last_order['id'], 'delivered')

    # –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –æ—Ç–∑—ã–≤–∞
    await ask_for_review_after_delivery(user_id, last_order['id'])

    await message.answer(f"‚úÖ –ó–∞–∫–∞–∑ #{last_order['id']} –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π")


@router.message(Command("add"))
async def add_bouquet_cmd(message: Message, state: FSMContext):
    if not is_admin(message.from_user.id):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    await message.answer("üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –Ω–æ–≤–æ–≥–æ –±—É–∫–µ—Ç–∞")
    await state.set_state(AdminState.photo)


@router.message(AdminState.photo)
async def get_bouquet_photo(message: Message, state: FSMContext):
    if message.photo:
        photo = message.photo[-1]
        file = await bot.get_file(photo.file_id)
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        photo_path = f"images/bouquet_{timestamp}.jpg"
        try:
            await bot.download_file(file.file_path, photo_path)
            await state.update_data(photo=photo_path)
        except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ: {e}")
            return
    else:
        await state.update_data(photo=None)

    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±—É–∫–µ—Ç–∞:")
    await state.set_state(AdminState.name)


@router.message(AdminState.name)
async def get_bouquet_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é (–±—É–∫–µ—Ç/–≥–æ—Ä—à–µ—á–Ω—ã–π):")
    await state.set_state(AdminState.category)


@router.message(AdminState.category)
async def get_bouquet_category(message: Message, state: FSMContext):
    category_text = message.text.strip().lower()

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –ø–æ–Ω—è—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –ë–î
    if "–±—É–∫–µ—Ç" in category_text:
        category = "bouquet"
    elif "–≥–æ—Ä—à–µ—á–Ω—ã–π" in category_text or "—Ä–∞—Å—Ç–µ–Ω–∏–µ" in category_text:
        category = "plant"
    else:
        await message.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è. –í–≤–µ–¥–∏—Ç–µ '–±—É–∫–µ—Ç' –∏–ª–∏ '–≥–æ—Ä—à–µ—á–Ω—ã–π':")
        return

    await state.update_data(category=category)
    await message.answer("üí¨ –í–≤–µ–¥–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:")
    await state.set_state(AdminState.description)


@router.message(AdminState.description)
async def get_bouquet_desc(message: Message, state: FSMContext):
    await state.update_data(description=message.text)
    await message.answer("üìÑ –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:")
    await state.set_state(AdminState.full_description)


@router.message(AdminState.full_description)
async def get_bouquet_full_desc(message: Message, state: FSMContext):
    await state.update_data(full_description=message.text)
    await message.answer("üí∞ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):")
    await state.set_state(AdminState.price)


@router.message(AdminState.price)
async def get_bouquet_price(message: Message, state: FSMContext):
    price_text = message.text.strip().lower()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–≤–æ–¥ —á–∏—Å–ª–æ–º
    try:
        price = float(price_text)
        # –ï—Å–ª–∏ —ç—Ç–æ —á–∏—Å–ª–æ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ
        data = await state.get_data()

        product_id = add_product(
            name=data['name'],
            description=data['description'],
            full_description=data['full_description'],
            price=price,
            photo=data.get('photo'),
            category=data['category'],
            is_daily=True
        )

        await message.answer(f"‚úÖ –ë—É–∫–µ—Ç ¬´{data['name']}¬ª –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ –±—É–∫–µ—Ç –¥–Ω—è! –¶–µ–Ω–∞: {price} ‚ÇΩ")
        await state.clear()


    except ValueError:
        # –ï—Å–ª–∏ —Ü–µ–Ω–∞ ‚Äî –Ω–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä "–ø–æ –∑–∞–ø—Ä–æ—Å—É"
        data = await state.get_data()
        name = data['name']
        category = data['category']
        description = data.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')
        full_description = data.get('full_description', description)
        photo_path = data.get('photo')

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–≤–∞—Ä —Å –º–µ—Ç–∫–æ–π "–ø–æ –∑–∞–ø—Ä–æ—Å—É"
        product_id = add_product(
            name=name,
            description=description,
            full_description=full_description,
            price=0,  # –∏–ª–∏ None, –µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
            photo=photo_path,
            category=category,
            is_daily=True,
            on_request=True  # –∏–ª–∏ –¥–æ–±–∞–≤—å –≤ –∑–∞–ø—Ä–æ—Å: DEFAULT FALSE
        )

        # –£–≤–µ–¥–æ–º–ª—è–µ–º, —á—Ç–æ —Ç–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω, –Ω–æ —Ü–µ–Ω–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É
        await message.answer(
            f"‚úÖ –¢–æ–≤–∞—Ä ¬´{name}¬ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞—Ç–∞–ª–æ–≥ –∫–∞–∫ '–ø–æ –∑–∞–ø—Ä–æ—Å—É'.\n"
            f"üí¨ –ö–ª–∏–µ–Ω—Ç—ã —Å–º–æ–≥—É—Ç —É—Ç–æ—á–Ω–∏—Ç—å —Ü–µ–Ω—É —É –º–µ–Ω–µ–¥–∂–µ—Ä–∞.",
            parse_mode="HTML"
        )

        # –û–ø–æ–≤–µ—â–∞–µ–º –∞–¥–º–∏–Ω–æ–≤, —á—Ç–æ –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä –æ–∂–∏–¥–∞–µ—Ç —Ü–µ–Ω—É
        admin_msg = (
            "üü° <b>–ù–û–í–´–ô –¢–û–í–ê–† '–ü–û –ó–ê–ü–†–û–°–£'</b>\n"
            f"üë§ <b>–§–ª–æ—Ä–∏—Å—Ç:</b> {message.from_user.full_name}\n"
            f"üå∏ <b>–¢–æ–≤–∞—Ä:</b> {name}\n"
            f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {description}\n"
            f"‚ö†Ô∏è <b>–¢—Ä–µ–±—É–µ—Ç—Å—è —É—Ç–≤–µ—Ä–¥–∏—Ç—å —Ü–µ–Ω—É –≤—Ä—É—á–Ω—É—é.</b>"
        )

        await notify_admins(admin_msg)

        await state.clear()


@router.callback_query(F.data == "ask_manager_price")
async def ask_manager_for_price(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å —Ü–µ–Ω—ã —É –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
    data = await state.get_data()

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    admin_msg = (
        "üí∞ <b>–ó–ê–ü–†–û–° –¶–ï–ù–´ –û–¢ –§–õ–û–†–ò–°–¢–ê</b>\n\n"
        f"üë§ <b>–§–ª–æ—Ä–∏—Å—Ç:</b> {callback.from_user.full_name}\n"
        f"üÜî <b>ID:</b> {callback.from_user.id}\n\n"
        f"üå∏ <b>–ë—É–∫–µ—Ç:</b> {data['name']}\n"
        f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {data['description']}\n"
        f"üí¨ <b>–ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–∞—è —Ü–µ–Ω–∞:</b> {data.get('price_text', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}\n\n"
        f"‚ö†Ô∏è <b>–¢—Ä–µ–±—É–µ—Ç—Å—è —É—Ç–æ—á–Ω–∏—Ç—å —Ç–æ—á–Ω—É—é —Ü–µ–Ω—É!</b>"
    )

    try:
        await notify_admins(admin_msg)
        await callback.message.answer(
            "‚úÖ –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –º–µ–Ω–µ–¥–∂–µ—Ä—É!\n"
            "–ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è —Ç–æ—á–Ω–æ–π —Ü–µ–Ω—ã."
        )
    except Exception as e:
        await callback.message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ: @mgk71"
        )

    await state.clear()
    await callback.answer()


@router.callback_query(F.data == "budget_selection_admin")
async def budget_selection_admin(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥–±–æ—Ä —Ü–µ–Ω—ã –ø–æ–¥ –±—é–¥–∂–µ—Ç –¥–ª—è –∞–¥–º–∏–Ω–∞"""
    data = await state.get_data()
    await state.update_data(admin_product_data=data)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞

    await callback.message.answer(
        "üí∞ <b>–ü–æ–¥–±–æ—Ä —Ü–µ–Ω—ã –ø–æ–¥ –±—é–¥–∂–µ—Ç</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–π –±—é–¥–∂–µ—Ç –¥–ª—è —ç—Ç–æ–≥–æ –±—É–∫–µ—Ç–∞ (–≤ —Ä—É–±–ª—è—Ö):",
        parse_mode="HTML"
    )
    await state.set_state(AdminState.budget)


@router.callback_query(F.data == "cancel_add_product")
async def cancel_add_product(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
    await state.clear()
    await callback.message.answer("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await callback.answer()


@router.message(AdminState.budget)
async def process_admin_budget(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –±—é–¥–∂–µ—Ç–∞ –æ—Ç –∞–¥–º–∏–Ω–∞"""
    try:
        budget = float(message.text)
        data = await state.get_data()
        product_data = data['admin_product_data']

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±—é–¥–∂–µ—Ç –∫–∞–∫ –ø—Ä–∏–º–µ—Ä–Ω—É—é —Ü–µ–Ω—É
        product_id = add_product(
            name=product_data['name'],
            description=product_data['description'],
            full_description=product_data['full_description'],
            price=budget,
            photo=product_data.get('photo'),
            category=product_data['category'],
            is_daily=True
        )

        await message.answer(
            f"‚úÖ –ë—É–∫–µ—Ç ¬´{product_data['name']}¬ª –¥–æ–±–∞–≤–ª–µ–Ω —Å –ø—Ä–∏–º–µ—Ä–Ω–æ–π —Ü–µ–Ω–æ–π {budget} ‚ÇΩ\n\n"
            f"üí° <i>–¶–µ–Ω–∞ –±—É–¥–µ—Ç —É—Ç–æ—á–Ω–µ–Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–∞–∂–µ–π</i>",
            parse_mode="HTML"
        )

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        admin_msg = (
            "üí∞ <b>–ë–£–ö–ï–¢ –î–û–ë–ê–í–õ–ï–ù –° –ü–†–ò–ú–ï–†–ù–û–ô –¶–ï–ù–û–ô</b>\n\n"
            f"üë§ <b>–§–ª–æ—Ä–∏—Å—Ç:</b> {message.from_user.full_name}\n"
            f"üå∏ <b>–ë—É–∫–µ—Ç:</b> {product_data['name']}\n"
            f"üíµ <b>–ü—Ä–∏–º–µ—Ä–Ω–∞—è —Ü–µ–Ω–∞:</b> {budget} ‚ÇΩ\n"
            f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {product_data['description']}\n\n"
            f"‚ö†Ô∏è <b>–¢—Ä–µ–±—É–µ—Ç—Å—è —É—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—É—é —Ü–µ–Ω—É!</b>"
        )
        await notify_admins(admin_msg)

    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. –ù–∞–ø—Ä–∏–º–µ—Ä: 2500")
        return

    await state.clear()


@router.message(AdminEditPrice.waiting_for_price)
async def process_new_price(message: Message, state: FSMContext):
    try:
        new_price = float(message.text)
        if new_price < 0:
            await message.answer("‚ùå –¶–µ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π.")
            return

        data = await state.get_data()
        product_id = data['product_id']

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É –∏ —Å–Ω–∏–º–∞–µ–º —Ñ–ª–∞–≥ on_request
        with sqlite3.connect(DB_PATH) as conn:
            cur = conn.cursor()
            cur.execute("""
                UPDATE products 
                SET price = ?, on_request = FALSE 
                WHERE id = ?
            """, (new_price, product_id))
            conn.commit()

        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä
        with sqlite3.connect(DB_PATH) as conn:
            conn.row_factory = sqlite3.Row
            cur = conn.cursor()
            cur.execute("SELECT name FROM products WHERE id = ?", (product_id,))
            product = cur.fetchone()

        await message.answer(
            f"‚úÖ –¶–µ–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!\n"
            f"üì¶ <b>{product['name']}</b>\n"
            f"üí∞ <b>{new_price} ‚ÇΩ</b>",
            parse_mode="HTML"
        )

        # –û–ø–æ–≤–µ—â–∞–µ–º –∞–¥–º–∏–Ω–∞, —á—Ç–æ –º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫
        await message.answer("üìå –û–±–Ω–æ–≤–∏—Ç–µ —Å–ø–∏—Å–æ–∫: /pending_prices")

        await state.clear()

    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. –ù–∞–ø—Ä–∏–º–µ—Ä: 2800")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ü–µ–Ω—ã: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏.")
        await state.clear()


@router.message(Command("myid"))
async def show_my_id(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—É–¥–æ–±–Ω–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–≤)"""
    user_id = message.from_user.id
    is_user_admin = is_admin(user_id)

    await message.answer(
        f"üÜî <b>–í–∞—à ID:</b> <code>{user_id}</code>\n"
        f"üëë <b>–°—Ç–∞—Ç—É—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</b> {'‚úÖ –î–∞' if is_user_admin else '‚ùå –ù–µ—Ç'}\n\n"
        f"–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –¥–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç ID –≤ config.py",
        parse_mode="HTML"
    )


# –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
async def auto_cleanup_daily_products():
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –±—É–∫–µ—Ç–æ–≤ –¥–Ω—è"""
    while True:
        try:
            now = datetime.now()
            next_run = now.replace(hour=0, minute=1, second=0, microsecond=0)
            if now > next_run:
                next_run += timedelta(days=1)

            wait_seconds = (next_run - now).total_seconds()
            await asyncio.sleep(wait_seconds)

            cleaned = cleanup_old_daily_products()
            logger.info(f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—á–∏—â–µ–Ω–æ {cleaned} —Å—Ç–∞—Ä—ã—Ö –±—É–∫–µ—Ç–æ–≤ –¥–Ω—è")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ auto_cleanup_daily_products: {e}")
            await asyncio.sleep(3600)


@router.callback_query(F.data == "test_create_order")
async def test_create_order(callback: CallbackQuery):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞ —Å –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ–º –±–æ–Ω—É—Å–æ–≤"""
    try:
        user_id = callback.from_user.id

        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω–µ
        clear_cart(user_id)
        add_to_cart(user_id, 1)  # –¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä
        add_to_cart(user_id, 1)  # –¥–æ–±–∞–≤–ª—è–µ–º –µ—â–µ –æ–¥–∏–Ω

        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑
        order_id = create_order(
            user_id=user_id,
            name="–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
            phone="+79999999999",
            address="–¢–µ—Å—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å",
            delivery_date="01.01.2024",
            delivery_time="12:00-15:00",
            payment="test",
            delivery_cost=300,
            delivery_type="delivery",
            bonus_used=0
        )

        bonus_info = get_bonus_info(user_id)

        await callback.message.answer(
            f"‚úÖ <b>–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω!</b>\n\n"
            f"üì¶ –ó–∞–∫–∞–∑ #: {order_id}\n"
            f"üíé –ù–∞—á–∏—Å–ª–µ–Ω–æ –±–æ–Ω—É—Å–æ–≤: {bonus_info['current_bonus'] - bonus_info.get('previous_balance', 0)} ‚ÇΩ\n"
            f"üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {bonus_info['current_bonus']} ‚ÇΩ\n\n"
            f"<i>–ë–æ–Ω—É—Å—ã –Ω–∞—á–∏—Å–ª–µ–Ω—ã –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–π –æ–ø–ª–∞—Ç—ã</i>",
            parse_mode="HTML"
        )

    except Exception as e:
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    await callback.answer()


@router.callback_query(F.data == "test_check_balance")
async def test_check_balance(callback: CallbackQuery):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –±–æ–Ω—É—Å–æ–≤"""
    bonus_info = get_bonus_info(callback.from_user.id)

    text = (
        f"üíé <b>–í–∞—à –±–∞–ª–∞–Ω—Å –±–æ–Ω—É—Å–æ–≤:</b>\n\n"
        f"üí∞ –í—Å–µ–≥–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ: {bonus_info['total_spent']} ‚ÇΩ\n"
        f"üéÅ –î–æ—Å—Ç—É–ø–Ω–æ –±–æ–Ω—É—Å–æ–≤: {bonus_info['current_bonus']} ‚ÇΩ\n"
        f"üèÜ –í—Å–µ–≥–æ –Ω–∞—á–∏—Å–ª–µ–Ω–æ: {bonus_info['total_bonus_earned']} ‚ÇΩ\n\n"
    )

    # –ü—Ä–∏–º–µ—Ä —Ä–∞—Å—á–µ—Ç–∞ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–∫–∞–∑–∞
    if bonus_info['current_bonus'] > 0:
        example_amount = 5000
        max_usable = min(bonus_info['current_bonus'], int(example_amount * 0.3))
        text += (
            f"<b>–ü—Ä–∏–º–µ—Ä –¥–ª—è –∑–∞–∫–∞–∑–∞ –Ω–∞ {example_amount} ‚ÇΩ:</b>\n"
            f"–ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å: {max_usable} ‚ÇΩ –±–æ–Ω—É—Å–∞–º–∏\n"
            f"–ö –æ–ø–ª–∞—Ç–µ: {example_amount - max_usable} ‚ÇΩ\n"
        )

    await callback.message.answer(text, parse_mode="HTML")
    await callback.answer()


@router.callback_query(F.data == "test_bonus_history")
async def test_bonus_history(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –±–æ–Ω—É—Å–æ–≤"""
    await show_bonus_history(callback)


@router.callback_query(F.data == "test_use_bonus")
async def test_use_bonus(callback: CallbackQuery, state: FSMContext):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ–Ω—É—Å–æ–≤"""
    bonus_info = get_bonus_info(callback.from_user.id)

    if bonus_info['current_bonus'] == 0:
        await callback.message.answer(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –±–æ–Ω—É—Å–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.\n"
            "–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑ –∫–æ–º–∞–Ω–¥–æ–π /test_bonus"
        )
        await callback.answer()
        return

    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω—É
    clear_cart(callback.from_user.id)
    add_to_cart(callback.from_user.id, 1)
    add_to_cart(callback.from_user.id, 1)

    cart_items = get_cart(callback.from_user.id)
    products_total = sum(item['price'] * item['quantity'] for item in cart_items)
    max_bonus_allowed = int(products_total * 0.3)
    available_bonus = min(bonus_info['current_bonus'], max_bonus_allowed)

    text = (
        f"üß™ <b>–¢–µ—Å—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ–Ω—É—Å–æ–≤</b>\n\n"
        f"üõí –°—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {products_total} ‚ÇΩ\n"
        f"üíé –í–∞—à –±–∞–ª–∞–Ω—Å: {bonus_info['current_bonus']} ‚ÇΩ\n"
        f"üìä –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å: {available_bonus} ‚ÇΩ (30% –æ—Ç –∑–∞–∫–∞–∑–∞)\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –±–æ–Ω—É—Å–æ–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:"
    )

    await callback.message.answer(text, parse_mode="HTML")
    await state.set_state(OrderState.use_bonus)
    await state.update_data(test_mode=True)
    await callback.answer()


@router.message(Command("add_test_bonus"))
async def add_test_bonus(message: Message):
    """–î–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –±–æ–Ω—É—Å—ã"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return

    try:
        # –î–æ–±–∞–≤–ª—è–µ–º 1000 –±–æ–Ω—É—Å–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        user_id = message.from_user.id
        with sqlite3.connect(DB_PATH) as conn:
            cur = conn.cursor()
            cur.execute("""
                UPDATE loyalty_program 
                SET current_bonus = current_bonus + ?,
                    total_bonus_earned = total_bonus_earned + ?,
                    updated_at = CURRENT_TIMESTAMP
                WHERE user_id = ?
            """, (1000, 1000, user_id))

            cur.execute("""
                INSERT INTO loyalty_history 
                (user_id, points_change, reason, remaining_points)
                SELECT ?, ?, ?, current_bonus 
                FROM loyalty_program 
                WHERE user_id = ?
            """, (user_id, 1000, "–¢–µ—Å—Ç–æ–≤–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –±–æ–Ω—É—Å–æ–≤", user_id))

            conn.commit()

        bonus_info = get_bonus_info(user_id)
        await message.answer(
            f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ 1000 —Ç–µ—Å—Ç–æ–≤—ã—Ö –±–æ–Ω—É—Å–æ–≤!\n"
            f"üíé –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {bonus_info['current_bonus']} ‚ÇΩ"
        )

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")


@router.message(Command("reset_bonus"))
async def reset_bonus(message: Message):
    """–°–±—Ä–æ—Å–∏—Ç—å –±–æ–Ω—É—Å—ã –∫ –Ω–∞—á–∞–ª—å–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return

    try:
        user_id = message.from_user.id
        with sqlite3.connect(DB_PATH) as conn:
            cur = conn.cursor()
            cur.execute("""
                UPDATE loyalty_program 
                SET current_bonus = 0,
                    total_bonus_earned = 0,
                    total_spent = 0,
                    updated_at = CURRENT_TIMESTAMP
                WHERE user_id = ?
            """, (user_id,))

            cur.execute("DELETE FROM loyalty_history WHERE user_id = ?", (user_id,))
            conn.commit()

        await message.answer("‚úÖ –ë–æ–Ω—É—Å—ã —Å–±—Ä–æ—à–µ–Ω—ã –∫ –Ω–∞—á–∞–ª—å–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é!")

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")


@router.message(Command("edit_price"))
async def edit_price_cmd(message: Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return

    try:
        # –ü–æ–ª—É—á–∞–µ–º ID —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–æ–º–∞–Ω–¥—ã: /edit_price 123
        args = message.text.split()
        if len(args) != 2:
            await message.answer("üìå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <code>/edit_price <id_—Ç–æ–≤–∞—Ä–∞></code>", parse_mode="HTML")
            return

        product_id = int(args[1])

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–æ–≤–∞—Ä –∏ —Ü–µ–Ω–∞ –ª–∏–±–æ 0, –ª–∏–±–æ on_request=True
        with sqlite3.connect(DB_PATH) as conn:
            conn.row_factory = sqlite3.Row
            cur = conn.cursor()
            cur.execute("SELECT * FROM products WHERE id = ?", (product_id,))
            product = cur.fetchone()

        if not product:
            await message.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        if product['price'] > 0 and not product['on_request']:
            await message.answer(f"‚úÖ –£ —Ç–æ–≤–∞—Ä–∞ ¬´{product['name']}¬ª —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Ü–µ–Ω–∞: {product['price']} ‚ÇΩ\n"
                                 "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä—ã —Å —Ü–µ–Ω–æ–π '–ø–æ –∑–∞–ø—Ä–æ—Å—É'.")
            return

        await state.update_data(product_id=product_id)
        await message.answer(
            f"üîß –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã –¥–ª—è —Ç–æ–≤–∞—Ä–∞:\n"
            f"üì¶ <b>{product['name']}</b>\n"
            f"üìù {product['description']}\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –≤ —Ä—É–±–ª—è—Ö (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):",
            parse_mode="HTML"
        )
        await state.set_state(AdminEditPrice.waiting_for_price)

    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /edit_price: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã.")


@router.message(Command("pending_prices"))
async def show_pending_products(message: Message):
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return

    with sqlite3.connect(DB_PATH) as conn:
        conn.row_factory = sqlite3.Row
        cur = conn.cursor()
        cur.execute("""
            SELECT id, name, description, photo, created_date
            FROM products
            WHERE (price = 0 OR on_request = TRUE)
            AND is_daily = TRUE
            ORDER BY created_date DESC
        """)
        products = [dict(row) for row in cur.fetchall()]

    if not products:
        await message.answer("üü¢ –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ —Å —Ü–µ–Ω–æ–π '–ø–æ –∑–∞–ø—Ä–æ—Å—É'.")
        return

    for product in products:
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úèÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—É", callback_data=f"set_price_{product['id']}")],
            [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_product_{product['id']}")]
        ])
        await message.answer_photo(
            photo=FSInputFile(product['photo']),
            caption=f"üü° <b>–¢–æ–≤–∞—Ä –±–µ–∑ —Ü–µ–Ω—ã:</b>\n"
                    f"üì¶ <b>{product['name']}</b>\n"
                    f"üìù {product['description']}\n"
                    f"üÜî <code>{product['id']}</code>",
            reply_markup=kb,
            parse_mode="HTML"
        )


@router.callback_query(F.data.startswith("set_price_"))
async def start_set_price(callback: CallbackQuery, state: FSMContext):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return

    product_id = int(callback.data.split("_")[2])

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–æ–≤–∞—Ä
    with sqlite3.connect(DB_PATH) as conn:
        conn.row_factory = sqlite3.Row
        cur = conn.cursor()
        cur.execute("SELECT name FROM products WHERE id = ?", (product_id,))
        product = cur.fetchone()

    if not product:
        await callback.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    await state.update_data(product_id=product_id)
    await callback.message.answer(
        f"üîß –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –¥–ª—è —Ç–æ–≤–∞—Ä–∞ ¬´{product['name']}¬ª (–≤ —Ä—É–±–ª—è—Ö):"
    )
    await state.set_state(AdminEditPrice.waiting_for_price)
    await callback.answer()


def calculate_order_with_bonus(user_id: int, delivery_cost: int, bonus_to_use: int = 0) -> dict:
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∑–∞–∫–∞–∑ —Å —É—á–µ—Ç–æ–º –±–æ–Ω—É—Å–æ–≤"""
    cart_items = get_cart(user_id)
    products_total = sum(item['price'] * item['quantity'] for item in cart_items)

    # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–Ω—É—Å–æ–≤ - 30% –æ—Ç —Å—É–º–º—ã —Ç–æ–≤–∞—Ä–æ–≤
    max_bonus_allowed = int(products_total * 0.3)
    actual_bonus_used = min(bonus_to_use, max_bonus_allowed)

    # –ë–æ–Ω—É—Å—ã –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –∫ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–æ–≤
    final_total = max(0, products_total - actual_bonus_used + delivery_cost)

    return {
        'products_total': products_total,
        'delivery_cost': delivery_cost,
        'bonus_used': actual_bonus_used,
        'max_bonus_allowed': max_bonus_allowed,
        'final_total': final_total
    }


def can_use_bonus(user_id: int, bonus_amount: int, cart_items: List[Dict] = None) -> Dict:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–Ω—É—Å–æ–≤"""
    if cart_items is None:
        cart_items = get_cart(user_id)

    products_total = sum(item['price'] * item['quantity'] for item in cart_items)
    max_bonus_allowed = int(products_total * 0.3)  # 30% –æ—Ç —Å—É–º–º—ã —Ç–æ–≤–∞—Ä–æ–≤
    bonus_info = get_bonus_info(user_id)
    available_bonus = bonus_info['current_bonus']

    actual_usable = min(bonus_amount, available_bonus, max_bonus_allowed)

    return {
        'can_use': actual_usable > 0,
        'actual_usable': actual_usable,
        'available_bonus': available_bonus,
        'max_allowed': max_bonus_allowed,
        'products_total': products_total
    }


@router.message(Command("test_cert"))
async def test_certificate_command(message: Message):
    """–ë—ã—Å—Ç—Ä–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞"""
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üéÅ –¢–µ—Å—Ç —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ (1 —Ä—É–±–ª—å)", callback_data="cert_1")]
    ])

    await message.answer(
        "üîß <b>–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞</b>\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –∑–∞ 1 —Ä—É–±–ª—å:",
        reply_markup=kb,
        parse_mode="HTML"
    )
