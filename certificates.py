from yookassa import Payment
import uuid
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from database import add_certificate_purchase
import os
from fpdf import FPDF
import asyncio
import logging
from config import YOOKASSA_SHOP_ID, YOOKASSA_SECRET_KEY

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)


class CertificateState(StatesGroup):
    waiting_payment = State()


def generate_certificate(amount: str, cert_code: str, filename: str):
    """–°–æ–∑–¥–∞–µ—Ç PDF —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç"""
    pdf = FPDF()
    pdf.add_page()

    pdf.set_font("Arial", "B", 16)
    pdf.cell(200, 10, txt="GIFT CERTIFICATE", ln=True, align="C")

    pdf.set_font("Arial", "B", 14)
    pdf.cell(200, 10, txt=f"Amount: {amount} RUB", ln=True, align="C")

    pdf.set_font("Arial", "", 12)
    pdf.cell(200, 10, txt=f"Code: {cert_code}", ln=True, align="C")

    pdf.multi_cell(0, 8, txt="Valid for 1 year from purchase date. Can be used for any products in the store.")

    pdf.output(filename)
    return filename


async def create_certificate_payment(user_id: int, amount: int, callback: CallbackQuery, state: FSMContext):
    """–°–æ–∑–¥–∞–µ—Ç –ø–ª–∞—Ç–µ–∂ –¥–ª—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞"""
    cert_code = f"CERT-{uuid.uuid4().hex[:8].upper()}"

    try:
        logger.info(f"üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –Ω–∞ {amount} —Ä—É–±.")

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à —É–ª—É—á—à–µ–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –ø–ª–∞—Ç–µ–∂–µ–π
        from simple_payments import payment_manager

        # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        simplified_metadata = {
            "user_id": user_id,
            "cert_code": cert_code,
            "phone": "9999999999",
            "type": "certificate"
        }

        # –°–û–ó–î–ê–ï–ú –ü–õ–ê–¢–ï–ñ —á–µ—Ä–µ–∑ –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä
        payment = await payment_manager.create_payment(
            amount=amount,
            description=f"–ü–æ–¥–∞—Ä–æ—á–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–∞ {amount}‚ÇΩ",
            metadata=simplified_metadata
        )

        if payment and payment.get("confirmation_url"):
            await state.update_data(
                payment_id=payment["id"],
                cert_amount=amount,
                cert_code=cert_code,
                payment_url=payment["confirmation_url"]
            )
            await state.set_state(CertificateState.waiting_payment)

            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            kb = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç", url=payment["confirmation_url"])],
                [InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"check_cert_payment_{payment['id']}")]
            ])

            await callback.message.answer(
                f"üéÅ <b>–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–∞ {amount} ‚ÇΩ</b>\n\n"
                f"üí≥ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {amount} ‚ÇΩ\n"
                f"üîó –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã\n\n"
                f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ ¬´‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É¬ª",
                reply_markup=kb,
                parse_mode="HTML"
            )
        else:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂
            await callback.message.answer(
                f"üéÅ <b>–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–∞ {amount} ‚ÇΩ</b>\n\n"
                "‚ö†Ô∏è –ü–ª–∞—Ç–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.\n"
                "üìû –î–ª—è –ø–æ–∫—É–ø–∫–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º: @Therry_Voyager\n\n"
                f"–ö–æ–¥ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞: <code>{cert_code}</code>\n"
                "–°–æ–æ–±—â–∏—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –º–µ–Ω–µ–¥–∂–µ—Ä—É –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏.",
                parse_mode="HTML"
            )

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞: {e}")
        await callback.message.answer(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º."
        )


async def handle_certificate_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞"""
    amount_str = callback.data.split("_")[1]
    try:
        amount = int(amount_str)
        await create_certificate_payment(callback.from_user.id, amount, callback, state)
    except ValueError:
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–∏–Ω–∞–ª —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞")
    await callback.answer()
