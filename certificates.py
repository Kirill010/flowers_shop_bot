from yookassa import Payment
import uuid
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from database import *
import os
from fpdf import FPDF
import asyncio
import logging
from config import YOOKASSA_SHOP_ID, YOOKASSA_SECRET_KEY
from simple_payments import payment_manager
import json


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)


class CertificateState(StatesGroup):
    waiting_payment = State()


def generate_certificate(amount: str, cert_code: str, filename: str):
    """–°–æ–∑–¥–∞–µ—Ç PDF —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç"""
    pdf = FPDF()
    pdf.add_page()

    pdf.set_font("Arial", "B", 16)
    pdf.cell(200, 10, txt="–ü–û–î–ê–†–û–ß–ù–´–ô –°–ï–†–¢–ò–§–ò–ö–ê–¢", ln=True, align="C")

    pdf.set_font("Arial", "B", 14)
    pdf.cell(200, 10, txt=f"–°—É–º–º–∞: {amount} RUB", ln=True, align="C")

    pdf.set_font("Arial", "", 12)
    pdf.cell(200, 10, txt=f"–ö–æ–¥: {cert_code}", ln=True, align="C")

    pdf.multi_cell(0, 8, txt="–î–µ–π—Å—Ç–≤—É–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 1 –≥–æ–¥–∞ —Å –¥–∞—Ç—ã –ø–æ–∫—É–ø–∫–∏. –ú–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –¥–ª—è –ª—é–±—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –≤ –º–∞–≥–∞–∑–∏–Ω–µ.")

    pdf.output(filename)
    return filename


async def create_certificate_payment(user_id: int, amount: int, callback: CallbackQuery, state: FSMContext):
    cert_code = f"CERT-{uuid.uuid4().hex[:8].upper()}"
    description = f"–ü–æ–∫—É–ø–∫–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –Ω–∞ {amount} ‚ÇΩ"

    try:
        # –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂
        payment = await payment_manager.create_payment(
            amount=amount,
            description=description,
            metadata={
                "user_id": user_id,
                "cert_code": cert_code,
                "type": "certificate"
            }
        )

        if not payment or not payment.get("confirmation_url"):
            logger.error(f"‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–µ —Å–æ–∑–¥–∞–Ω: {payment}")
            await callback.message.answer(
                f"üéÅ <b>–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–∞ {amount} ‚ÇΩ</b>\n"
                "‚ö†Ô∏è –ü–ª–∞—Ç–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.\n"
                "üìû –°–≤—è–∂–∏—Ç–µ—Å—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º: @Therry_Voyager\n"
                f"–ö–æ–¥ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞: <code>{cert_code}</code>\n"
                "–°–æ–æ–±—â–∏—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏.",
                parse_mode="HTML"
            )
            return

        # –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω
        confirmation_url = payment["confirmation_url"]
        payment_id = payment["id"]

        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=confirmation_url)],
            [InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"check_cert_payment_{payment_id}")]
        ])

        await callback.message.answer(
            f"üéÅ <b>–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–∞ {amount} ‚ÇΩ</b>\n"
            f"üí≥ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {amount} ‚ÇΩ\n"
            f"üîó –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã\n"
            f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ ¬´‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É¬ª",
            reply_markup=kb,
            parse_mode="HTML"
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        save_payment(
            payment_id=payment_id,
            user_id=user_id,
            amount=amount,
            status="pending",
            metadata=json.dumps({"cert_code": cert_code, "type": "certificate"})
        )

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞: {e}", exc_info=True)
        await callback.message.answer(
            f"üéÅ <b>–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–∞ {amount} ‚ÇΩ</b>\n"
            "‚ö†Ô∏è –ü–ª–∞—Ç–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.\n"
            "üìû –°–≤—è–∂–∏—Ç–µ—Å—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º: @Therry_Voyager\n"
            f"–ö–æ–¥ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞: <code>{cert_code}</code>\n"
            "–°–æ–æ–±—â–∏—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏.",
            parse_mode="HTML"
        )


async def handle_certificate_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞"""
    amount_str = callback.data.split("_")[1]
    try:
        amount = int(amount_str)
        await create_certificate_payment(callback.from_user.id, amount, callback, state)
    except ValueError:
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–∏–Ω–∞–ª —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞")
    await callback.answer()


async def check_certificate_payment(payment_id: str, callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞"""
    try:
        status = await payment_manager.check_payment_status(payment_id)

        if status == "succeeded":
            data = await state.get_data()
            amount = data.get("cert_amount")
            cert_code = data.get("cert_code")

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç
            os.makedirs("certificates", exist_ok=True)
            pdf_path = f"certificates/cert_{callback.from_user.id}_{amount}.pdf"
            generate_certificate(str(amount), cert_code, pdf_path)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º PDF
            pdf = FSInputFile(pdf_path)
            await callback.message.answer_document(
                document=pdf,
                caption=f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –∫—É–ø–∏–ª–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–∞ {amount} ‚ÇΩ\n–ö–æ–¥: `{cert_code}`",
                parse_mode="Markdown"
            )

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            add_certificate_purchase(
                user_id=callback.from_user.id,
                amount=amount,
                cert_code=cert_code,
                payment_id=payment_id
            )

            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            if os.path.exists(pdf_path):
                os.remove(pdf_path)

            await state.clear()
            await callback.answer("‚úÖ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")

        elif status == "pending":
            await callback.answer("‚è≥ –ü–ª–∞—Ç–µ–∂ –µ—â–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É.")
        else:
            await callback.answer("‚ùå –ü–ª–∞—Ç—ë–∂ –Ω–µ –ø—Ä–æ—à—ë–ª –∏–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞")
