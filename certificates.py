from yookassa import Payment, Configuration
from config import YOOKASSA_SHOP_ID, YOOKASSA_SECRET_KEY
import uuid
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile, Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from database import add_certificate_purchase
import os
from fpdf import FPDF


class CertificateState(StatesGroup):
    waiting_payment = State()


def generate_certificate(amount: str, cert_code: str, filename: str):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–∏—Ä–∏–ª–ª–∏—Ü—ã"""
    pdf = FPDF()
    pdf.add_page()

    # üîΩ –í–ê–ñ–ù–û: –ü–æ–¥–∫–ª—é—á–∞–µ–º —à—Ä–∏—Ñ—Ç –î–û —Ç–æ–≥–æ, –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å set_font()
    pdf.add_font("DejaVu", "", "DejaVuSans.ttf", uni=True)
    pdf.add_font("DejaVu", "B", "DejaVuSans-Bold.ttf", uni=True)

    # –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º "DejaVu", –∞ –Ω–µ "DejaVuSans"
    pdf.set_font("DejaVu", "B", 16)
    pdf.cell(0, 10, "–ü–û–î–ê–†–û–ß–ù–´–ô –°–ï–†–¢–ò–§–ò–ö–ê–¢", ln=True, align="C")
    pdf.ln(5)

    pdf.set_font("DejaVu", "", 12)
    pdf.cell(0, 8, f"–°—É–º–º–∞: {amount} RUB", ln=True, align="C")
    pdf.cell(0, 8, f"–ö–æ–¥: {cert_code}", ln=True, align="C")
    pdf.ln(5)

    pdf.multi_cell(0, 6, "–î–µ–π—Å—Ç–≤—É–µ—Ç 1 –≥–æ–¥ —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ–∫—É–ø–∫–∏. –ú–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –¥–ª—è –ª—é–±—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –≤ –º–∞–≥–∞–∑–∏–Ω–µ.")

    # –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É
    os.makedirs(os.path.dirname(filename), exist_ok=True)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º PDF
    pdf.output(filename)
    return filename


async def create_certificate_payment(user_id: int, amount: int, callback: CallbackQuery, state: FSMContext):
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞"""
    cert_code = f"CERT-{uuid.uuid4().hex[:8].upper()}"

    try:
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ÆKassa
        Configuration.account_id = YOOKASSA_SHOP_ID
        Configuration.secret_key = YOOKASSA_SECRET_KEY

        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –ø–ª–∞—Ç–µ–∂
        payment_id = str(uuid.uuid4())
        payment = Payment.create({
            "amount": {"value": str(amount), "currency": "RUB"},
            "confirmation": {
                "type": "redirect",
                "return_url": "https://t.me/flowersstories_bot"  # URL –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
            },
            "capture": True,
            "description": f"–ü–æ–¥–∞—Ä–æ—á–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–∞ {amount}‚ÇΩ",
            "metadata": {
                "user_id": user_id,
                "cert_code": cert_code,
                "type": "certificate"
            }
        }, idempotency_key=payment_id)

        await state.update_data(
            payment_id=payment.id,
            cert_amount=amount,
            cert_code=cert_code,
            payment_url=payment.confirmation.confirmation_url
        )
        await state.set_state(CertificateState.waiting_payment)

        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç", url=payment.confirmation.confirmation_url)],
            [InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"check_cert_payment_{payment.id}")]
        ])

        await callback.message.answer(
            f"üéÅ <b>–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–∞ {amount} ‚ÇΩ</b>\n\n"
            f"üí≥ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {amount} ‚ÇΩ\n"
            f"üîó –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã\n\n"
            f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ ¬´‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É¬ª",
            reply_markup=kb,
            parse_mode="HTML"
        )

    except Exception as e:
        print(f"Payment creation error: {e}")
        await callback.message.answer(
            f"üéÅ <b>–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–∞ {amount} ‚ÇΩ</b>\n\n"
            "‚ö†Ô∏è –ü–ª–∞—Ç–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.\n"
            "üìû –î–ª—è –ø–æ–∫—É–ø–∫–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º: @Therry_Voyager\n\n"
            f"–ö–æ–¥ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞: <code>{cert_code}</code>\n"
            "–°–æ–æ–±—â–∏—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –º–µ–Ω–µ–¥–∂–µ—Ä—É –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏.",
            parse_mode="HTML"
        )
