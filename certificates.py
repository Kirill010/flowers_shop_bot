from yookassa import Payment, Configuration
from config import YOOKASSA_SHOP_ID, YOOKASSA_SECRET_KEY
import uuid
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from database import add_certificate_purchase
import os
from fpdf import FPDF


# --- –í–ù–ï–®–ù–Ø–Ø –§–£–ù–ö–¶–ò–Ø: generate_certificate ---
def generate_certificate(amount: str, cert_code: str, filename: str):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
    pdf = FPDF()
    pdf.add_page()

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à—Ä–∏—Ñ—Ç
    pdf.add_font("DejaVu", "", "DejaVuSans.ttf", uni=True)
    pdf.add_font("DejaVu", "B", "DejaVuSans-Bold.ttf", uni=True)
    pdf.set_font("DejaVu", "B", 16)

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    pdf.cell(0, 10, "–ü–û–î–ê–†–û–ß–ù–´–ô –°–ï–†–¢–ò–§–ò–ö–ê–¢", ln=True, align="C")
    pdf.ln(5)

    # –°—É–º–º–∞
    pdf.set_font("DejaVu", "", 12)
    pdf.cell(0, 8, f"–°—É–º–º–∞: {amount} ‚ÇΩ", ln=True, align="C")

    # –ö–æ–¥
    pdf.cell(0, 8, f"–ö–æ–¥: {cert_code}", ln=True, align="C")
    pdf.ln(5)

    # –¢–µ–∫—Å—Ç
    pdf.multi_cell(0, 6, "–î–µ–π—Å—Ç–≤—É–µ—Ç 1 –≥–æ–¥ —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ–∫—É–ø–∫–∏. –ú–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –¥–ª—è –ª—é–±—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –≤ –º–∞–≥–∞–∑–∏–Ω–µ.")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º
    os.makedirs(os.path.dirname(filename), exist_ok=True)
    pdf.output(filename)
    return filename


# --- FSM –°–û–°–¢–û–Ø–ù–ò–Ø ---
class CertificateState(StatesGroup):
    waiting_payment = State()


# --- –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: create_certificate_payment ---
async def create_certificate_payment(user_id: int, amount: int, callback: CallbackQuery, state: FSMContext):
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞"""
    cert_code = f"CERT-{uuid.uuid4().hex[:8].upper()}"

    try:
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ÆKassa
        Configuration.account_id = YOOKASSA_SHOP_ID
        Configuration.secret_key = YOOKASSA_SECRET_KEY

        # –î–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞
        payment_data = {
            "amount": {"value": f"{amount:.2f}", "currency": "RUB"},
            "confirmation": {
                "type": "redirect",
                "return_url": "https://t.me/Therry_Voyager"  # ‚úÖ –ë–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤
            },
            "capture": True,
            "description": f"–ü–æ–¥–∞—Ä–æ—á–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–∞ {amount}‚ÇΩ",
            "metadata": {
                "user_id": user_id,
                "cert_code": cert_code,
                "type": "certificate",
                "email": "flowers@example.com"
            },
            "receipt": {
                "customer": {
                    "email": "flowers@example.com",
                    "full_name": "–ö–ª–∏–µ–Ω—Ç"
                },
                "items": [
                    {
                        "description": f"–ü–æ–¥–∞—Ä–æ—á–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç {cert_code}",
                        "quantity": "1.00",
                        "amount": {"value": f"{amount:.2f}", "currency": "RUB"},
                        "vat_code": "1",
                        "payment_mode": "full_payment",
                        "payment_subject": "service"
                    }
                ],
                "tax_system_code": 1
            }
        }

        # –°–æ–∑–¥–∞—ë–º –ø–ª–∞—Ç—ë–∂
        payment = Payment.create(payment_data, idempotency_key=str(uuid.uuid4()))

        if not payment.confirmation or not payment.confirmation.confirmation_url:
            raise Exception("–ù–µ—Ç —Å—Å—ã–ª–∫–∏ –¥–ª—è –æ–ø–ª–∞—Ç—ã")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ FSM
        await state.update_data(
            payment_id=payment.id,
            cert_amount=amount,
            cert_code=cert_code,
            payment_url=payment.confirmation.confirmation_url
        )
        await state.set_state(CertificateState.waiting_payment)

        # –ö–Ω–æ–ø–∫–∏
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=payment.confirmation.confirmation_url)],
            [InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"check_cert_payment_{payment.id}")]
        ])

        await callback.message.answer(
            f"üéÅ <b>–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–∞ {amount} ‚ÇΩ</b>\n\n"
            f"üí≥ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {amount} ‚ÇΩ\n"
            f"üîó –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã\n\n"
            f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ ¬´‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É¬ª",
            reply_markup=kb,
            parse_mode="HTML"
        )

    except Exception as e:
        print(f"Payment creation error: {e}")
        await callback.message.answer(
            f"üéÅ <b>–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–∞ {amount} ‚ÇΩ</b>\n\n"
            "‚ö†Ô∏è –ü–ª–∞—Ç–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.\n"
            "üìû –î–ª—è –ø–æ–∫—É–ø–∫–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º: @Therry_Voyager\n\n"
            f"–ö–æ–¥ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞: <code>{cert_code}</code>\n"
            "–°–æ–æ–±—â–∏—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏.",
            parse_mode="HTML"
        )
