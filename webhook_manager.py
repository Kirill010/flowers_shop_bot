import logging
import hmac
import hashlib
import json
from typing import Dict, Optional
from yookassa import Webhook
from config import YOOKASSA_SHOP_ID, YOOKASSA_SECRET_KEY, WEBHOOK_URL, WEBHOOK_SECRET
from database import register_yookassa_webhook, get_active_webhooks

logger = logging.getLogger(__name__)


class WebhookManager:
    def __init__(self):
        self.secret_key = WEBHOOK_SECRET.encode('utf-8')

    async def setup_webhooks(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±—Ö—É–∫–æ–≤ –≤ YooKassa"""
        try:
            # –°–æ–±—ã—Ç–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –º—ã —Ö–æ—Ç–∏–º –ø–æ–ª—É—á–∞—Ç—å
            events = ['payment.succeeded', 'payment.waiting_for_capture', 'payment.canceled']

            for event in events:
                try:
                    # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –≤–µ–±—Ö—É–∫
                    webhook = Webhook.add({
                        "event": event,
                        "url": WEBHOOK_URL
                    })

                    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                    register_yookassa_webhook(
                        webhook.id,
                        webhook.event,
                        webhook.url
                    )

                    logger.info(f"‚úÖ Webhook –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è —Å–æ–±—ã—Ç–∏—è: {event}")

                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook –¥–ª—è {event}: {e}")

        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhooks: {e}")

    def verify_webhook_signature(self, body: bytes, signature: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å—å –≤–µ–±—Ö—É–∫–∞ –æ—Ç YooKassa
        """
        try:
            # –°–æ–∑–¥–∞–µ–º HMAC –ø–æ–¥–ø–∏—Å—å
            expected_signature = hmac.new(
                self.secret_key,
                body,
                hashlib.sha256
            ).hexdigest()

            return hmac.compare_digest(expected_signature, signature)

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏: {e}")
            return False

    async def process_webhook(self, payload: Dict) -> bool:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–π –≤–µ–±—Ö—É–∫ –æ—Ç YooKassa
        """
        try:
            event_type = payload.get('event')
            payment_data = payload.get('object', {})
            payment_id = payment_data.get('id')

            logger.info(f"üì® –í—Ö–æ–¥—è—â–∏–π webhook: {event_type} –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞ {payment_id}")

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã —Å–æ–±—ã—Ç–∏–π
            if event_type == 'payment.succeeded':
                return await self._handle_payment_succeeded(payment_data)
            elif event_type == 'payment.waiting_for_capture':
                return await self._handle_payment_waiting(payment_data)
            elif event_type == 'payment.canceled':
                return await self._handle_payment_canceled(payment_data)
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è: {event_type}")
                return False

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}")
            return False

    async def _handle_payment_succeeded(self, payment_data: Dict) -> bool:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂"""
        try:
            payment_id = payment_data['id']
            status = payment_data['status']
            amount = payment_data['amount']['value']
            metadata = payment_data.get('metadata', {})

            logger.info(f"‚úÖ –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–µ–Ω: {payment_id}, —Å—É–º–º–∞: {amount}")

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            from database import update_payment_status, get_payment
            update_payment_status(payment_id, status)

            # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ
            payment_info = get_payment(payment_id)
            if payment_info:
                user_id = payment_info['user_id']

                # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –µ—Å–ª–∏ —ç—Ç–æ –Ω—É–∂–Ω–æ
                if metadata.get('type') == 'order':
                    await self._create_order_from_payment(payment_info, payment_data)

                # –°–æ–∑–¥–∞–µ–º —á–µ–∫ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                if metadata.get('email'):
                    from receipts import receipt_manager
                    await receipt_manager.create_receipt(payment_id, metadata['email'])

            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞: {e}")
            return False

    async def _handle_payment_waiting(self, payment_data: Dict) -> bool:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–ª–∞—Ç–µ–∂, –æ–∂–∏–¥–∞—é—â–∏–π –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
        payment_id = payment_data['id']
        logger.info(f"‚è≥ –ü–ª–∞—Ç–µ–∂ –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {payment_id}")

        from database import update_payment_status
        update_payment_status(payment_id, 'waiting_for_capture')

        return True

    async def _handle_payment_canceled(self, payment_data: Dict) -> bool:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–π –ø–ª–∞—Ç–µ–∂"""
        payment_id = payment_data['id']
        logger.info(f"‚ùå –ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω: {payment_id}")

        from database import update_payment_status
        update_payment_status(payment_id, 'canceled')

        return True

    async def _create_order_from_payment(self, payment_info: Dict, payment_data: Dict):
        """–°–æ–∑–¥–∞–µ—Ç –∑–∞–∫–∞–∑ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–∞"""
        try:
            metadata = payment_info.get('metadata', {})
            if isinstance(metadata, str):
                metadata = json.loads(metadata)

            from database import create_order
            order_id = create_order(
                user_id=payment_info['user_id'],
                name=metadata.get('name', ''),
                phone=metadata.get('phone', ''),
                address=metadata.get('address', ''),
                delivery_date=metadata.get('delivery_date', ''),
                delivery_time=metadata.get('delivery_time', ''),
                payment=metadata.get('payment_method', 'online'),
                delivery_cost=float(metadata.get('delivery_cost', 0)),
                delivery_type=metadata.get('delivery_type', 'delivery'),
                email=metadata.get('email'),
                bonus_used=int(metadata.get('bonus_used', 0))
            )

            if order_id != -1:
                logger.info(f"üì¶ –ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω: #{order_id} –∏–∑ –ø–ª–∞—Ç–µ–∂–∞ {payment_info['payment_id']}")

                # –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
                from database import clear_cart
                clear_cart(payment_info['user_id'])

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ –∏–∑ –ø–ª–∞—Ç–µ–∂–∞: {e}")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –≤–µ–±—Ö—É–∫–æ–≤
webhook_manager = WebhookManager()
