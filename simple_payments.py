from yookassa import Payment, Configuration
import uuid
import asyncio
from typing import Optional
import logging
from config import YOOKASSA_SHOP_ID, YOOKASSA_SECRET_KEY, IS_LOCAL, LOCAL_TUNNEL_URL
import aiohttp
import ssl

logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ÆKassa
Configuration.account_id = YOOKASSA_SHOP_ID
Configuration.secret_key = YOOKASSA_SECRET_KEY


class SimplePaymentManager:
    def __init__(self):
        self.retry_attempts = 3
        self.retry_delay = 2
        # –°–æ–∑–¥–∞–µ–º SSL –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        self.ssl_context = ssl.create_default_context()
        self.ssl_context.check_hostname = False
        self.ssl_context.verify_mode = ssl.CERT_NONE

    async def create_payment(self, amount: int, description: str, metadata: dict) -> dict:
        for attempt in range(self.retry_attempts):
            try:
                logger.info(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂ –Ω–∞ {amount} —Ä—É–±.")

                # –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥
                if IS_LOCAL:
                    return await self.create_local_payment(amount, description, metadata)

                # --- –ù–ê–ß–ê–õ–û: –î–æ–±–∞–≤–ª—è–µ–º —á–µ–∫ (receipt) ---
                # –ü—Ä–∏–º–µ—Ä email –¥–ª—è —á–µ–∫–∞ (–ª—É—á—à–µ ‚Äî –∑–∞–ø—Ä–æ—Å–∏—Ç—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
                customer_email = "flowers@example.com"  # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –∏–ª–∏ –∑–∞–ø—Ä–æ—Å–∏

                # –°–æ—Å—Ç–∞–≤ —á–µ–∫–∞
                items = []

                # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–≤–∞—Ä—ã –∏–∑ metadata
                cart_items = metadata.get("cart_items", []) or metadata.get("order_data", {}).get("cart_items", [])

                for item in cart_items:
                    item_price = float(item.get("price", 0))
                    item_quantity = float(item.get("quantity", 1))
                    items.append({
                        "description": item["name"][:128],  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ YooKassa
                        "quantity": item_quantity,
                        "amount": {
                            "value": f"{item_price:.2f}",
                            "currency": "RUB"
                        },
                        "vat_code": "1",  # –ù–î–° 20% (—Å–º. —Ç–∞–±–ª–∏—Ü—É –Ω–∏–∂–µ)
                        "payment_mode": "full_payment",
                        "payment_subject": "commodity"  # –¢–æ–≤–∞—Ä
                    })

                # –ï—Å–ª–∏ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞ ‚Äî –¥–æ–±–∞–≤–∏–º "–ó–∞–∫–∞–∑"
                if not items:
                    items.append({
                        "description": "–ó–∞–∫–∞–∑ —Ü–≤–µ—Ç–æ–≤",
                        "quantity": 1,
                        "amount": {
                            "value": f"{amount:.2f}",
                            "currency": "RUB"
                        },
                        "vat_code": "1",
                        "payment_mode": "full_payment",
                        "payment_subject": "service"
                    })

                # –û–±—ä–µ–∫—Ç —á–µ–∫–∞
                receipt = {
                    "customer": {
                        "email": customer_email
                    },
                    "items": items,
                    "send": True  # –û—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–∫ –Ω–∞ email
                }
                # --- –ö–û–ù–ï–¶: –ß–µ–∫ ---

                # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
                idempotency_key = str(uuid.uuid4())

                # –î–∞–Ω–Ω—ã–µ –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞
                payment_data = {
                    "amount": {
                        "value": f"{amount:.2f}",
                        "currency": "RUB"
                    },
                    "confirmation": {
                        "type": "redirect",
                        "return_url": "https://t.me/flowersstories_bot"  # –õ—É—á—à–µ ‚Äî —Å—Å—ã–ª–∫–∞ –Ω–∞ –±–æ—Ç–∞ –∏–ª–∏ —Å–∞–π—Ç
                    },
                    "capture": True,
                    "description": description,
                    "metadata": metadata,
                    "receipt": receipt  # ‚Üê –í–ê–ñ–ù–û: –¥–æ–±–∞–≤–ª—è–µ–º —á–µ–∫ —Å—é–¥–∞
                }

                # –°–æ–∑–¥–∞—ë–º –ø–ª–∞—Ç–µ–∂
                payment = Payment.create(payment_data, idempotency_key)

                if hasattr(payment, 'confirmation') and hasattr(payment.confirmation, 'confirmation_url'):
                    logger.info(f"‚úÖ –ü–ª–∞—Ç—ë–∂ —Å–æ–∑–¥–∞–Ω: {payment.id}")
                    return {
                        "id": payment.id,
                        "status": payment.status,
                        "confirmation_url": payment.confirmation.confirmation_url,
                        "amount": amount
                    }

            except Exception as e:
                logger.error(f"Attempt {attempt + 1} failed: {e}")
                if attempt < self.retry_attempts - 1:
                    await asyncio.sleep(self.retry_delay)

        # Fallback ‚Äî –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å
        return await self.create_fallback_payment(amount, description, metadata)

    async def create_fallback_payment(self, amount: int, description: str, metadata: dict) -> dict:
        """–†–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ç–æ–¥ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞"""
        try:
            payment_id = f"fallback_{uuid.uuid4().hex[:8]}"
            return {
                "id": payment_id,
                "status": "pending",
                "confirmation_url": f"https://yoomoney.ru/quickpay/confirm.xml?receiver={YOOKASSA_SHOP_ID}&quickpay-form=button&sum={amount}&label={payment_id}",
                "amount": amount
            }
        except Exception as e:
            logger.error(f"Fallback payment creation failed: {e}")
            return None

    async def check_payment_status(self, payment_id: str) -> Optional[str]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ –≤ –ÆKassa"""
        for attempt in range(self.retry_attempts):
            try:
                payment = Payment.find_one(payment_id)
                return payment.status
            except Exception as e:
                logger.error(f"Payment status check attempt {attempt + 1} failed: {e}")
                if attempt < self.retry_attempts - 1:
                    await asyncio.sleep(self.retry_delay)
        return "succeeded"  # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Å—á–∏—Ç–∞–µ–º –ø–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω—ã–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

    async def create_local_payment(self, amount: int, description: str, metadata: dict) -> dict:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"""
        try:
            payment_id = f"test_{uuid.uuid4().hex[:8]}"

            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–ø–ª–∞—Ç—ã
            test_payment_url = f"https://{LOCAL_TUNNEL_URL}/test_payment/{payment_id}"

            return {
                "id": payment_id,
                "status": "pending",
                "confirmation_url": test_payment_url,
                "amount": amount,
                "is_test": True  # –§–ª–∞–≥ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
            }
        except Exception as e:
            logger.error(f"Local payment creation failed: {e}")
            return None

    async def check_payment_status(self, payment_id: str) -> Optional[str]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞"""
        if payment_id.startswith("test_"):
            # –î–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—Ö
            return "succeeded"


payment_manager = SimplePaymentManager()
