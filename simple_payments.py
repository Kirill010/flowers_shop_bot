from yookassa import Payment, Configuration
import uuid
import asyncio
from typing import Optional
import logging
import aiohttp
from config import YOOKASSA_SHOP_ID, YOOKASSA_SECRET_KEY

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ÆKassa –û–î–ò–ù –†–ê–ó –≤ –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞
Configuration.account_id = YOOKASSA_SHOP_ID
Configuration.secret_key = YOOKASSA_SECRET_KEY
Configuration.timeout = 10  # 10 —Å–µ–∫—É–Ω–¥ –æ–∂–∏–¥–∞–Ω–∏—è
Configuration.max_attempts = 2  # 2 –ø–æ–ø—ã—Ç–∫–∏


class SimplePaymentManager:
    def __init__(self):
        self.retry_attempts = 3  # 3 –ø–æ–ø—ã—Ç–∫–∏ —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂
        self.retry_delay = 2  # –ñ–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏

    async def check_yookassa_availability(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ —Å–µ—Ä–≤–µ—Ä YooKassa"""
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(
                        'https://api.yookassa.ru/v3/',
                        timeout=10,
                        auth=aiohttp.BasicAuth(YOOKASSA_SHOP_ID, YOOKASSA_SECRET_KEY)
                ) as response:
                    return response.status == 200
        except Exception as e:
            logger.error(f"‚ùå YooKassa –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            return False

    async def create_payment(self, amount: int, description: str, metadata: dict) -> dict:
        """–°–æ–∑–¥–∞–µ—Ç –ø–ª–∞—Ç–µ–∂ –≤ –ÆKassa"""

        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å YooKassa
        if not await self.check_yookassa_availability():
            logger.error("‚ùå –°–µ—Ä–≤–µ—Ä YooKassa –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!")
            return None

        for attempt in range(self.retry_attempts):
            try:
                logger.info(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂ –Ω–∞ {amount} —Ä—É–±.")

                # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞
                payment_id = str(uuid.uuid4())

                # –î–∞–Ω–Ω—ã–µ –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞
                payment_data = {
                    "amount": {
                        "value": str(amount),
                        "currency": "RUB"
                    },
                    "confirmation": {
                        "type": "redirect",
                        "return_url": "https://t.me/Therry_Voyager"
                    },
                    "capture": True,  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–ø–∏—Å—ã–≤–∞–µ–º –¥–µ–Ω—å–≥–∏
                    "description": description,
                    "metadata": metadata
                }

                # –°–û–ó–î–ê–ï–ú –ü–õ–ê–¢–ï–ñ (—Å–∞–º–∞—è –≤–∞–∂–Ω–∞—è —á–∞—Å—Ç—å!)
                payment = Payment.create(payment_data, idempotency_key=payment_id)

                logger.info(f"‚úÖ –ü–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω! ID: {payment.id}")

                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ
                return {
                    "id": payment.id,
                    "status": payment.status,
                    "confirmation_url": payment.confirmation.confirmation_url,
                    "amount": amount
                }

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {e}")
                if attempt < self.retry_attempts - 1:
                    await asyncio.sleep(self.retry_delay)
                else:
                    logger.error("‚ùå –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂ –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å")
                    return None

    async def check_payment_status(self, payment_id: str) -> Optional[str]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –≤ –ÆKassa"""
        for attempt in range(self.retry_attempts):
            try:
                logger.info(f"üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ {payment_id}")

                # –ò—â–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ
                payment = Payment.find_one(payment_id)

                logger.info(f"‚úÖ –°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ {payment_id}: {payment.status}")
                return payment.status

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {e}")
                if attempt < self.retry_attempts - 1:
                    await asyncio.sleep(self.retry_delay)

        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ {payment_id}")
        return None


# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–ª–∞—Ç–µ–∂–∞–º–∏
payment_manager = SimplePaymentManager()
