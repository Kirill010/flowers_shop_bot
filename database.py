import sqlite3
import os
import json
from typing import List, Dict, Optional
from datetime import datetime, timedelta

DB_PATH = "data/florist.db"


def init_db():
    print("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    os.makedirs("data", exist_ok=True)
    os.makedirs("images", exist_ok=True)

    with sqlite3.connect(DB_PATH) as conn:
        cur = conn.cursor()

        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
        tables = [
            # products table
            """
            CREATE TABLE IF NOT EXISTS products (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT NOT NULL,
                description TEXT,
                full_description TEXT,
                price REAL NOT NULL,
                photo TEXT,
                category TEXT NOT NULL,
                created_date DATE DEFAULT CURRENT_DATE,
                is_daily BOOLEAN DEFAULT TRUE,
                in_stock BOOLEAN DEFAULT TRUE
            )
            """,
            # cart table
            """
            CREATE TABLE IF NOT EXISTS cart (
                user_id INTEGER NOT NULL,
                product_id INTEGER NOT NULL,
                quantity INTEGER DEFAULT 1,
                PRIMARY KEY(user_id, product_id)
            )
            """,
            # orders table (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Å –ø–æ–ª—è–º–∏ –¥–ª—è —Å–∫–∏–¥–æ–∫)
            """
            CREATE TABLE IF NOT EXISTS orders (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                items TEXT NOT NULL,
                total REAL NOT NULL,
                customer_name TEXT NOT NULL,
                phone TEXT NOT NULL,
                address TEXT,
                delivery_date TEXT,
                delivery_time TEXT,
                payment_method TEXT,
                delivery_cost INTEGER,
                delivery_type TEXT,
                bonus_used INTEGER,
                status TEXT DEFAULT 'new',
                points_used INTEGER DEFAULT 0,
                discount_applied REAL DEFAULT 0,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
            """,
            # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏
            """
            CREATE TABLE IF NOT EXISTS loyalty_program (
                user_id INTEGER PRIMARY KEY,
                total_spent REAL DEFAULT 0,     -- –í—Å–µ–≥–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ
                current_bonus INTEGER DEFAULT 0, -- –î–æ—Å—Ç—É–ø–Ω—ã–µ –±–æ–Ω—É—Å—ã
                total_bonus_earned INTEGER DEFAULT 0, -- –í—Å–µ–≥–æ –Ω–∞—á–∏—Å–ª–µ–Ω–æ –±–æ–Ω—É—Å–æ–≤
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
            """,
            # loyalty_history table
            """
            CREATE TABLE IF NOT EXISTS loyalty_history (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                order_id INTEGER,
                points_change INTEGER NOT NULL,
                reason TEXT NOT NULL,
                remaining_points INTEGER NOT NULL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
            """,
            # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–µ–π
            """
            CREATE TABLE IF NOT EXISTS payments (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                payment_id TEXT UNIQUE NOT NULL,
                user_id INTEGER NOT NULL,
                amount REAL NOT NULL,
                currency TEXT DEFAULT 'RUB',
                status TEXT NOT NULL,
                description TEXT,
                metadata TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
            """,
            # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–ø—ã—Ç–æ–∫ –≤–≤–æ–¥–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
            """
            CREATE TABLE IF NOT EXISTS certificate_attempts (
                user_id INTEGER NOT NULL,
                attempts INTEGER DEFAULT 0,
                last_attempt TIMESTAMP,
                blocked_until TIMESTAMP,
                PRIMARY KEY (user_id)
            )
            """,
            # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
            """
            CREATE TABLE IF NOT EXISTS certificates (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                amount INTEGER NOT NULL,
                cert_code TEXT UNIQUE NOT NULL,
                payment_id TEXT NOT NULL,
                used BOOLEAN DEFAULT FALSE,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
            """,
            # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –æ—Ç–∑—ã–≤–æ–≤
            """
            CREATE TABLE IF NOT EXISTS reviews (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                user_name TEXT,
                text TEXT NOT NULL,
                rating INTEGER DEFAULT 5,
                order_id INTEGER,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
            """,
            # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∑–∞–∫–∞–∑–æ–≤
            """
            CREATE TABLE IF NOT EXISTS order_history (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                order_id INTEGER NOT NULL,
                status TEXT NOT NULL,
                changed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (order_id) REFERENCES orders (id)
            )
            """,
            # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            """
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY,
                first_name TEXT,
                last_name TEXT,
                username TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
            """
        ]

        for table in tables:
            cur.execute(table)

        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤
        indexes = [
            "CREATE INDEX IF NOT EXISTS idx_products_category ON products(category)",
            "CREATE INDEX IF NOT EXISTS idx_products_stock ON products(in_stock)",
            "CREATE INDEX IF NOT EXISTS idx_payments_user_id ON payments(user_id)",
            "CREATE INDEX IF NOT EXISTS idx_payments_status ON payments(status)",
            "CREATE INDEX IF NOT EXISTS idx_payments_payment_id ON payments(payment_id)",
            "CREATE INDEX IF NOT EXISTS idx_loyalty_user_id ON loyalty_program(user_id)",
            "CREATE INDEX IF NOT EXISTS idx_loyalty_history_user ON loyalty_history(user_id)",
            "CREATE INDEX IF NOT EXISTS idx_loyalty_history_order ON loyalty_history(order_id)"
        ]

        for index in indexes:
            cur.execute(index)
        # init_test_data()
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")


def calculate_order_total(cart_items: list, delivery_cost: int, bonus_used: int = 0, user_id: int = None) -> dict:
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∏—Ç–æ–≥–æ–≤—É—é —Å—É–º–º—É –∑–∞–∫–∞–∑–∞ —Å —É—á–µ—Ç–æ–º –±–æ–Ω—É—Å–æ–≤"""
    products_total = sum(item['price'] * item['quantity'] for item in cart_items)

    # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–Ω—É—Å–æ–≤ - 30% –æ—Ç —Å—É–º–º—ã —Ç–æ–≤–∞—Ä–æ–≤ (–±–µ–∑ –¥–æ—Å—Ç–∞–≤–∫–∏)
    max_bonus_allowed = int(products_total * 0.3)
    actual_bonus_used = min(bonus_used, max_bonus_allowed)

    # –ë–æ–Ω—É—Å—ã –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –∫ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–æ–≤, –¥–æ—Å—Ç–∞–≤–∫–∞ –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ
    final_total = max(0, products_total - actual_bonus_used + delivery_cost)

    return {
        'products_total': products_total,
        'bonus_used': actual_bonus_used,
        'max_bonus_allowed': max_bonus_allowed,
        'final_total': final_total
    }


def calculate_bonus_from_order(total_amount: float) -> int:
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –±–æ–Ω—É—Å—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—É–º–º—ã –∑–∞–∫–∞–∑–∞ - 10%"""
    return int(total_amount * 0.1)


def spend_bonus_points(user_id: int, points_to_spend: int) -> bool:
    """–°–ø–∏—Å—ã–≤–∞–µ—Ç –±–æ–Ω—É—Å–Ω—ã–µ –±–∞–ª–ª—ã"""
    with sqlite3.connect(DB_PATH) as conn:
        cur = conn.cursor()
        cur.execute("SELECT current_bonus FROM loyalty_program WHERE user_id = ?", (user_id,))
        result = cur.fetchone()

        if not result or result[0] < points_to_spend:
            return False

        new_bonus = result[0] - points_to_spend
        cur.execute("UPDATE loyalty_program SET current_bonus = ? WHERE user_id = ?", (new_bonus, user_id))
        conn.commit()
        return True


def get_bonus_info(user_id: int) -> dict:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ–Ω—É—Å–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    with sqlite3.connect(DB_PATH) as conn:
        conn.row_factory = sqlite3.Row
        cur = conn.cursor()
        cur.execute("SELECT * FROM loyalty_program WHERE user_id = ?", (user_id,))
        result = cur.fetchone()

        if not result:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å —Å –Ω—É–ª—è
            init_user_loyalty(user_id)
            return {
                "total_spent": 0,
                "current_bonus": 0,
                "total_bonus_earned": 0
            }

        return dict(result)


def init_user_loyalty(user_id: int):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏"""
    with sqlite3.connect(DB_PATH) as conn:
        cur = conn.cursor()
        cur.execute("""
            INSERT OR IGNORE INTO loyalty_program (user_id) 
            VALUES (?)
        """, (user_id,))
        conn.commit()


def calculate_points_from_order(total_amount: float) -> int:
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –±–∞–ª–ª—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—É–º–º—ã –∑–∞–∫–∞–∑–∞"""
    # 1 –±–∞–ª–ª –∑–∞ –∫–∞–∂–¥—ã–µ 50 —Ä—É–±–ª–µ–π
    return int(total_amount // 50)


def add_loyalty_points(user_id: int, order_id: int, total_amount: float):
    """–ù–∞—á–∏—Å–ª—è–µ—Ç –±–∞–ª–ª—ã –∑–∞ –∑–∞–∫–∞–∑"""
    with sqlite3.connect(DB_PATH) as conn:
        conn.row_factory = sqlite3.Row
        cur = conn.cursor()

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cur.execute("SELECT * FROM loyalty_program WHERE user_id = ?", (user_id,))
        loyalty_data = cur.fetchone()

        if not loyalty_data:
            init_user_loyalty(user_id)
            loyalty_data = {"total_spent": 0, "current_points": 0, "level": 1}
        else:
            loyalty_data = dict(loyalty_data)

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –±–∞–∑–æ–≤—ã–µ –±–∞–ª–ª—ã
        base_points = calculate_points_from_order(total_amount)

        # –£—á–∏—Ç—ã–≤–∞–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª—å —É—Ä–æ–≤–Ω—è
        points_earned = int(base_points)

        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        new_total_spent = loyalty_data['total_spent'] + total_amount
        new_current_points = loyalty_data['current_points'] + points_earned
        new_level = new_total_spent

        cur.execute("""
            UPDATE loyalty_program 
            SET total_spent = ?, 
                current_points = ?, 
                lifetime_points = lifetime_points + ?,
                level = ?,
                updated_at = CURRENT_TIMESTAMP
            WHERE user_id = ?
        """, (new_total_spent, new_current_points, points_earned, new_level, user_id))

        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é
        cur.execute("""
            INSERT INTO loyalty_history 
            (user_id, order_id, points_change, reason, remaining_points)
            VALUES (?, ?, ?, ?, ?)
        """, (user_id, order_id, points_earned, f"–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –∑–∞ –∑–∞–∫–∞–∑ #{order_id}", new_current_points))

        conn.commit()

        return {
            "points_earned": points_earned,
            "total_points": new_current_points,
            "level": new_level,
        }


def spend_loyalty_points(user_id: int, order_id: int, points_to_spend: int, reason: str = "–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞"):
    """–°–ø–∏—Å—ã–≤–∞–µ—Ç –±–∞–ª–ª—ã"""
    with sqlite3.connect(DB_PATH) as conn:
        conn.row_factory = sqlite3.Row
        cur = conn.cursor()

        cur.execute("SELECT current_points FROM loyalty_program WHERE user_id = ?", (user_id,))
        result = cur.fetchone()

        if not result or result['current_points'] < points_to_spend:
            return False

        new_points = result['current_points'] - points_to_spend

        cur.execute("""
            UPDATE loyalty_program 
            SET current_points = ?, updated_at = CURRENT_TIMESTAMP
            WHERE user_id = ?
        """, (new_points, user_id))

        cur.execute("""
            INSERT INTO loyalty_history 
            (user_id, order_id, points_change, reason, remaining_points)
            VALUES (?, ?, ?, ?, ?)
        """, (user_id, order_id, -points_to_spend, reason, new_points))

        conn.commit()
        return True


def get_loyalty_info(user_id: int) -> dict:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    with sqlite3.connect(DB_PATH) as conn:
        conn.row_factory = sqlite3.Row
        cur = conn.cursor()

        cur.execute("SELECT * FROM loyalty_program WHERE user_id = ?", (user_id,))
        result = cur.fetchone()

        if not result:
            init_user_loyalty(user_id)
            return {
                "total_spent": 0,
                "current_points": 0,
                "lifetime_points": 0,
                "level": 1,
            }

        data = dict(result)
        return data


def get_loyalty_history(user_id: int, limit: int = 10) -> list:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–ª–ª–∞–º–∏"""
    with sqlite3.connect(DB_PATH) as conn:
        conn.row_factory = sqlite3.Row
        cur = conn.cursor()

        cur.execute("""
            SELECT * FROM loyalty_history 
            WHERE user_id = ? 
            ORDER BY created_at DESC 
            LIMIT ?
        """, (user_id, limit))

        return [dict(row) for row in cur.fetchall()]


def get_points_discount_value(points: int) -> float:
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –¥–µ–Ω–µ–∂–Ω—ã–π —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç –±–∞–ª–ª–æ–≤"""
    # 1 –±–∞–ª–ª = 1 —Ä—É–±–ª—å
    return points * 1.0


def cleanup_old_daily_products():
    """–£–¥–∞–ª—è–µ—Ç –±—É–∫–µ—Ç—ã –¥–Ω—è, –∫–æ—Ç–æ—Ä—ã–µ —Å—Ç–∞—Ä—à–µ 1 –¥–Ω—è"""
    with sqlite3.connect(DB_PATH) as conn:
        cur = conn.cursor()
        cur.execute("""
            DELETE FROM products 
            WHERE is_daily = TRUE 
            AND created_date < DATE('now')
        """)
        deleted_count = cur.rowcount
        conn.commit()
        if deleted_count > 0:
            print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ {deleted_count} —Å—Ç–∞—Ä—ã—Ö –±—É–∫–µ—Ç–æ–≤ –¥–Ω—è")
        return deleted_count


def add_to_cart(user_id: int, product_id: int):
    try:
        with sqlite3.connect(DB_PATH) as conn:
            cur = conn.cursor()
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω–µ
            cur.execute("SELECT quantity FROM cart WHERE user_id=? AND product_id=?", (user_id, product_id))
            row = cur.fetchone()

            if row:
                # –¢–æ–≤–∞—Ä —É–∂–µ –µ—Å—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω–µ - —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                cur.execute("UPDATE cart SET quantity = quantity + 1 WHERE user_id=? AND product_id=?",
                            (user_id, product_id))
            else:
                # –¢–æ–≤–∞—Ä–∞ –Ω–µ—Ç –≤ –∫–æ—Ä–∑–∏–Ω–µ - –¥–æ–±–∞–≤–ª—è–µ–º —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º 1
                cur.execute("INSERT INTO cart (user_id, product_id, quantity) VALUES (?, ?, 1)",
                            (user_id, product_id))
            conn.commit()
            return True
    except Exception as e:
        print(f"Error adding to cart: {e}")
        return False


def get_cart(user_id: int) -> List[Dict]:
    try:
        with sqlite3.connect(DB_PATH) as conn:
            conn.row_factory = sqlite3.Row
            cur = conn.cursor()
            cur.execute("""
                SELECT p.id, p.name, p.price, c.quantity, p.in_stock
                FROM cart c 
                LEFT JOIN products p ON c.product_id = p.id 
                WHERE c.user_id=?
            """, (user_id,))

            cart_items = []
            for row in cur.fetchall():
                cart_items.append(dict(row))
            return cart_items
    except Exception as e:
        print(f"Error getting cart: {e}")
        return []


def clear_cart(user_id: int):
    try:
        with sqlite3.connect(DB_PATH) as conn:
            cur = conn.cursor()
            cur.execute("DELETE FROM cart WHERE user_id=?", (user_id,))
            conn.commit()
            return True
    except Exception as e:
        print(f"Error clearing cart: {e}")
        return False


def add_bonus_points(user_id: int, order_id: int, total_amount: float):
    """–ù–∞—á–∏—Å–ª—è–µ—Ç –±–æ–Ω—É—Å—ã (10% –æ—Ç —Å—É–º–º—ã –∑–∞–∫–∞–∑–∞)"""
    with sqlite3.connect(DB_PATH) as conn:
        conn.row_factory = sqlite3.Row
        cur = conn.cursor()

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        cur.execute("SELECT current_bonus, total_spent FROM loyalty_program WHERE user_id = ?", (user_id,))
        row = cur.fetchone()

        if not row:
            init_user_loyalty(user_id)
            current_bonus = 0
            total_spent = 0
        else:
            current_bonus = row['current_bonus']
            total_spent = row['total_spent']

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –±–æ–Ω—É—Å—ã: 10% –æ—Ç —Å—É–º–º—ã
        bonus_earned = int(total_amount * 0.1)
        new_total_spent = total_spent + total_amount
        new_current_bonus = current_bonus + bonus_earned

        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å
        cur.execute("""
            UPDATE loyalty_program 
            SET total_spent = ?, 
                current_bonus = ?, 
                total_bonus_earned = total_bonus_earned + ?,
                updated_at = CURRENT_TIMESTAMP
            WHERE user_id = ?
        """, (new_total_spent, new_current_bonus, bonus_earned, user_id))

        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é
        cur.execute("""
            INSERT INTO loyalty_history 
            (user_id, order_id, points_change, reason, remaining_points)
            VALUES (?, ?, ?, ?, ?)
        """, (user_id, order_id, bonus_earned, f"–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –∑–∞ –∑–∞–∫–∞–∑ #{order_id}", new_current_bonus))

        conn.commit()

        return {
            "bonus_earned": bonus_earned,
            "total_bonus": new_current_bonus,
            "total_spent": new_total_spent
        }


def add_product(name: str, description: str, full_description: str, price: float,
                photo: str, category: str, is_daily: bool = True) -> int:
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Ç–æ–≤–∞—Ä –≤ –±–∞–∑—É (–¥–ª—è –±—É–∫–µ—Ç–æ–≤ –¥–Ω—è is_daily=True)"""
    with sqlite3.connect(DB_PATH) as conn:
        cur = conn.cursor()
        cur.execute("""
            INSERT INTO products (name, description, full_description, price, photo, category, is_daily)
            VALUES (?, ?, ?, ?, ?, ?, ?)
        """, (name, description, full_description, price, photo, category, is_daily))
        conn.commit()
        return cur.lastrowid


def create_order(user_id: int, name: str, phone: str, address: str,
                 delivery_date: str, delivery_time: str, payment: str,
                 delivery_cost: int = 0, delivery_type: str = "delivery",
                 bonus_used: int = 0) -> int:
    try:
        conn = sqlite3.connect(DB_PATH)
        cur = conn.cursor()

        # –°–æ–∑–¥–∞–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cur.execute("""
            INSERT OR IGNORE INTO users (id, first_name)
            VALUES (?, ?)
        """, (user_id, name.split()[0] if name else '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'))

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—É–º–º—É
        cart_items = get_cart(user_id)
        products_total = sum(item['price'] * item['quantity'] for item in cart_items)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –±–æ–Ω—É—Å–æ–≤
        if bonus_used > 0:
            bonus_info = get_bonus_info(user_id)
            max_bonus_allowed = int(products_total * 0.3)
            actual_bonus_used = min(bonus_used, bonus_info['current_bonus'], max_bonus_allowed)

            if actual_bonus_used < bonus_used:
                return -1  # –ö–æ–¥ –æ—à–∏–±–∫–∏ - –Ω–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ç–æ–ª—å–∫–æ –±–æ–Ω—É—Å–æ–≤
        else:
            actual_bonus_used = 0

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—É–º–º—É
        final_total = max(0, products_total + delivery_cost - actual_bonus_used)

        # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
        cur.execute("""
            INSERT INTO orders 
            (user_id, items, total, customer_name, phone, address, 
             delivery_date, delivery_time, payment_method, delivery_cost, 
             delivery_type, status, bonus_used)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
        """, (user_id, json.dumps(cart_items), final_total, name, phone, address,
              delivery_date, delivery_time, payment, delivery_cost,
              delivery_type, 'new', actual_bonus_used))

        order_id = cur.lastrowid

        # –°–ø–∏—Å—ã–≤–∞–µ–º –±–æ–Ω—É—Å—ã, –µ—Å–ª–∏ –æ–Ω–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å
        if actual_bonus_used > 0:
            # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –±–æ–Ω—É—Å–æ–≤
            cur.execute("""
                UPDATE loyalty_program 
                SET current_bonus = current_bonus - ?,
                    updated_at = CURRENT_TIMESTAMP
                WHERE user_id = ?
            """, (actual_bonus_used, user_id))

            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é —Å–ø–∏—Å–∞–Ω–∏–µ
            cur.execute("""
                INSERT INTO loyalty_history 
                (user_id, order_id, points_change, reason, remaining_points)
                SELECT ?, ?, -?, ?, current_bonus 
                FROM loyalty_program 
                WHERE user_id = ?
            """, (user_id, order_id, actual_bonus_used,
                  f"–°–ø–∏—Å–∞–Ω–∏–µ –∑–∞ –∑–∞–∫–∞–∑ #{order_id}", user_id))

        # –ù–∞—á–∏—Å–ª—è–µ–º –Ω–æ–≤—ã–µ –±–æ–Ω—É—Å—ã (10% –æ—Ç –∏—Ç–æ–≥–æ–≤–æ–π —Å—É–º–º—ã –ø–æ—Å–ª–µ —Å–∫–∏–¥–∫–∏)
        bonus_earned = int(final_total * 0.1)
        if bonus_earned > 0:
            cur.execute("""
                UPDATE loyalty_program 
                SET current_bonus = current_bonus + ?,
                    total_bonus_earned = total_bonus_earned + ?,
                    total_spent = total_spent + ?,
                    updated_at = CURRENT_TIMESTAMP
                WHERE user_id = ?
            """, (bonus_earned, bonus_earned, final_total, user_id))

            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ
            cur.execute("""
                INSERT INTO loyalty_history 
                (user_id, order_id, points_change, reason, remaining_points)
                SELECT ?, ?, ?, ?, current_bonus 
                FROM loyalty_program 
                WHERE user_id = ?
            """, (user_id, order_id, bonus_earned,
                  f"–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –∑–∞ –∑–∞–∫–∞–∑ #{order_id}", user_id))

        cur.execute("DELETE FROM cart WHERE user_id=?", (user_id,))
        conn.commit()
        return order_id
        # –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
        # clear_cart(user_id)

    except:
        conn.rollback()
        return -1


def add_certificate_purchase(user_id: int, amount: int, cert_code: str, payment_id: str):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∫—É–ø–∫–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞"""
    with sqlite3.connect(DB_PATH) as conn:
        cur = conn.cursor()
        cur.execute("""
            INSERT INTO certificates (user_id, amount, cert_code, payment_id)
            VALUES (?, ?, ?, ?)
        """, (user_id, amount, cert_code, payment_id))
        conn.commit()


def get_delivered_orders(user_id: int) -> List[Dict]:
    try:
        with sqlite3.connect(DB_PATH) as conn:
            conn.row_factory = sqlite3.Row
            cur = conn.cursor()
            cur.execute("""
                SELECT id, items, total, created_at, delivery_date 
                FROM orders 
                WHERE user_id=? AND status='delivered' 
                ORDER BY created_at DESC
            """, (user_id,))

            orders = []
            for row in cur.fetchall():
                orders.append(dict(row))
            return orders
    except Exception as e:
        print(f"Error getting delivered orders: {e}")
        return []


# database.py - —É–ª—É—á—à–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞

def update_order_status(order_id: int, status: str):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é"""
    with sqlite3.connect(DB_PATH) as conn:
        cur = conn.cursor()

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        cur.execute("SELECT status FROM orders WHERE id = ?", (order_id,))
        current_status = cur.fetchone()

        if current_status and current_status[0] != status:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            cur.execute("UPDATE orders SET status = ? WHERE id = ?", (status, order_id))

            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –∏–∑–º–µ–Ω–µ–Ω–∏–π
            cur.execute("""
                INSERT INTO order_history (order_id, status, changed_at)
                VALUES (?, ?, CURRENT_TIMESTAMP)
            """, (order_id, status))

            conn.commit()
            return True
        return False


def get_user_orders(user_id: int) -> List[Dict]:
    try:
        with sqlite3.connect(DB_PATH) as conn:
            conn.row_factory = sqlite3.Row
            cur = conn.cursor()
            cur.execute("""
                SELECT id, items, total, status, created_at, delivery_date, delivery_time
                FROM orders WHERE user_id=? ORDER BY created_at DESC
            """, (user_id,))

            orders = []
            for row in cur.fetchall():
                order = dict(row)
                if order['created_at']:
                    utc_time = datetime.strptime(order['created_at'], "%Y-%m-%d %H:%M:%S")
                    moscow_time = utc_time + timedelta(hours=3)
                    order['created_at'] = moscow_time.strftime("%Y-%m-%d %H:%M:%S")
                orders.append(order)
            return orders
    except Exception as e:
        print(f"Error getting orders: {e}")
        return []


def add_review(user_id: int, user_name: str, text: str, rating: int = 5, order_id: int = None):
    with sqlite3.connect(DB_PATH) as conn:
        cur = conn.cursor()
        cur.execute("""
            INSERT INTO reviews (user_id, user_name, text, rating, order_id) 
            VALUES (?, ?, ?, ?, ?)
        """, (user_id, user_name, text, rating, order_id))
        conn.commit()


def get_reviews(limit: int = 10) -> List[Dict]:
    with sqlite3.connect(DB_PATH) as conn:
        conn.row_factory = sqlite3.Row
        cur = conn.cursor()
        cur.execute("""
            SELECT user_name, text, rating, created_at 
            FROM reviews 
            ORDER BY created_at DESC 
            LIMIT ?
        """, (limit,))
        return [dict(row) for row in cur.fetchall()]


def check_product_availability(product_id: int) -> bool:
    with sqlite3.connect(DB_PATH) as conn:
        cur = conn.cursor()
        cur.execute("SELECT in_stock FROM products WHERE id=?", (product_id,))
        result = cur.fetchone()
        return result[0] if result else False


def get_available_delivery_dates():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞—Ç—ã –¥–æ—Å—Ç–∞–≤–∫–∏ (–≤–∫–ª—é—á–∞—è —Å–µ–≥–æ–¥–Ω—è)"""
    today = datetime.now()
    dates = []

    # –î–æ—Å—Ç–∞–≤–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è + —Å–ª–µ–¥—É—é—â–∏–µ 7 –¥–Ω–µ–π
    for i in range(8):
        delivery_date = today + timedelta(days=i)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è - –µ—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è –ø–æ—Å–ª–µ 15:00, —Ç–æ –¥–æ—Å—Ç–∞–≤–∫–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
        if i == 0 and today.hour >= 15:
            continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–µ–≥–æ–¥–Ω—è, –µ—Å–ª–∏ —É–∂–µ –ø–æ—Å–ª–µ 15:00

        if delivery_date.weekday() < 5:  # –¢–æ–ª—å–∫–æ —Ä–∞–±–æ—á–∏–µ –¥–Ω–∏ (–ø–Ω-–ø—Ç)
            dates.append(delivery_date.strftime("%d.%m.%Y"))

    return dates


def get_delivery_time_slots():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã"""
    return [
        "08:00-11:00",
        "11:00-14:00",
        "14:00-17:00",
        "17:00-20:00"
    ]


def check_certificate_validity(cert_code: str) -> dict:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞"""
    with sqlite3.connect(DB_PATH) as conn:
        conn.row_factory = sqlite3.Row
        cur = conn.cursor()
        cur.execute("""
            SELECT * FROM certificates 
            WHERE cert_code = ? AND used = FALSE 
            AND date(created_at, '+1 year') > date('now')
        """, (cert_code,))

        result = cur.fetchone()
        return dict(result) if result else None


def mark_certificate_used(cert_code: str):
    """–ü–æ–º–µ—á–∞–µ—Ç —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π"""
    with sqlite3.connect(DB_PATH) as conn:
        cur = conn.cursor()
        cur.execute("UPDATE certificates SET used = TRUE WHERE cert_code = ?", (cert_code,))
        conn.commit()


def save_payment(payment_id: str, user_id: int, amount: float, status: str,
                 description: str = "", metadata: dict = None):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–ª–∞—Ç–µ–∂–µ"""
    with sqlite3.connect(DB_PATH) as conn:
        cur = conn.cursor()
        cur.execute("""
            INSERT OR REPLACE INTO payments 
            (payment_id, user_id, amount, status, description, metadata)
            VALUES (?, ?, ?, ?, ?, ?)
        """, (payment_id, user_id, amount, status, description,
              json.dumps(metadata) if metadata else None))
        conn.commit()


def update_payment_status(payment_id: str, status: str):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞"""
    with sqlite3.connect(DB_PATH) as conn:
        cur = conn.cursor()
        cur.execute("""
            UPDATE payments 
            SET status = ?, updated_at = CURRENT_TIMESTAMP 
            WHERE payment_id = ?
        """, (status, payment_id))
        conn.commit()


def get_payment(payment_id: str) -> Optional[Dict]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–ª–∞—Ç–µ–∂–µ"""
    with sqlite3.connect(DB_PATH) as conn:
        conn.row_factory = sqlite3.Row
        cur = conn.cursor()
        cur.execute("SELECT * FROM payments WHERE payment_id = ?", (payment_id,))
        row = cur.fetchone()
        return dict(row) if row else None


def add_certificate_attempt(user_id: int):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ø—ã—Ç–∫—É –≤–≤–æ–¥–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞"""
    with sqlite3.connect(DB_PATH) as conn:
        cur = conn.cursor()
        now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

        cur.execute("""
            INSERT OR REPLACE INTO certificate_attempts 
            (user_id, attempts, last_attempt, blocked_until)
            VALUES (?, 
                    COALESCE((SELECT attempts FROM certificate_attempts WHERE user_id = ?), 0) + 1,
                    ?,
                    CASE 
                        WHEN COALESCE((SELECT attempts FROM certificate_attempts WHERE user_id = ?), 0) + 1 >= 3 
                        THEN datetime(?, '+30 minutes')
                        ELSE NULL
                    END)
        """, (user_id, user_id, now, user_id, now))
        conn.commit()


def get_certificate_attempts(user_id: int) -> dict:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ø—ã—Ç–∫–∞—Ö –≤–≤–æ–¥–∞"""
    with sqlite3.connect(DB_PATH) as conn:
        conn.row_factory = sqlite3.Row
        cur = conn.cursor()
        cur.execute("SELECT * FROM certificate_attempts WHERE user_id = ?", (user_id,))
        result = cur.fetchone()
        return dict(result) if result else None


def reset_certificate_attempts(user_id: int):
    """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫"""
    with sqlite3.connect(DB_PATH) as conn:
        cur = conn.cursor()
        cur.execute("DELETE FROM certificate_attempts WHERE user_id = ?", (user_id,))
        conn.commit()


# –í –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞ database.py –¥–æ–±–∞–≤–∏—Ç—å:
def init_test_data():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    with sqlite3.connect(DB_PATH) as conn:
        cur = conn.cursor()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä
        cur.execute("SELECT COUNT(*) FROM products WHERE id = 1")
        if cur.fetchone()[0] == 0:
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä
            cur.execute("""
                INSERT INTO products (id, name, description, full_description, price, category, is_daily, in_stock)
                VALUES (1, '–¢–µ—Å—Ç–æ–≤—ã–π –±—É–∫–µ—Ç', '–ö—Ä–∞—Å–∏–≤—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –±—É–∫–µ—Ç', '–ü–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±—É–∫–µ—Ç–∞', 
                        2500, 'bouquet', TRUE, TRUE)
            """)
            conn.commit()
            print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω")


def get_connection():
    """–°–æ–∑–¥–∞–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
    conn = sqlite3.connect(DB_PATH, timeout=30)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º timeout
    conn.execute("PRAGMA journal_mode=WAL")  # –í–∫–ª—é—á–∞–µ–º WAL mode –¥–ª—è –ª—É—á—à–µ–π –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ—Å—Ç–∏
    return conn
