from aiohttp import web
import json
import logging
from config import WEBAPP_HOST, WEBAPP_PORT
from webhook_manager import webhook_manager

logger = logging.getLogger(__name__)


async def yookassa_webhook_handler(request: web.Request) -> web.Response:
    """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–æ–≤"""
    try:
        # –ß–∏—Ç–∞–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
        body = await request.read()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å
        signature = request.headers.get('X-Webhook-Signature', '')
        if not webhook_manager.verify_webhook_signature(body, signature):
            logger.warning("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å –≤–µ–±—Ö—É–∫–∞")
            return web.json_response({"error": "Invalid signature"}, status=403)

        # –ü–∞—Ä—Å–∏–º JSON
        try:
            payload = json.loads(body.decode('utf-8'))
        except json.JSONDecodeError:
            logger.error("‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON –≤ –≤–µ–±—Ö—É–∫–µ")
            return web.json_response({"error": "Invalid JSON"}, status=400)

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–µ–±—Ö—É–∫
        success = await webhook_manager.process_webhook(payload)

        if success:
            return web.json_response({"status": "processed"})
        else:
            return web.json_response({"status": "failed"}, status=400)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫–∞: {e}")
        return web.json_response({"error": "Internal server error"}, status=500)


async def health_check(request: web.Request) -> web.Response:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞"""
    return web.json_response({"status": "ok", "service": "yookassa-webhook"})


def create_webhook_app() -> web.Application:
    """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –≤–µ–±—Ö—É–∫–æ–≤"""
    app = web.Application()
    app.router.add_post('/webhook/yookassa', yookassa_webhook_handler)
    app.router.add_get('/health', health_check)
    return app


async def start_webhook_server():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä –≤–µ–±—Ö—É–∫–æ–≤"""
    app = create_webhook_app()
    runner = web.AppRunner(app)
    await runner.setup()

    try:
        site = web.TCPSite(runner, WEBAPP_HOST, WEBAPP_PORT)
        await site.start()
        logger.info(f"üöÄ Webhook server started on {WEBAPP_HOST}:{WEBAPP_PORT}")
        return runner
    except Exception as e:
        logger.error(f"‚ùå Failed to start webhook server: {e}")
        # Fallback - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–ª–∏–Ω–≥ –≤–º–µ—Å—Ç–æ –≤–µ–±—Ö—É–∫–æ–≤
        return None
