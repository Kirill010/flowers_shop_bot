from aiohttp import web
import json
import asyncio
import logging
from typing import Dict, Any
from config import *
import datetime
from webhook_manager import webhook_manager
from database import save_webhook_log

logger = logging.getLogger(__name__)


async def yookassa_webhook_handler(request: web.Request) -> web.Response:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö –≤–µ–±—Ö—É–∫–æ–≤ –æ—Ç YooKassa
    """
    try:
        # –ß–∏—Ç–∞–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
        body = await request.read()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å
        signature = request.headers.get('X-Webhook-Signature', '')
        if not webhook_manager.verify_webhook_signature(body, signature):
            logger.warning("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å –≤–µ–±—Ö—É–∫–∞")
            return web.json_response({"error": "Invalid signature"}, status=403)

        # –ü–∞—Ä—Å–∏–º JSON
        try:
            payload = json.loads(body.decode('utf-8'))
        except json.JSONDecodeError:
            logger.error("‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON –≤ –≤–µ–±—Ö—É–∫–µ")
            return web.json_response({"error": "Invalid JSON"}, status=400)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–≥
        save_webhook_log(
            webhook_id=payload.get('event', 'unknown'),
            event_type=payload.get('event', 'unknown'),
            payment_id=payload.get('object', {}).get('id', 'unknown'),
            status_code=200,
            request_body=body.decode('utf-8')[:1000],  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä
            response_text="Processing"
        )

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–µ–±—Ö—É–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        asyncio.create_task(process_webhook_async(payload))

        # –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ—Ç–≤–µ—á–∞–µ–º YooKassa
        return web.json_response({"status": "accepted"})

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫–∞: {e}")
        return web.json_response({"error": "Internal server error"}, status=500)


async def process_webhook_async(payload: Dict[str, Any]):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–µ–±—Ö—É–∫–∞"""
    try:
        success = await webhook_manager.process_webhook(payload)
        if success:
            logger.info("‚úÖ Webhook —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
        else:
            logger.warning("‚ö†Ô∏è Webhook –æ–±—Ä–∞–±–æ—Ç–∞–Ω —Å –æ—à–∏–±–∫–∞–º–∏")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}")


async def health_check(request: web.Request) -> web.Response:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞"""
    return web.json_response({
        "status": "ok",
        "service": "yookassa-webhook",
        "timestamp": datetime.now().isoformat()
    })


def create_webhook_app() -> web.Application:
    """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –≤–µ–±—Ö—É–∫–æ–≤"""
    app = web.Application()

    # –ú–∞—Ä—à—Ä—É—Ç—ã
    app.router.add_post('/webhook/yookassa', yookassa_webhook_handler)
    app.router.add_get('/health', health_check)
    app.router.add_get('/webhook/yookassa', health_check)

    return app


async def start_webhook_server():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä –≤–µ–±—Ö—É–∫–æ–≤"""
    app = create_webhook_app()

    runner = web.AppRunner(app)
    await runner.setup()

    site = web.TCPSite(runner, WEBAPP_HOST, WEBAPP_PORT)
    await site.start()

    logger.info(f"üöÄ Webhook server started on {WEBAPP_HOST}:{WEBAPP_PORT}")
    logger.info(f"üì® Webhook URL: https://{WEBHOOK_HOST}/webhook/yookassa")

    return runner


async def stop_webhook_server(runner: web.AppRunner):
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä –≤–µ–±—Ö—É–∫–æ–≤"""
    await runner.cleanup()
    logger.info("üõë Webhook server stopped")
