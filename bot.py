import asyncio
import logging
from aiogram import Bot, Dispatcher
from aiogram.fsm.storage.memory import MemoryStorage
from user_handlers import router as user_router
from config import BOT_TOKEN, DEBUG, WEBAPP_HOST, WEBAPP_PORT
from database import init_db
from webhook_manager import webhook_manager
from webhook_server import start_webhook_server, stop_webhook_server
from simple_payments import payment_manager

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


async def on_startup():
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    logger.info("üîß Starting application...")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    logger.info("üìÄ Initializing database...")
    init_db()

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±—Ö—É–∫–æ–≤ –≤ YooKassa
    logger.info("üåê Setting up YooKassa webhooks...")
    await webhook_manager.setup_webhooks()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ YooKassa
    logger.info("üîç Checking YooKassa connection...")
    try:
        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
        test_payment = await payment_manager.create_payment(
            user_id=1,
            amount=1.00,
            description="Test connection",
            metadata={"type": "test"}
        )
        logger.info(f"‚úÖ YooKassa connection successful. Test payment: {test_payment['id']}")
    except Exception as e:
        logger.error(f"‚ùå YooKassa connection failed: {e}")
        # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Ä–∞–±–æ—Ç—É, —Ç–∞–∫ –∫–∞–∫ –≤–µ–±—Ö—É–∫–∏ –º–æ–≥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å


async def on_shutdown():
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    logger.info("üõë Shutting down application...")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        await on_startup()

        # –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
        bot = Bot(token=BOT_TOKEN, parse_mode="HTML")
        storage = MemoryStorage()
        dp = Dispatcher(storage=storage)

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä—ã
        dp.include_router(user_router)

        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –≤–µ–±—Ö—É–∫–æ–≤
        webhook_runner = await start_webhook_server()

        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        logger.info("ü§ñ Starting bot...")

        try:
            await dp.start_polling(bot)
        except Exception as e:
            logger.error(f"‚ùå Bot polling error: {e}")
        finally:
            # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
            await bot.session.close()
            await stop_webhook_server(webhook_runner)
            await on_shutdown()

    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è Application stopped by user")
    except Exception as e:
        logger.error(f"üí• Critical error: {e}")
        raise


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª
    asyncio.run(main())
